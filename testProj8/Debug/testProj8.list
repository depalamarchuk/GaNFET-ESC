
testProj8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000610  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000798  08000798  00010798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007b8  080007b8  000107c0  2**0
                  CONTENTS
  4 .ARM          00000000  080007b8  080007b8  000107c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007b8  080007c0  000107c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007b8  080007b8  000107b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007bc  080007bc  000107bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080007c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080007c0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015a8  00000000  00000000  000107f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000058d  00000000  00000000  00011d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000110  00000000  00000000  00012328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00012438  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013416  00000000  00000000  000124f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000017ea  00000000  00000000  00025906  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066756  00000000  00000000  000270f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008d846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000025c  00000000  00000000  0008d8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000780 	.word	0x08000780

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000780 	.word	0x08000780

080001c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <SystemInit+0x28>)
 80001ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d2:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <SystemInit+0x28>)
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <SystemInit+0x28>)
 80001de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001e2:	609a      	str	r2, [r3, #8]
#endif
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <InitPWM>:

#include "libPWM.h"

/********************************************* Used functions ********************************************/

void InitPWM (void){
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	RCC		-> APB1ENR	|= RCC_APB1ENR_TIM2EN;
 80001f8:	4b3f      	ldr	r3, [pc, #252]	; (80002f8 <InitPWM+0x104>)
 80001fa:	69db      	ldr	r3, [r3, #28]
 80001fc:	4a3e      	ldr	r2, [pc, #248]	; (80002f8 <InitPWM+0x104>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	61d3      	str	r3, [r2, #28]

	RCC		-> AHBENR	|= RCC_AHBENR_GPIOAEN;
 8000204:	4b3c      	ldr	r3, [pc, #240]	; (80002f8 <InitPWM+0x104>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a3b      	ldr	r2, [pc, #236]	; (80002f8 <InitPWM+0x104>)
 800020a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800020e:	6153      	str	r3, [r2, #20]

	GPIOA	-> MODER	&= ~GPIO_MODER_MODER1;
 8000210:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021a:	f023 030c 	bic.w	r3, r3, #12
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA	-> MODER	|= GPIO_MODER_MODER1_1;
 8000220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6013      	str	r3, [r2, #0]

	GPIOA	-> OTYPER	&= ~GPIO_OTYPER_OT_1;
 8000230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023a:	f023 0302 	bic.w	r3, r3, #2
 800023e:	6053      	str	r3, [r2, #4]

	GPIOA	-> PUPDR	&= ~GPIO_PUPDR_PUPDR1;
 8000240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024a:	f023 030c 	bic.w	r3, r3, #12
 800024e:	60d3      	str	r3, [r2, #12]

	GPIOA	-> OSPEEDR	&= ~GPIO_OSPEEDER_OSPEEDR1;
 8000250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025a:	f023 030c 	bic.w	r3, r3, #12
 800025e:	6093      	str	r3, [r2, #8]

	GPIOA	-> AFR[0]	|= (0x01 << (4*1));
 8000260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000264:	6a1b      	ldr	r3, [r3, #32]
 8000266:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6213      	str	r3, [r2, #32]

	TIM2	-> PSC		= 72-1; //f CK_PSC / (PSC[15:0] + 1)
 8000270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000274:	2247      	movs	r2, #71	; 0x47
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2	-> ARR		= 20000;
 8000278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000280:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2	-> CCR2		= 0;
 8000282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000286:	2200      	movs	r2, #0
 8000288:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2	-> CCMR1	&= ~TIM_CCMR1_OC2M;
 800028a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800029c:	6193      	str	r3, [r2, #24]
	TIM2	-> CCMR1	|= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2);
 800029e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80002ac:	6193      	str	r3, [r2, #24]

	TIM2	-> CCER		|= TIM_CCER_CC2E;
 80002ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b2:	6a1b      	ldr	r3, [r3, #32]
 80002b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b8:	f043 0310 	orr.w	r3, r3, #16
 80002bc:	6213      	str	r3, [r2, #32]
	TIM2	-> CCER		&= ~TIM_CCER_CC2P;
 80002be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c8:	f023 0320 	bic.w	r3, r3, #32
 80002cc:	6213      	str	r3, [r2, #32]

	TIM2	-> CR1		&= ~TIM_CR1_DIR;
 80002ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d8:	f023 0310 	bic.w	r3, r3, #16
 80002dc:	6013      	str	r3, [r2, #0]
	TIM2	-> CR1		|= TIM_CR1_CEN;
 80002de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6013      	str	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40021000 	.word	0x40021000

080002fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	2b00      	cmp	r3, #0
 800030c:	db0b      	blt.n	8000326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f003 021f 	and.w	r2, r3, #31
 8000314:	4907      	ldr	r1, [pc, #28]	; (8000334 <__NVIC_EnableIRQ+0x38>)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	095b      	lsrs	r3, r3, #5
 800031c:	2001      	movs	r0, #1
 800031e:	fa00 f202 	lsl.w	r2, r0, r2
 8000322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000e100 	.word	0xe000e100

08000338 <InitUSART>:

#include "libUART.h"

/********************************************* Used functions ********************************************/

void InitUSART (void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

	RCC		-> APB1ENR	|= RCC_APB1ENR_USART2EN;
 800033c:	4b42      	ldr	r3, [pc, #264]	; (8000448 <InitUSART+0x110>)
 800033e:	69db      	ldr	r3, [r3, #28]
 8000340:	4a41      	ldr	r2, [pc, #260]	; (8000448 <InitUSART+0x110>)
 8000342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000346:	61d3      	str	r3, [r2, #28]

	RCC		-> AHBENR	|= RCC_AHBENR_GPIOAEN;
 8000348:	4b3f      	ldr	r3, [pc, #252]	; (8000448 <InitUSART+0x110>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a3e      	ldr	r2, [pc, #248]	; (8000448 <InitUSART+0x110>)
 800034e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000352:	6153      	str	r3, [r2, #20]

	GPIOA	-> MODER	&= ~GPIO_MODER_MODER2;
 8000354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800035e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000362:	6013      	str	r3, [r2, #0]
	GPIOA	-> MODER	|= GPIO_MODER_MODER2_1;
 8000364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6013      	str	r3, [r2, #0]

	GPIOA	-> OTYPER	&= ~GPIO_OTYPER_OT_2;
 8000374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800037e:	f023 0304 	bic.w	r3, r3, #4
 8000382:	6053      	str	r3, [r2, #4]

	GPIOA	-> PUPDR	&= ~GPIO_PUPDR_PUPDR2;
 8000384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800038e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000392:	60d3      	str	r3, [r2, #12]
	GPIOA	-> PUPDR	|= GPIO_PUPDR_PUPDR2_0;
 8000394:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	60d3      	str	r3, [r2, #12]

	GPIOA	-> OSPEEDR	|= GPIO_OSPEEDER_OSPEEDR2;
 80003a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80003b2:	6093      	str	r3, [r2, #8]

	GPIOA	-> AFR[0]	|= (0x07 << (4*2));
 80003b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b8:	6a1b      	ldr	r3, [r3, #32]
 80003ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80003c2:	6213      	str	r3, [r2, #32]

	GPIOA	-> MODER	&= ~GPIO_MODER_MODER3;
 80003c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80003d2:	6013      	str	r3, [r2, #0]
	GPIOA	-> MODER	|= GPIO_MODER_MODER3_1;
 80003d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e2:	6013      	str	r3, [r2, #0]

	GPIOA	-> PUPDR	&= ~GPIO_PUPDR_PUPDR3;
 80003e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80003f2:	60d3      	str	r3, [r2, #12]

	GPIOA	-> AFR[0]	|= (0x07 << (4*3));
 80003f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f8:	6a1b      	ldr	r3, [r3, #32]
 80003fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003fe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000402:	6213      	str	r3, [r2, #32]

	USART2	-> BRR		= 0xEA6;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <InitUSART+0x114>)
 8000406:	f640 62a6 	movw	r2, #3750	; 0xea6
 800040a:	60da      	str	r2, [r3, #12]

	USART2	-> CR1		|= USART_CR1_TE;
 800040c:	4b0f      	ldr	r3, [pc, #60]	; (800044c <InitUSART+0x114>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a0e      	ldr	r2, [pc, #56]	; (800044c <InitUSART+0x114>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6013      	str	r3, [r2, #0]
	USART2	-> CR1		|= USART_CR1_RE;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <InitUSART+0x114>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a0b      	ldr	r2, [pc, #44]	; (800044c <InitUSART+0x114>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6013      	str	r3, [r2, #0]
	USART2	-> CR1 		|= USART_CR1_UE;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <InitUSART+0x114>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a08      	ldr	r2, [pc, #32]	; (800044c <InitUSART+0x114>)
 800042a:	f043 0301 	orr.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]

	USART2	-> CR1		|= USART_CR1_RXNEIE;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <InitUSART+0x114>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <InitUSART+0x114>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 800043c:	2026      	movs	r0, #38	; 0x26
 800043e:	f7ff ff5d 	bl	80002fc <__NVIC_EnableIRQ>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40004400 	.word	0x40004400

08000450 <SendUSART2>:


void SendUSART2 (char chr){
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->ISR & USART_ISR_TC));
 800045a:	bf00      	nop
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <SendUSART2+0x38>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000464:	2b00      	cmp	r3, #0
 8000466:	d0f9      	beq.n	800045c <SendUSART2+0xc>
	USART2	->ISR		&= ~USART_ISR_TC;
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <SendUSART2+0x38>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	4a06      	ldr	r2, [pc, #24]	; (8000488 <SendUSART2+0x38>)
 800046e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000472:	61d3      	str	r3, [r2, #28]

	USART2	->TDR 		= chr;
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <SendUSART2+0x38>)
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	b292      	uxth	r2, r2
 800047a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	40004400 	.word	0x40004400

0800048c <SendStringUSART2>:

void SendStringUSART2 (char* str){
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]

	while(str[i])
 8000498:	e009      	b.n	80004ae <SendStringUSART2+0x22>
	SendUSART2 (str[i++]);
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	1c5a      	adds	r2, r3, #1
 800049e:	73fa      	strb	r2, [r7, #15]
 80004a0:	461a      	mov	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ffd1 	bl	8000450 <SendUSART2>
	while(str[i])
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d1ef      	bne.n	800049a <SendStringUSART2+0xe>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <main>:
#include "main.h"

/************************************************** Main *************************************************/

int main(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0

	InitRCC();
 80004c6:	f000 f853 	bl	8000570 <InitRCC>
	InitGPIO();
 80004ca:	f000 f8d3 	bl	8000674 <InitGPIO>
	InitUSART();
 80004ce:	f7ff ff33 	bl	8000338 <InitUSART>
	InitPWM();
 80004d2:	f7ff fe8f 	bl	80001f4 <InitPWM>

	while(1)
 80004d6:	e7fe      	b.n	80004d6 <main+0x14>

080004d8 <CalculateOCReg>:

}


static uint16_t CalculateOCReg(uint8_t throttle)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	uint16_t OCReg;

	OCReg = throttle*10 + 1000;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	0092      	lsls	r2, r2, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80004f4:	81fb      	strh	r3, [r7, #14]

	return OCReg;
 80004f6:	89fb      	ldrh	r3, [r7, #14]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3714      	adds	r7, #20
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <USART2_IRQHandler>:

/***************************************************** Interrupt *****************************************************/

void USART2_IRQHandler (void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	static uint16_t DutyCycle;

	if (USART2->ISR & USART_CR1_RXNEIE){
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <USART2_IRQHandler+0x5c>)
 800050a:	69db      	ldr	r3, [r3, #28]
 800050c:	f003 0320 	and.w	r3, r3, #32
 8000510:	2b00      	cmp	r3, #0
 8000512:	d023      	beq.n	800055c <USART2_IRQHandler+0x58>

		USART2	-> ISR &= ~USART_CR1_RXNEIE;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <USART2_IRQHandler+0x5c>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	4a11      	ldr	r2, [pc, #68]	; (8000560 <USART2_IRQHandler+0x5c>)
 800051a:	f023 0320 	bic.w	r3, r3, #32
 800051e:	61d3      	str	r3, [r2, #28]

		if (((USART2 -> RDR) >= 0) && ((USART2 -> RDR) <= 100))
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <USART2_IRQHandler+0x5c>)
 8000522:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <USART2_IRQHandler+0x5c>)
 8000526:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000528:	b29b      	uxth	r3, r3
 800052a:	2b64      	cmp	r3, #100	; 0x64
 800052c:	d813      	bhi.n	8000556 <USART2_IRQHandler+0x52>
		{
			DutyCycle = CalculateOCReg(USART2 -> RDR);
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <USART2_IRQHandler+0x5c>)
 8000530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000532:	b29b      	uxth	r3, r3
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffce 	bl	80004d8 <CalculateOCReg>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <USART2_IRQHandler+0x60>)
 8000542:	801a      	strh	r2, [r3, #0]
			TIM2	-> CCR2		= DutyCycle;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <USART2_IRQHandler+0x60>)
 8000546:	881a      	ldrh	r2, [r3, #0]
 8000548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054c:	639a      	str	r2, [r3, #56]	; 0x38
			SendStringUSART2("OK.\r\n");
 800054e:	4806      	ldr	r0, [pc, #24]	; (8000568 <USART2_IRQHandler+0x64>)
 8000550:	f7ff ff9c 	bl	800048c <SendStringUSART2>
		{
			SendStringUSART2("Incorrect duty cycle.\r\n");
		}
	}

}
 8000554:	e002      	b.n	800055c <USART2_IRQHandler+0x58>
			SendStringUSART2("Incorrect duty cycle.\r\n");
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <USART2_IRQHandler+0x68>)
 8000558:	f7ff ff98 	bl	800048c <SendStringUSART2>
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40004400 	.word	0x40004400
 8000564:	2000001c 	.word	0x2000001c
 8000568:	08000798 	.word	0x08000798
 800056c:	080007a0 	.word	0x080007a0

08000570 <InitRCC>:

#include "sysinit.h"

/********************************************* Used functions ********************************************/

void InitRCC (void){
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

	RCC		->CR		|= ((uint32_t)RCC_CR_HSEON); 					// Enable HSE
 8000574:	4b3d      	ldr	r3, [pc, #244]	; (800066c <InitRCC+0xfc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a3c      	ldr	r2, [pc, #240]	; (800066c <InitRCC+0xfc>)
 800057a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800057e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));									// Ready start HSE
 8000580:	bf00      	nop
 8000582:	4b3a      	ldr	r3, [pc, #232]	; (800066c <InitRCC+0xfc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0f9      	beq.n	8000582 <InitRCC+0x12>

	FLASH	-> ACR		|= FLASH_ACR_PRFTBE;
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <InitRCC+0x100>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a37      	ldr	r2, [pc, #220]	; (8000670 <InitRCC+0x100>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6013      	str	r3, [r2, #0]
	FLASH	-> ACR		|= FLASH_ACR_LATENCY_2;							// Clock Flash memory
 800059a:	4b35      	ldr	r3, [pc, #212]	; (8000670 <InitRCC+0x100>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a34      	ldr	r2, [pc, #208]	; (8000670 <InitRCC+0x100>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6013      	str	r3, [r2, #0]

	RCC		-> CFGR		|= RCC_CFGR_HPRE_DIV1;							// AHB = SYSCLK/1
 80005a6:	4b31      	ldr	r3, [pc, #196]	; (800066c <InitRCC+0xfc>)
 80005a8:	4a30      	ldr	r2, [pc, #192]	; (800066c <InitRCC+0xfc>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PPRE1_DIV2;							// APB1 = HCLK/2
 80005ae:	4b2f      	ldr	r3, [pc, #188]	; (800066c <InitRCC+0xfc>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4a2e      	ldr	r2, [pc, #184]	; (800066c <InitRCC+0xfc>)
 80005b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005b8:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PPRE2_DIV1;							// APB2 = HCLK/1
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <InitRCC+0xfc>)
 80005bc:	4a2b      	ldr	r2, [pc, #172]	; (800066c <InitRCC+0xfc>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	6053      	str	r3, [r2, #4]

	RCC		-> CFGR		&= ~RCC_CFGR_PLLMUL;               				// clear PLLMUL bits
 80005c2:	4b2a      	ldr	r3, [pc, #168]	; (800066c <InitRCC+0xfc>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	4a29      	ldr	r2, [pc, #164]	; (800066c <InitRCC+0xfc>)
 80005c8:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80005cc:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		&= ~RCC_CFGR_PLLXTPRE;							// clear PLLXTPRE bits
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <InitRCC+0xfc>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	4a26      	ldr	r2, [pc, #152]	; (800066c <InitRCC+0xfc>)
 80005d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005d8:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		&= ~RCC_CFGR_PLLSRC;							// clear PLLSRC bits
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <InitRCC+0xfc>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <InitRCC+0xfc>)
 80005e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e4:	6053      	str	r3, [r2, #4]

	RCC		-> CFGR		|= RCC_CFGR_PLLSRC_HSE_PREDIV; 					// source HSE
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <InitRCC+0xfc>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <InitRCC+0xfc>)
 80005ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f0:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV1; 			// source HSE/1 = 8 MHz
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <InitRCC+0xfc>)
 80005f4:	4a1d      	ldr	r2, [pc, #116]	; (800066c <InitRCC+0xfc>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PLLMUL9; 							// PLL x9: clock = 8 MHz * 9 = 72 MHz
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <InitRCC+0xfc>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a1b      	ldr	r2, [pc, #108]	; (800066c <InitRCC+0xfc>)
 8000600:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000604:	6053      	str	r3, [r2, #4]

	RCC		-> CR		|= RCC_CR_PLLON;                      			// enable PLL
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <InitRCC+0xfc>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <InitRCC+0xfc>)
 800060c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000610:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {}     						// wait till PLL is ready
 8000612:	bf00      	nop
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <InitRCC+0xfc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f9      	beq.n	8000614 <InitRCC+0xa4>

	RCC		-> CFGR		|= RCC_CFGR_PPRE2_DIV2;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <InitRCC+0xfc>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4a11      	ldr	r2, [pc, #68]	; (800066c <InitRCC+0xfc>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062a:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PPRE1_DIV1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <InitRCC+0xfc>)
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <InitRCC+0xfc>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_HPRE_DIV1;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <InitRCC+0xfc>)
 8000636:	4a0d      	ldr	r2, [pc, #52]	; (800066c <InitRCC+0xfc>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	6053      	str	r3, [r2, #4]

	RCC		-> CFGR		&= ~RCC_CFGR_SW;                   				// clear SW bits
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <InitRCC+0xfc>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <InitRCC+0xfc>)
 8000642:	f023 0303 	bic.w	r3, r3, #3
 8000646:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_SW_PLL;               				// select source SYSCLK = PLL
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <InitRCC+0xfc>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <InitRCC+0xfc>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	6053      	str	r3, [r2, #4]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1) {} 				// wait till PLL is used
 8000654:	bf00      	nop
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <InitRCC+0xfc>)
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f003 030c 	and.w	r3, r3, #12
 800065e:	2b08      	cmp	r3, #8
 8000660:	d1f9      	bne.n	8000656 <InitRCC+0xe6>

}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40021000 	.word	0x40021000
 8000670:	40022000 	.word	0x40022000

08000674 <InitGPIO>:

	RCC		-> CFGR |= RCC_CFGR_MCO_SYSCLK;								// select source clokc SYSCLK

}

void InitGPIO (void){
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
/*Enable LD2 on pin PB13*/

	RCC		-> AHBENR	|= RCC_AHBENR_GPIOBEN;							// Enable clock port B
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <InitGPIO+0x64>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <InitGPIO+0x64>)
 800067e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000682:	6153      	str	r3, [r2, #20]
	RCC		-> AHBENR	|= RCC_AHBENR_GPIOCEN;							// Enable clock port C
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <InitGPIO+0x64>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <InitGPIO+0x64>)
 800068a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800068e:	6153      	str	r3, [r2, #20]

	GPIOB	-> MODER	&= ~GPIO_MODER_MODER13;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <InitGPIO+0x68>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a11      	ldr	r2, [pc, #68]	; (80006dc <InitGPIO+0x68>)
 8000696:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800069a:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODER13_0;						// Setting GPIO for PP output
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <InitGPIO+0x68>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <InitGPIO+0x68>)
 80006a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006a6:	6013      	str	r3, [r2, #0]

	GPIOB	-> MODER	&= ~GPIO_MODER_MODER0;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <InitGPIO+0x68>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <InitGPIO+0x68>)
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODER0_0;							// Setting GPIO for PP output
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <InitGPIO+0x68>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a08      	ldr	r2, [pc, #32]	; (80006dc <InitGPIO+0x68>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6013      	str	r3, [r2, #0]

	GPIOC	-> MODER	&= ~GPIO_MODER_MODER13;							// Setting GPIO for floating input
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <InitGPIO+0x6c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <InitGPIO+0x6c>)
 80006c6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400
 80006e0:	48000800 	.word	0x48000800

080006e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800071c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006ea:	e003      	b.n	80006f4 <LoopCopyDataInit>

080006ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006f2:	3104      	adds	r1, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006fc:	d3f6      	bcc.n	80006ec <CopyDataInit>
	ldr	r2, =_sbss
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000700:	e002      	b.n	8000708 <LoopFillZerobss>

08000702 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000702:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000704:	f842 3b04 	str.w	r3, [r2], #4

08000708 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <LoopForever+0x16>)
	cmp	r2, r3
 800070a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800070c:	d3f9      	bcc.n	8000702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070e:	f7ff fd5b 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000712:	f000 f811 	bl	8000738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000716:	f7ff fed4 	bl	80004c2 <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800071c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8000720:	080007c0 	.word	0x080007c0
	ldr	r0, =_sdata
 8000724:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000728:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 800072c:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000730:	20000020 	.word	0x20000020

08000734 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_IRQHandler>
	...

08000738 <__libc_init_array>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4e0d      	ldr	r6, [pc, #52]	; (8000770 <__libc_init_array+0x38>)
 800073c:	4c0d      	ldr	r4, [pc, #52]	; (8000774 <__libc_init_array+0x3c>)
 800073e:	1ba4      	subs	r4, r4, r6
 8000740:	10a4      	asrs	r4, r4, #2
 8000742:	2500      	movs	r5, #0
 8000744:	42a5      	cmp	r5, r4
 8000746:	d109      	bne.n	800075c <__libc_init_array+0x24>
 8000748:	4e0b      	ldr	r6, [pc, #44]	; (8000778 <__libc_init_array+0x40>)
 800074a:	4c0c      	ldr	r4, [pc, #48]	; (800077c <__libc_init_array+0x44>)
 800074c:	f000 f818 	bl	8000780 <_init>
 8000750:	1ba4      	subs	r4, r4, r6
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	2500      	movs	r5, #0
 8000756:	42a5      	cmp	r5, r4
 8000758:	d105      	bne.n	8000766 <__libc_init_array+0x2e>
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000760:	4798      	blx	r3
 8000762:	3501      	adds	r5, #1
 8000764:	e7ee      	b.n	8000744 <__libc_init_array+0xc>
 8000766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800076a:	4798      	blx	r3
 800076c:	3501      	adds	r5, #1
 800076e:	e7f2      	b.n	8000756 <__libc_init_array+0x1e>
 8000770:	080007b8 	.word	0x080007b8
 8000774:	080007b8 	.word	0x080007b8
 8000778:	080007b8 	.word	0x080007b8
 800077c:	080007bc 	.word	0x080007bc

08000780 <_init>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr

0800078c <_fini>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr
