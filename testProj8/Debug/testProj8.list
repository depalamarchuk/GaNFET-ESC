
testProj8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000299c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d6c  20000004  08002b70  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d70  08002b70  00022d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008460  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000145f  00000000  00000000  00028494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000580  00000000  00000000  000298f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004c8  00000000  00000000  00029e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c8f  00000000  00000000  0002a340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005533  00000000  00000000  0003efcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000710b2  00000000  00000000  00044502  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b55b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001458  00000000  00000000  000b5630  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000004 	.word	0x20000004
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002b14 	.word	0x08002b14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000008 	.word	0x20000008
 80001cc:	08002b14 	.word	0x08002b14

080001d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <SystemInit+0x28>)
 80001d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001da:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <SystemInit+0x28>)
 80001dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <SystemInit+0x28>)
 80001e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001ea:	609a      	str	r2, [r3, #8]
#endif
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <InitPWM>:

#include "libPWM.h"

/********************************************* Used functions ********************************************/

void InitPWM (void){
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	RCC		-> APB1ENR	|= RCC_APB1ENR_TIM2EN;
 8000200:	4b3f      	ldr	r3, [pc, #252]	; (8000300 <InitPWM+0x104>)
 8000202:	69db      	ldr	r3, [r3, #28]
 8000204:	4a3e      	ldr	r2, [pc, #248]	; (8000300 <InitPWM+0x104>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	61d3      	str	r3, [r2, #28]

	RCC		-> AHBENR	|= RCC_AHBENR_GPIOAEN;
 800020c:	4b3c      	ldr	r3, [pc, #240]	; (8000300 <InitPWM+0x104>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a3b      	ldr	r2, [pc, #236]	; (8000300 <InitPWM+0x104>)
 8000212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000216:	6153      	str	r3, [r2, #20]

	GPIOA	-> MODER	&= ~GPIO_MODER_MODER1;
 8000218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000222:	f023 030c 	bic.w	r3, r3, #12
 8000226:	6013      	str	r3, [r2, #0]
	GPIOA	-> MODER	|= GPIO_MODER_MODER1_1;
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6013      	str	r3, [r2, #0]

	GPIOA	-> OTYPER	&= ~GPIO_OTYPER_OT_1;
 8000238:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000242:	f023 0302 	bic.w	r3, r3, #2
 8000246:	6053      	str	r3, [r2, #4]

	GPIOA	-> PUPDR	&= ~GPIO_PUPDR_PUPDR1;
 8000248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000252:	f023 030c 	bic.w	r3, r3, #12
 8000256:	60d3      	str	r3, [r2, #12]

	GPIOA	-> OSPEEDR	&= ~GPIO_OSPEEDER_OSPEEDR1;
 8000258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000262:	f023 030c 	bic.w	r3, r3, #12
 8000266:	6093      	str	r3, [r2, #8]

	GPIOA	-> AFR[0]	|= (0x01 << (4*1));
 8000268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026c:	6a1b      	ldr	r3, [r3, #32]
 800026e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6213      	str	r3, [r2, #32]

	TIM2	-> PSC		= 720-1;
 8000278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000280:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2	-> ARR		= 100000;
 8000282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000286:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <InitPWM+0x108>)
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2	-> CCR2		= 0;
 800028a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028e:	2200      	movs	r2, #0
 8000290:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2	-> CCMR1	&= ~TIM_CCMR1_OC2M;
 8000292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80002a4:	6193      	str	r3, [r2, #24]
	TIM2	-> CCMR1	|= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2);
 80002a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b0:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80002b4:	6193      	str	r3, [r2, #24]

	TIM2	-> CCER		|= TIM_CCER_CC2E;
 80002b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c0:	f043 0310 	orr.w	r3, r3, #16
 80002c4:	6213      	str	r3, [r2, #32]
	TIM2	-> CCER		&= ~TIM_CCER_CC2P;
 80002c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d0:	f023 0320 	bic.w	r3, r3, #32
 80002d4:	6213      	str	r3, [r2, #32]

	TIM2	-> CR1		&= ~TIM_CR1_DIR;
 80002d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e0:	f023 0310 	bic.w	r3, r3, #16
 80002e4:	6013      	str	r3, [r2, #0]
	TIM2	-> CR1		|= TIM_CR1_CEN;
 80002e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6013      	str	r3, [r2, #0]
}
 80002f6:	bf00      	nop
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000
 8000304:	000186a0 	.word	0x000186a0

08000308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	2b00      	cmp	r3, #0
 8000318:	db0b      	blt.n	8000332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	f003 021f 	and.w	r2, r3, #31
 8000320:	4907      	ldr	r1, [pc, #28]	; (8000340 <__NVIC_EnableIRQ+0x38>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	095b      	lsrs	r3, r3, #5
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f202 	lsl.w	r2, r0, r2
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100

08000344 <InitUSART>:

#include "libUART.h"

/********************************************* Used functions ********************************************/

void InitUSART (void){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

	RCC		-> APB1ENR	|= RCC_APB1ENR_USART2EN;
 8000348:	4b42      	ldr	r3, [pc, #264]	; (8000454 <InitUSART+0x110>)
 800034a:	69db      	ldr	r3, [r3, #28]
 800034c:	4a41      	ldr	r2, [pc, #260]	; (8000454 <InitUSART+0x110>)
 800034e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000352:	61d3      	str	r3, [r2, #28]

	RCC		-> AHBENR	|= RCC_AHBENR_GPIOAEN;
 8000354:	4b3f      	ldr	r3, [pc, #252]	; (8000454 <InitUSART+0x110>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a3e      	ldr	r2, [pc, #248]	; (8000454 <InitUSART+0x110>)
 800035a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035e:	6153      	str	r3, [r2, #20]

	GPIOA	-> MODER	&= ~GPIO_MODER_MODER2;
 8000360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800036a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800036e:	6013      	str	r3, [r2, #0]
	GPIOA	-> MODER	|= GPIO_MODER_MODER2_1;
 8000370:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6013      	str	r3, [r2, #0]

	GPIOA	-> OTYPER	&= ~GPIO_OTYPER_OT_2;
 8000380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800038a:	f023 0304 	bic.w	r3, r3, #4
 800038e:	6053      	str	r3, [r2, #4]

	GPIOA	-> PUPDR	&= ~GPIO_PUPDR_PUPDR2;
 8000390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800039a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800039e:	60d3      	str	r3, [r2, #12]
	GPIOA	-> PUPDR	|= GPIO_PUPDR_PUPDR2_0;
 80003a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a4:	68db      	ldr	r3, [r3, #12]
 80003a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	60d3      	str	r3, [r2, #12]

	GPIOA	-> OSPEEDR	|= GPIO_OSPEEDER_OSPEEDR2;
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80003be:	6093      	str	r3, [r2, #8]

	GPIOA	-> AFR[0]	|= (0x07 << (4*2));
 80003c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003c4:	6a1b      	ldr	r3, [r3, #32]
 80003c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80003ce:	6213      	str	r3, [r2, #32]

	GPIOA	-> MODER	&= ~GPIO_MODER_MODER3;
 80003d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80003de:	6013      	str	r3, [r2, #0]
	GPIOA	-> MODER	|= GPIO_MODER_MODER3_1;
 80003e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ee:	6013      	str	r3, [r2, #0]

	GPIOA	-> PUPDR	&= ~GPIO_PUPDR_PUPDR3;
 80003f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f4:	68db      	ldr	r3, [r3, #12]
 80003f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80003fe:	60d3      	str	r3, [r2, #12]

	GPIOA	-> AFR[0]	|= (0x07 << (4*3));
 8000400:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000404:	6a1b      	ldr	r3, [r3, #32]
 8000406:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800040a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800040e:	6213      	str	r3, [r2, #32]

	USART2	-> BRR		= 0xEA6;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <InitUSART+0x114>)
 8000412:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000416:	60da      	str	r2, [r3, #12]

	USART2	-> CR1		|= USART_CR1_TE;
 8000418:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <InitUSART+0x114>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <InitUSART+0x114>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6013      	str	r3, [r2, #0]
	USART2	-> CR1		|= USART_CR1_RE;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <InitUSART+0x114>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <InitUSART+0x114>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6013      	str	r3, [r2, #0]
	USART2	-> CR1 		|= USART_CR1_UE;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <InitUSART+0x114>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a08      	ldr	r2, [pc, #32]	; (8000458 <InitUSART+0x114>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6013      	str	r3, [r2, #0]

	USART2	-> CR1		|= USART_CR1_RXNEIE;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <InitUSART+0x114>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <InitUSART+0x114>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART2_IRQn);
 8000448:	2026      	movs	r0, #38	; 0x26
 800044a:	f7ff ff5d 	bl	8000308 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40004400 	.word	0x40004400

0800045c <SendUSART2>:


void SendUSART2 (char chr){
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->ISR & USART_ISR_TC));
 8000466:	bf00      	nop
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <SendUSART2+0x38>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0f9      	beq.n	8000468 <SendUSART2+0xc>
	USART2	->ISR		&= ~USART_ISR_TC;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <SendUSART2+0x38>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	4a06      	ldr	r2, [pc, #24]	; (8000494 <SendUSART2+0x38>)
 800047a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800047e:	61d3      	str	r3, [r2, #28]

	USART2	->TDR 		= chr;
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SendUSART2+0x38>)
 8000482:	79fa      	ldrb	r2, [r7, #7]
 8000484:	b292      	uxth	r2, r2
 8000486:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40004400 	.word	0x40004400

08000498 <SendStringUSART2>:

void SendStringUSART2 (char* str){
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]

	while(str[i])
 80004a4:	e009      	b.n	80004ba <SendStringUSART2+0x22>
	SendUSART2 (str[i++]);
 80004a6:	7bfb      	ldrb	r3, [r7, #15]
 80004a8:	1c5a      	adds	r2, r3, #1
 80004aa:	73fa      	strb	r2, [r7, #15]
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ffd1 	bl	800045c <SendUSART2>
	while(str[i])
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	4413      	add	r3, r2
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d1ef      	bne.n	80004a6 <SendStringUSART2+0xe>
}
 80004c6:	bf00      	nop
 80004c8:	3710      	adds	r7, #16
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <main>:
#include "main.h"

/************************************************** Main *************************************************/

int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8

	InitRCC();
 80004d6:	f000 f8b3 	bl	8000640 <InitRCC>
	GenMCO();
 80004da:	f000 f933 	bl	8000744 <GenMCO>
	InitGPIO();
 80004de:	f000 f95f 	bl	80007a0 <InitGPIO>
	InitUSART();
 80004e2:	f7ff ff2f 	bl	8000344 <InitUSART>
	InitPWM();
 80004e6:	f7ff fe89 	bl	80001fc <InitPWM>

	xTaskCreate(vTaskButtonUser, "Button", 32, 0, 1, 0);
 80004ea:	2300      	movs	r3, #0
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2220      	movs	r2, #32
 80004f6:	4908      	ldr	r1, [pc, #32]	; (8000518 <main+0x48>)
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x4c>)
 80004fa:	f001 f8e7 	bl	80016cc <xTaskCreate>
	xTaskCreate(vTaskPWMGen, "PWM", 32, 0, 1, 0);
 80004fe:	2300      	movs	r3, #0
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	2220      	movs	r2, #32
 800050a:	4905      	ldr	r1, [pc, #20]	; (8000520 <main+0x50>)
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x54>)
 800050e:	f001 f8dd 	bl	80016cc <xTaskCreate>

	vTaskStartScheduler();
 8000512:	f001 fa41 	bl	8001998 <vTaskStartScheduler>

	while(1)
 8000516:	e7fe      	b.n	8000516 <main+0x46>
 8000518:	08002b2c 	.word	0x08002b2c
 800051c:	08000599 	.word	0x08000599
 8000520:	08002b34 	.word	0x08002b34
 8000524:	08000529 	.word	0x08000529

08000528 <vTaskPWMGen>:

}

/************************************************ Used FreeRTOS tasks ************************************************/

void vTaskPWMGen (void *argument){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	static uint16_t i;

	uint8_t sw = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	73fb      	strb	r3, [r7, #15]

	while (1)
	{
		TIM2	-> CCR2		= i;
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <vTaskPWMGen+0x6c>)
 8000536:	881a      	ldrh	r2, [r3, #0]
 8000538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053c:	639a      	str	r2, [r3, #56]	; 0x38

		if (sw == 0){
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d106      	bne.n	8000552 <vTaskPWMGen+0x2a>
			i++;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <vTaskPWMGen+0x6c>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <vTaskPWMGen+0x6c>)
 800054e:	801a      	strh	r2, [r3, #0]
 8000550:	e005      	b.n	800055e <vTaskPWMGen+0x36>
		}
		else
		{
			i--;
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <vTaskPWMGen+0x6c>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	3b01      	subs	r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vTaskPWMGen+0x6c>)
 800055c:	801a      	strh	r2, [r3, #0]
		}

		if (i == 1000){
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <vTaskPWMGen+0x6c>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000566:	d102      	bne.n	800056e <vTaskPWMGen+0x46>
			sw = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	73fb      	strb	r3, [r7, #15]
 800056c:	e00d      	b.n	800058a <vTaskPWMGen+0x62>
		}
		else if (i == 0 || i > 1000)
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <vTaskPWMGen+0x6c>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <vTaskPWMGen+0x58>
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <vTaskPWMGen+0x6c>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800057e:	d904      	bls.n	800058a <vTaskPWMGen+0x62>
		{
			i = 0;
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <vTaskPWMGen+0x6c>)
 8000582:	2200      	movs	r2, #0
 8000584:	801a      	strh	r2, [r3, #0]
			sw = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]
		}

		vTaskDelay(5);
 800058a:	2005      	movs	r0, #5
 800058c:	f001 f9d0 	bl	8001930 <vTaskDelay>
		TIM2	-> CCR2		= i;
 8000590:	e7d0      	b.n	8000534 <vTaskPWMGen+0xc>
 8000592:	bf00      	nop
 8000594:	20000020 	.word	0x20000020

08000598 <vTaskButtonUser>:
	}
}

void vTaskButtonUser (void *argument){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

	while (1)
	{
		if ((GPIOC -> IDR & GPIO_IDR_13) == 0){
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <vTaskButtonUser+0x34>)
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10b      	bne.n	80005c4 <vTaskButtonUser+0x2c>
			vTaskDelay(100);
 80005ac:	2064      	movs	r0, #100	; 0x64
 80005ae:	f001 f9bf 	bl	8001930 <vTaskDelay>
			GPIOB	-> ODR ^= GPIO_ODR_0;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <vTaskButtonUser+0x38>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <vTaskButtonUser+0x38>)
 80005b8:	f083 0301 	eor.w	r3, r3, #1
 80005bc:	6153      	str	r3, [r2, #20]
			SendStringUSART2 ("Button\r\n");
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <vTaskButtonUser+0x3c>)
 80005c0:	f7ff ff6a 	bl	8000498 <SendStringUSART2>
		}

		vTaskDelay(200);
 80005c4:	20c8      	movs	r0, #200	; 0xc8
 80005c6:	f001 f9b3 	bl	8001930 <vTaskDelay>
		if ((GPIOC -> IDR & GPIO_IDR_13) == 0){
 80005ca:	e7e9      	b.n	80005a0 <vTaskButtonUser+0x8>
 80005cc:	48000800 	.word	0x48000800
 80005d0:	48000400 	.word	0x48000400
 80005d4:	08002b38 	.word	0x08002b38

080005d8 <USART2_IRQHandler>:
	}
}

/***************************************************** Interrupt *****************************************************/

void USART2_IRQHandler (void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	if (USART2->ISR & USART_CR1_RXNEIE){
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <USART2_IRQHandler+0x58>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d021      	beq.n	800062c <USART2_IRQHandler+0x54>

		USART2	-> ISR &= ~USART_CR1_RXNEIE;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <USART2_IRQHandler+0x58>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <USART2_IRQHandler+0x58>)
 80005ee:	f023 0320 	bic.w	r3, r3, #32
 80005f2:	61d3      	str	r3, [r2, #28]

		if (USART2 -> RDR == '0'){
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <USART2_IRQHandler+0x58>)
 80005f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	2b30      	cmp	r3, #48	; 0x30
 80005fc:	d108      	bne.n	8000610 <USART2_IRQHandler+0x38>
			SendStringUSART2 ("OFF\r\n");
 80005fe:	480d      	ldr	r0, [pc, #52]	; (8000634 <USART2_IRQHandler+0x5c>)
 8000600:	f7ff ff4a 	bl	8000498 <SendStringUSART2>
			GPIOB	-> BSRR |= GPIO_BSRR_BR_13;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <USART2_IRQHandler+0x60>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <USART2_IRQHandler+0x60>)
 800060a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800060e:	6193      	str	r3, [r2, #24]
		}

		if (USART2 -> RDR == '1'){
 8000610:	4b07      	ldr	r3, [pc, #28]	; (8000630 <USART2_IRQHandler+0x58>)
 8000612:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000614:	b29b      	uxth	r3, r3
 8000616:	2b31      	cmp	r3, #49	; 0x31
 8000618:	d108      	bne.n	800062c <USART2_IRQHandler+0x54>
			SendStringUSART2 ("ON\r\n");
 800061a:	4808      	ldr	r0, [pc, #32]	; (800063c <USART2_IRQHandler+0x64>)
 800061c:	f7ff ff3c 	bl	8000498 <SendStringUSART2>
			GPIOB	-> BSRR |= GPIO_BSRR_BS_13;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <USART2_IRQHandler+0x60>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <USART2_IRQHandler+0x60>)
 8000626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800062a:	6193      	str	r3, [r2, #24]
		}

	}

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40004400 	.word	0x40004400
 8000634:	08002b44 	.word	0x08002b44
 8000638:	48000400 	.word	0x48000400
 800063c:	08002b4c 	.word	0x08002b4c

08000640 <InitRCC>:

#include "sysinit.h"

/********************************************* Used functions ********************************************/

void InitRCC (void){
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

	RCC		->CR		|= ((uint32_t)RCC_CR_HSEON); 					// Enable HSE
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <InitRCC+0xfc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a3c      	ldr	r2, [pc, #240]	; (800073c <InitRCC+0xfc>)
 800064a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800064e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));									// Ready start HSE
 8000650:	bf00      	nop
 8000652:	4b3a      	ldr	r3, [pc, #232]	; (800073c <InitRCC+0xfc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <InitRCC+0x12>

	FLASH	-> ACR		|= FLASH_ACR_PRFTBE;
 800065e:	4b38      	ldr	r3, [pc, #224]	; (8000740 <InitRCC+0x100>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a37      	ldr	r2, [pc, #220]	; (8000740 <InitRCC+0x100>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	6013      	str	r3, [r2, #0]
	FLASH	-> ACR		|= FLASH_ACR_LATENCY_2;							// Clock Flash memory
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <InitRCC+0x100>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a34      	ldr	r2, [pc, #208]	; (8000740 <InitRCC+0x100>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6013      	str	r3, [r2, #0]

	RCC		-> CFGR		|= RCC_CFGR_HPRE_DIV1;							// AHB = SYSCLK/1
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <InitRCC+0xfc>)
 8000678:	4a30      	ldr	r2, [pc, #192]	; (800073c <InitRCC+0xfc>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PPRE1_DIV2;							// APB1 = HCLK/2
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <InitRCC+0xfc>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	4a2e      	ldr	r2, [pc, #184]	; (800073c <InitRCC+0xfc>)
 8000684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000688:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PPRE2_DIV1;							// APB2 = HCLK/1
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <InitRCC+0xfc>)
 800068c:	4a2b      	ldr	r2, [pc, #172]	; (800073c <InitRCC+0xfc>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	6053      	str	r3, [r2, #4]

	RCC		-> CFGR		&= ~RCC_CFGR_PLLMUL;               				// clear PLLMUL bits
 8000692:	4b2a      	ldr	r3, [pc, #168]	; (800073c <InitRCC+0xfc>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	4a29      	ldr	r2, [pc, #164]	; (800073c <InitRCC+0xfc>)
 8000698:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800069c:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		&= ~RCC_CFGR_PLLXTPRE;							// clear PLLXTPRE bits
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <InitRCC+0xfc>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4a26      	ldr	r2, [pc, #152]	; (800073c <InitRCC+0xfc>)
 80006a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006a8:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		&= ~RCC_CFGR_PLLSRC;							// clear PLLSRC bits
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <InitRCC+0xfc>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	4a23      	ldr	r2, [pc, #140]	; (800073c <InitRCC+0xfc>)
 80006b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b4:	6053      	str	r3, [r2, #4]

	RCC		-> CFGR		|= RCC_CFGR_PLLSRC_HSE_PREDIV; 					// source HSE
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <InitRCC+0xfc>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <InitRCC+0xfc>)
 80006bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c0:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PLLXTPRE_HSE_PREDIV_DIV1; 			// source HSE/1 = 8 MHz
 80006c2:	4b1e      	ldr	r3, [pc, #120]	; (800073c <InitRCC+0xfc>)
 80006c4:	4a1d      	ldr	r2, [pc, #116]	; (800073c <InitRCC+0xfc>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PLLMUL9; 							// PLL x9: clock = 8 MHz * 9 = 72 MHz
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <InitRCC+0xfc>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	4a1b      	ldr	r2, [pc, #108]	; (800073c <InitRCC+0xfc>)
 80006d0:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80006d4:	6053      	str	r3, [r2, #4]

	RCC		-> CR		|= RCC_CR_PLLON;                      			// enable PLL
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <InitRCC+0xfc>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <InitRCC+0xfc>)
 80006dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006e0:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {}     						// wait till PLL is ready
 80006e2:	bf00      	nop
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <InitRCC+0xfc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d0f9      	beq.n	80006e4 <InitRCC+0xa4>

	RCC		-> CFGR		|= RCC_CFGR_PPRE2_DIV2;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <InitRCC+0xfc>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4a11      	ldr	r2, [pc, #68]	; (800073c <InitRCC+0xfc>)
 80006f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006fa:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_PPRE1_DIV1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <InitRCC+0xfc>)
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <InitRCC+0xfc>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_HPRE_DIV1;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <InitRCC+0xfc>)
 8000706:	4a0d      	ldr	r2, [pc, #52]	; (800073c <InitRCC+0xfc>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	6053      	str	r3, [r2, #4]

	RCC		-> CFGR		&= ~RCC_CFGR_SW;                   				// clear SW bits
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <InitRCC+0xfc>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <InitRCC+0xfc>)
 8000712:	f023 0303 	bic.w	r3, r3, #3
 8000716:	6053      	str	r3, [r2, #4]
	RCC		-> CFGR		|= RCC_CFGR_SW_PLL;               				// select source SYSCLK = PLL
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <InitRCC+0xfc>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <InitRCC+0xfc>)
 800071e:	f043 0302 	orr.w	r3, r3, #2
 8000722:	6053      	str	r3, [r2, #4]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1) {} 				// wait till PLL is used
 8000724:	bf00      	nop
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <InitRCC+0xfc>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f003 030c 	and.w	r3, r3, #12
 800072e:	2b08      	cmp	r3, #8
 8000730:	d1f9      	bne.n	8000726 <InitRCC+0xe6>

}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000
 8000740:	40022000 	.word	0x40022000

08000744 <GenMCO>:

void GenMCO (void){
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

	RCC		-> AHBENR	|= RCC_AHBENR_GPIOAEN;                       	// enable clock for port A
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <GenMCO+0x58>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <GenMCO+0x58>)
 800074e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000752:	6153      	str	r3, [r2, #20]

	GPIOA	-> MODER	&= ~GPIO_MODER_MODER8;							// setting out alternative push-pull for PA8
 8000754:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800075e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000762:	6013      	str	r3, [r2, #0]
	GPIOA	-> MODER	|= GPIO_MODER_MODER8_0;
 8000764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800076e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000772:	6013      	str	r3, [r2, #0]
	GPIOA	-> OSPEEDR	|= ( GPIO_OSPEEDER_OSPEEDR8_0 | GPIO_OSPEEDER_OSPEEDR8_1);		// gpio speed 50 MHz
 8000774:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800077e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000782:	6093      	str	r3, [r2, #8]

	RCC		-> CFGR |= RCC_CFGR_MCO_SYSCLK;								// select source clokc SYSCLK
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <GenMCO+0x58>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <GenMCO+0x58>)
 800078a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800078e:	6053      	str	r3, [r2, #4]

}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <InitGPIO>:

void InitGPIO (void){
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
/*Enable LD2 on pin PB13*/

	RCC		-> AHBENR	|= RCC_AHBENR_GPIOBEN;							// Enable clock port B
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <InitGPIO+0x64>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <InitGPIO+0x64>)
 80007aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ae:	6153      	str	r3, [r2, #20]
	RCC		-> AHBENR	|= RCC_AHBENR_GPIOCEN;							// Enable clock port C
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <InitGPIO+0x64>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <InitGPIO+0x64>)
 80007b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007ba:	6153      	str	r3, [r2, #20]

	GPIOB	-> MODER	&= ~GPIO_MODER_MODER13;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <InitGPIO+0x68>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <InitGPIO+0x68>)
 80007c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80007c6:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODER13_0;						// Setting GPIO for PP output
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <InitGPIO+0x68>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <InitGPIO+0x68>)
 80007ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007d2:	6013      	str	r3, [r2, #0]

	GPIOB	-> MODER	&= ~GPIO_MODER_MODER0;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <InitGPIO+0x68>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <InitGPIO+0x68>)
 80007da:	f023 0303 	bic.w	r3, r3, #3
 80007de:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODER0_0;							// Setting GPIO for PP output
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <InitGPIO+0x68>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a08      	ldr	r2, [pc, #32]	; (8000808 <InitGPIO+0x68>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	6013      	str	r3, [r2, #0]

	GPIOC	-> MODER	&= ~GPIO_MODER_MODER13;							// Setting GPIO for floating input
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <InitGPIO+0x6c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <InitGPIO+0x6c>)
 80007f2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	48000800 	.word	0x48000800

08000810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f103 0208 	add.w	r2, r3, #8
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f103 0208 	add.w	r2, r3, #8
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f103 0208 	add.w	r2, r3, #8
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d103      	bne.n	80008d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e00c      	b.n	80008ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3308      	adds	r3, #8
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e002      	b.n	80008e0 <vListInsert+0x2e>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d2f6      	bcs.n	80008da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	6892      	ldr	r2, [r2, #8]
 800093a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	6852      	ldr	r2, [r2, #4]
 8000944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	d103      	bne.n	8000958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3b04      	subs	r3, #4
 8000988:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3b04      	subs	r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	f023 0201 	bic.w	r2, r3, #1
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3b04      	subs	r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <pxPortInitialiseStack+0x64>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3b14      	subs	r3, #20
 80009b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3b04      	subs	r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f06f 0202 	mvn.w	r2, #2
 80009c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3b20      	subs	r3, #32
 80009cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	080009e1 	.word	0x080009e1

080009e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <prvTaskExitError+0x50>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f2:	d009      	beq.n	8000a08 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f8:	f383 8811 	msr	BASEPRI, r3
 80009fc:	f3bf 8f6f 	isb	sy
 8000a00:	f3bf 8f4f 	dsb	sy
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e7fe      	b.n	8000a06 <prvTaskExitError+0x26>
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000a1a:	bf00      	nop
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0fc      	beq.n	8000a1c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000
	...

08000a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <pxCurrentTCBConst2>)
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	6808      	ldr	r0, [r1, #0]
 8000a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4a:	f380 8809 	msr	PSP, r0
 8000a4e:	f3bf 8f6f 	isb	sy
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	f380 8811 	msr	BASEPRI, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f3af 8000 	nop.w

08000a60 <pxCurrentTCBConst2>:
 8000a60:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop

08000a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <prvPortStartFirstTask+0x24>)
 8000a6a:	6800      	ldr	r0, [r0, #0]
 8000a6c:	6800      	ldr	r0, [r0, #0]
 8000a6e:	f380 8808 	msr	MSP, r0
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	f380 8814 	msr	CONTROL, r0
 8000a7a:	b662      	cpsie	i
 8000a7c:	b661      	cpsie	f
 8000a7e:	f3bf 8f4f 	dsb	sy
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	df00      	svc	0
 8000a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000a8a:	bf00      	nop
 8000a8c:	e000ed08 	.word	0xe000ed08

08000a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000a96:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <xPortStartScheduler+0x118>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a44      	ldr	r2, [pc, #272]	; (8000bac <xPortStartScheduler+0x11c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d109      	bne.n	8000ab4 <xPortStartScheduler+0x24>
 8000aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa4:	f383 8811 	msr	BASEPRI, r3
 8000aa8:	f3bf 8f6f 	isb	sy
 8000aac:	f3bf 8f4f 	dsb	sy
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	e7fe      	b.n	8000ab2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000ab4:	4b3c      	ldr	r3, [pc, #240]	; (8000ba8 <xPortStartScheduler+0x118>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a3d      	ldr	r2, [pc, #244]	; (8000bb0 <xPortStartScheduler+0x120>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d109      	bne.n	8000ad2 <xPortStartScheduler+0x42>
 8000abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac2:	f383 8811 	msr	BASEPRI, r3
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	f3bf 8f4f 	dsb	sy
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e7fe      	b.n	8000ad0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000ad2:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <xPortStartScheduler+0x124>)
 8000ad4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <xPortStartScheduler+0x128>)
 8000af8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000afa:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000b00:	e009      	b.n	8000b16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000b0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000b16:	78fb      	ldrb	r3, [r7, #3]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	2b80      	cmp	r3, #128	; 0x80
 8000b20:	d0ef      	beq.n	8000b02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d009      	beq.n	8000b42 <xPortStartScheduler+0xb2>
 8000b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b32:	f383 8811 	msr	BASEPRI, r3
 8000b36:	f3bf 8f6f 	isb	sy
 8000b3a:	f3bf 8f4f 	dsb	sy
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	e7fe      	b.n	8000b40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000b4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <xPortStartScheduler+0x12c>)
 8000b56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <xPortStartScheduler+0x130>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <xPortStartScheduler+0x130>)
 8000b66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <xPortStartScheduler+0x130>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <xPortStartScheduler+0x130>)
 8000b72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000b76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000b78:	f000 f8d6 	bl	8000d28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <xPortStartScheduler+0x134>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000b82:	f000 f8ed 	bl	8000d60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <xPortStartScheduler+0x138>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <xPortStartScheduler+0x138>)
 8000b8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000b90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000b92:	f7ff ff69 	bl	8000a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000b96:	f001 f8bd 	bl	8001d14 <vTaskSwitchContext>
	prvTaskExitError();
 8000b9a:	f7ff ff21 	bl	80009e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	410fc271 	.word	0x410fc271
 8000bb0:	410fc270 	.word	0x410fc270
 8000bb4:	e000e400 	.word	0xe000e400
 8000bb8:	20000022 	.word	0x20000022
 8000bbc:	20000024 	.word	0x20000024
 8000bc0:	e000ed20 	.word	0xe000ed20
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	e000ef34 	.word	0xe000ef34

08000bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bd6:	f383 8811 	msr	BASEPRI, r3
 8000bda:	f3bf 8f6f 	isb	sy
 8000bde:	f3bf 8f4f 	dsb	sy
 8000be2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <vPortEnterCritical+0x54>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <vPortEnterCritical+0x54>)
 8000bec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <vPortEnterCritical+0x54>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10e      	bne.n	8000c14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <vPortEnterCritical+0x58>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d009      	beq.n	8000c14 <vPortEnterCritical+0x48>
 8000c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c04:	f383 8811 	msr	BASEPRI, r3
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	f3bf 8f4f 	dsb	sy
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	e7fe      	b.n	8000c12 <vPortEnterCritical+0x46>
	}
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000000 	.word	0x20000000
 8000c24:	e000ed04 	.word	0xe000ed04

08000c28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <vPortExitCritical+0x4c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d109      	bne.n	8000c4a <vPortExitCritical+0x22>
 8000c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3a:	f383 8811 	msr	BASEPRI, r3
 8000c3e:	f3bf 8f6f 	isb	sy
 8000c42:	f3bf 8f4f 	dsb	sy
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	e7fe      	b.n	8000c48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <vPortExitCritical+0x4c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <vPortExitCritical+0x4c>)
 8000c52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <vPortExitCritical+0x4c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d104      	bne.n	8000c66 <vPortExitCritical+0x3e>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000000 	.word	0x20000000
	...

08000c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000c80:	f3ef 8009 	mrs	r0, PSP
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <pxCurrentTCBConst>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	f01e 0f10 	tst.w	lr, #16
 8000c90:	bf08      	it	eq
 8000c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9a:	6010      	str	r0, [r2, #0]
 8000c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ca4:	f380 8811 	msr	BASEPRI, r0
 8000ca8:	f3bf 8f4f 	dsb	sy
 8000cac:	f3bf 8f6f 	isb	sy
 8000cb0:	f001 f830 	bl	8001d14 <vTaskSwitchContext>
 8000cb4:	f04f 0000 	mov.w	r0, #0
 8000cb8:	f380 8811 	msr	BASEPRI, r0
 8000cbc:	bc09      	pop	{r0, r3}
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	6808      	ldr	r0, [r1, #0]
 8000cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc6:	f01e 0f10 	tst.w	lr, #16
 8000cca:	bf08      	it	eq
 8000ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000cd0:	f380 8809 	msr	PSP, r0
 8000cd4:	f3bf 8f6f 	isb	sy
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	f3af 8000 	nop.w

08000ce0 <pxCurrentTCBConst>:
 8000ce0:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop

08000ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	__asm volatile
 8000cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf2:	f383 8811 	msr	BASEPRI, r3
 8000cf6:	f3bf 8f6f 	isb	sy
 8000cfa:	f3bf 8f4f 	dsb	sy
 8000cfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000d00:	f000 ff50 	bl	8001ba4 <xTaskIncrementTick>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SysTick_Handler+0x3c>)
 8000d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	e000ed04 	.word	0xe000ed04

08000d28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <vPortSetupTimerInterrupt+0x28>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <vPortSetupTimerInterrupt+0x2c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <vPortSetupTimerInterrupt+0x30>)
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <vPortSetupTimerInterrupt+0x34>)
 8000d3c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <vPortSetupTimerInterrupt+0x28>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010
 8000d54:	e000e018 	.word	0xe000e018
 8000d58:	e000e014 	.word	0xe000e014
 8000d5c:	0001193f 	.word	0x0001193f

08000d60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000d60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000d70 <vPortEnableVFP+0x10>
 8000d64:	6801      	ldr	r1, [r0, #0]
 8000d66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d6a:	6001      	str	r1, [r0, #0]
 8000d6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000d6e:	bf00      	nop
 8000d70:	e000ed88 	.word	0xe000ed88

08000d74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000d7a:	f3ef 8305 	mrs	r3, IPSR
 8000d7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	d913      	bls.n	8000dae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <vPortValidateInterruptPriority+0x6c>)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <vPortValidateInterruptPriority+0x70>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	7afa      	ldrb	r2, [r7, #11]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d209      	bcs.n	8000dae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9e:	f383 8811 	msr	BASEPRI, r3
 8000da2:	f3bf 8f6f 	isb	sy
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	e7fe      	b.n	8000dac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <vPortValidateInterruptPriority+0x74>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <vPortValidateInterruptPriority+0x78>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d909      	bls.n	8000dd2 <vPortValidateInterruptPriority+0x5e>
 8000dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc2:	f383 8811 	msr	BASEPRI, r3
 8000dc6:	f3bf 8f6f 	isb	sy
 8000dca:	f3bf 8f4f 	dsb	sy
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	e7fe      	b.n	8000dd0 <vPortValidateInterruptPriority+0x5c>
	}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e3f0 	.word	0xe000e3f0
 8000de4:	20000022 	.word	0x20000022
 8000de8:	e000ed0c 	.word	0xe000ed0c
 8000dec:	20000024 	.word	0x20000024

08000df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d109      	bne.n	8000e18 <xQueueGenericReset+0x28>
 8000e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e08:	f383 8811 	msr	BASEPRI, r3
 8000e0c:	f3bf 8f6f 	isb	sy
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	e7fe      	b.n	8000e16 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000e18:	f7ff fed8 	bl	8000bcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e24:	68f9      	ldr	r1, [r7, #12]
 8000e26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e28:	fb01 f303 	mul.w	r3, r1, r3
 8000e2c:	441a      	add	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2200      	movs	r2, #0
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	68f9      	ldr	r1, [r7, #12]
 8000e4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	441a      	add	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	22ff      	movs	r2, #255	; 0xff
 8000e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	22ff      	movs	r2, #255	; 0xff
 8000e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d114      	bne.n	8000e98 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d01a      	beq.n	8000eac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3310      	adds	r3, #16
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fff2 	bl	8001e64 <xTaskRemoveFromEventList>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d012      	beq.n	8000eac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <xQueueGenericReset+0xcc>)
 8000e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	e009      	b.n	8000eac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3310      	adds	r3, #16
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fcb7 	bl	8000810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3324      	adds	r3, #36	; 0x24
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fcb2 	bl	8000810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000eac:	f7ff febc 	bl	8000c28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000ed04 	.word	0xe000ed04

08000ec0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d109      	bne.n	8000ee8 <xQueueGenericCreate+0x28>
 8000ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed8:	f383 8811 	msr	BASEPRI, r3
 8000edc:	f3bf 8f6f 	isb	sy
 8000ee0:	f3bf 8f4f 	dsb	sy
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	e7fe      	b.n	8000ee6 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3348      	adds	r3, #72	; 0x48
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fd54 	bl	80029a4 <pvPortMalloc>
 8000efc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00d      	beq.n	8000f20 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3348      	adds	r3, #72	; 0x48
 8000f0c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000f0e:	79fa      	ldrb	r2, [r7, #7]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4613      	mov	r3, r2
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 f805 	bl	8000f2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000f20:	69bb      	ldr	r3, [r7, #24]
	}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e002      	b.n	8000f4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000f58:	2101      	movs	r1, #1
 8000f5a:	69b8      	ldr	r0, [r7, #24]
 8000f5c:	f7ff ff48 	bl	8000df0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d109      	bne.n	8000f98 <xQueueGenericSend+0x30>
 8000f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f88:	f383 8811 	msr	BASEPRI, r3
 8000f8c:	f3bf 8f6f 	isb	sy
 8000f90:	f3bf 8f4f 	dsb	sy
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f96:	e7fe      	b.n	8000f96 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <xQueueGenericSend+0x3e>
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <xQueueGenericSend+0x42>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <xQueueGenericSend+0x44>
 8000faa:	2300      	movs	r3, #0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d109      	bne.n	8000fc4 <xQueueGenericSend+0x5c>
 8000fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb4:	f383 8811 	msr	BASEPRI, r3
 8000fb8:	f3bf 8f6f 	isb	sy
 8000fbc:	f3bf 8f4f 	dsb	sy
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	e7fe      	b.n	8000fc2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d103      	bne.n	8000fd2 <xQueueGenericSend+0x6a>
 8000fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <xQueueGenericSend+0x6e>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <xQueueGenericSend+0x70>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d109      	bne.n	8000ff0 <xQueueGenericSend+0x88>
 8000fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe0:	f383 8811 	msr	BASEPRI, r3
 8000fe4:	f3bf 8f6f 	isb	sy
 8000fe8:	f3bf 8f4f 	dsb	sy
 8000fec:	623b      	str	r3, [r7, #32]
 8000fee:	e7fe      	b.n	8000fee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ff0:	f001 f8d0 	bl	8002194 <xTaskGetSchedulerState>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <xQueueGenericSend+0x98>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <xQueueGenericSend+0x9c>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <xQueueGenericSend+0x9e>
 8001004:	2300      	movs	r3, #0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d109      	bne.n	800101e <xQueueGenericSend+0xb6>
 800100a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800100e:	f383 8811 	msr	BASEPRI, r3
 8001012:	f3bf 8f6f 	isb	sy
 8001016:	f3bf 8f4f 	dsb	sy
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	e7fe      	b.n	800101c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800101e:	f7ff fdd5 	bl	8000bcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102a:	429a      	cmp	r2, r3
 800102c:	d302      	bcc.n	8001034 <xQueueGenericSend+0xcc>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d129      	bne.n	8001088 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800103a:	f000 fa03 	bl	8001444 <prvCopyDataToQueue>
 800103e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	2b00      	cmp	r3, #0
 8001046:	d010      	beq.n	800106a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800104a:	3324      	adds	r3, #36	; 0x24
 800104c:	4618      	mov	r0, r3
 800104e:	f000 ff09 	bl	8001e64 <xTaskRemoveFromEventList>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001058:	4b3f      	ldr	r3, [pc, #252]	; (8001158 <xQueueGenericSend+0x1f0>)
 800105a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	f3bf 8f4f 	dsb	sy
 8001064:	f3bf 8f6f 	isb	sy
 8001068:	e00a      	b.n	8001080 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800106a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <xQueueGenericSend+0x1f0>)
 8001072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	f3bf 8f4f 	dsb	sy
 800107c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001080:	f7ff fdd2 	bl	8000c28 <vPortExitCritical>
				return pdPASS;
 8001084:	2301      	movs	r3, #1
 8001086:	e063      	b.n	8001150 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800108e:	f7ff fdcb 	bl	8000c28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001092:	2300      	movs	r3, #0
 8001094:	e05c      	b.n	8001150 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001098:	2b00      	cmp	r3, #0
 800109a:	d106      	bne.n	80010aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 ff41 	bl	8001f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80010a6:	2301      	movs	r3, #1
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80010aa:	f7ff fdbd 	bl	8000c28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80010ae:	f000 fcbf 	bl	8001a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80010b2:	f7ff fd8b 	bl	8000bcc <vPortEnterCritical>
 80010b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c2:	d103      	bne.n	80010cc <xQueueGenericSend+0x164>
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d103      	bne.n	80010e2 <xQueueGenericSend+0x17a>
 80010da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010e2:	f7ff fda1 	bl	8000c28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010e6:	1d3a      	adds	r2, r7, #4
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 ff30 	bl	8001f54 <xTaskCheckForTimeOut>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d124      	bne.n	8001144 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80010fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010fc:	f000 fa9a 	bl	8001634 <prvIsQueueFull>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d018      	beq.n	8001138 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001108:	3310      	adds	r3, #16
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fe5a 	bl	8001dc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001116:	f000 fa25 	bl	8001564 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800111a:	f000 fc97 	bl	8001a4c <xTaskResumeAll>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	f47f af7c 	bne.w	800101e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <xQueueGenericSend+0x1f0>)
 8001128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	f3bf 8f4f 	dsb	sy
 8001132:	f3bf 8f6f 	isb	sy
 8001136:	e772      	b.n	800101e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800113a:	f000 fa13 	bl	8001564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800113e:	f000 fc85 	bl	8001a4c <xTaskResumeAll>
 8001142:	e76c      	b.n	800101e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001146:	f000 fa0d 	bl	8001564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800114a:	f000 fc7f 	bl	8001a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800114e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001150:	4618      	mov	r0, r3
 8001152:	3738      	adds	r7, #56	; 0x38
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	e000ed04 	.word	0xe000ed04

0800115c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b090      	sub	sp, #64	; 0x40
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001170:	2b00      	cmp	r3, #0
 8001172:	d109      	bne.n	8001188 <xQueueGenericSendFromISR+0x2c>
 8001174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
 8001186:	e7fe      	b.n	8001186 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <xQueueGenericSendFromISR+0x3a>
 800118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <xQueueGenericSendFromISR+0x3e>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <xQueueGenericSendFromISR+0x40>
 800119a:	2300      	movs	r3, #0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d109      	bne.n	80011b4 <xQueueGenericSendFromISR+0x58>
 80011a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a4:	f383 8811 	msr	BASEPRI, r3
 80011a8:	f3bf 8f6f 	isb	sy
 80011ac:	f3bf 8f4f 	dsb	sy
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
 80011b2:	e7fe      	b.n	80011b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d103      	bne.n	80011c2 <xQueueGenericSendFromISR+0x66>
 80011ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <xQueueGenericSendFromISR+0x6a>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <xQueueGenericSendFromISR+0x6c>
 80011c6:	2300      	movs	r3, #0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d109      	bne.n	80011e0 <xQueueGenericSendFromISR+0x84>
 80011cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d0:	f383 8811 	msr	BASEPRI, r3
 80011d4:	f3bf 8f6f 	isb	sy
 80011d8:	f3bf 8f4f 	dsb	sy
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e7fe      	b.n	80011de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80011e0:	f7ff fdc8 	bl	8000d74 <vPortValidateInterruptPriority>
	__asm volatile
 80011e4:	f3ef 8211 	mrs	r2, BASEPRI
 80011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	61fa      	str	r2, [r7, #28]
 80011fa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80011fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001208:	429a      	cmp	r2, r3
 800120a:	d302      	bcc.n	8001212 <xQueueGenericSendFromISR+0xb6>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d12f      	bne.n	8001272 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001218:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800121e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001228:	f000 f90c 	bl	8001444 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800122c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d112      	bne.n	800125c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2b00      	cmp	r3, #0
 800123c:	d016      	beq.n	800126c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001240:	3324      	adds	r3, #36	; 0x24
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fe0e 	bl	8001e64 <xTaskRemoveFromEventList>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00e      	beq.n	800126c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	e007      	b.n	800126c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800125c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001260:	3301      	adds	r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	b25a      	sxtb	r2, r3
 8001266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800126c:	2301      	movs	r3, #1
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001270:	e001      	b.n	8001276 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001272:	2300      	movs	r3, #0
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001278:	617b      	str	r3, [r7, #20]
	__asm volatile
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001282:	4618      	mov	r0, r3
 8001284:	3740      	adds	r7, #64	; 0x40
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <xQueueReceive+0x2e>
	__asm volatile
 80012a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012aa:	f383 8811 	msr	BASEPRI, r3
 80012ae:	f3bf 8f6f 	isb	sy
 80012b2:	f3bf 8f4f 	dsb	sy
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	e7fe      	b.n	80012b8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d103      	bne.n	80012c8 <xQueueReceive+0x3c>
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <xQueueReceive+0x40>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <xQueueReceive+0x42>
 80012cc:	2300      	movs	r3, #0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d109      	bne.n	80012e6 <xQueueReceive+0x5a>
 80012d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d6:	f383 8811 	msr	BASEPRI, r3
 80012da:	f3bf 8f6f 	isb	sy
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	e7fe      	b.n	80012e4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012e6:	f000 ff55 	bl	8002194 <xTaskGetSchedulerState>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <xQueueReceive+0x6a>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <xQueueReceive+0x6e>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <xQueueReceive+0x70>
 80012fa:	2300      	movs	r3, #0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <xQueueReceive+0x88>
 8001300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001304:	f383 8811 	msr	BASEPRI, r3
 8001308:	f3bf 8f6f 	isb	sy
 800130c:	f3bf 8f4f 	dsb	sy
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	e7fe      	b.n	8001312 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001314:	f7ff fc5a 	bl	8000bcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	2b00      	cmp	r3, #0
 8001322:	d01f      	beq.n	8001364 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001328:	f000 f8f6 	bl	8001518 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001332:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00f      	beq.n	800135c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133e:	3310      	adds	r3, #16
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fd8f 	bl	8001e64 <xTaskRemoveFromEventList>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800134c:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <xQueueReceive+0x1b4>)
 800134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	f3bf 8f4f 	dsb	sy
 8001358:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800135c:	f7ff fc64 	bl	8000c28 <vPortExitCritical>
				return pdPASS;
 8001360:	2301      	movs	r3, #1
 8001362:	e069      	b.n	8001438 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800136a:	f7ff fc5d 	bl	8000c28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800136e:	2300      	movs	r3, #0
 8001370:	e062      	b.n	8001438 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d106      	bne.n	8001386 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fdd3 	bl	8001f28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001382:	2301      	movs	r3, #1
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001386:	f7ff fc4f 	bl	8000c28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800138a:	f000 fb51 	bl	8001a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800138e:	f7ff fc1d 	bl	8000bcc <vPortEnterCritical>
 8001392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001398:	b25b      	sxtb	r3, r3
 800139a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139e:	d103      	bne.n	80013a8 <xQueueReceive+0x11c>
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d103      	bne.n	80013be <xQueueReceive+0x132>
 80013b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013be:	f7ff fc33 	bl	8000c28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013c2:	1d3a      	adds	r2, r7, #4
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fdc2 	bl	8001f54 <xTaskCheckForTimeOut>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d123      	bne.n	800141e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013d8:	f000 f916 	bl	8001608 <prvIsQueueEmpty>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d017      	beq.n	8001412 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	3324      	adds	r3, #36	; 0x24
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fcec 	bl	8001dc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80013f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013f2:	f000 f8b7 	bl	8001564 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80013f6:	f000 fb29 	bl	8001a4c <xTaskResumeAll>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d189      	bne.n	8001314 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <xQueueReceive+0x1b4>)
 8001402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f3bf 8f4f 	dsb	sy
 800140c:	f3bf 8f6f 	isb	sy
 8001410:	e780      	b.n	8001314 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001414:	f000 f8a6 	bl	8001564 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001418:	f000 fb18 	bl	8001a4c <xTaskResumeAll>
 800141c:	e77a      	b.n	8001314 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800141e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001420:	f000 f8a0 	bl	8001564 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001424:	f000 fb12 	bl	8001a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800142a:	f000 f8ed 	bl	8001608 <prvIsQueueEmpty>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	f43f af6f 	beq.w	8001314 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001436:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001438:	4618      	mov	r0, r3
 800143a:	3730      	adds	r7, #48	; 0x30
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	e000ed04 	.word	0xe000ed04

08001444 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001458:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10d      	bne.n	800147e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d14d      	bne.n	8001506 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 feae 	bl	80021d0 <xTaskPriorityDisinherit>
 8001474:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e043      	b.n	8001506 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d119      	bne.n	80014b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6858      	ldr	r0, [r3, #4]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	461a      	mov	r2, r3
 800148e:	68b9      	ldr	r1, [r7, #8]
 8001490:	f001 fb34 	bl	8002afc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	441a      	add	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d32b      	bcc.n	8001506 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	e026      	b.n	8001506 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68d8      	ldr	r0, [r3, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	461a      	mov	r2, r3
 80014c2:	68b9      	ldr	r1, [r7, #8]
 80014c4:	f001 fb1a 	bl	8002afc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	425b      	negs	r3, r3
 80014d2:	441a      	add	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	425b      	negs	r3, r3
 80014ee:	441a      	add	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d105      	bne.n	8001506 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	3b01      	subs	r3, #1
 8001504:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800150e:	697b      	ldr	r3, [r7, #20]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	2b00      	cmp	r3, #0
 8001528:	d018      	beq.n	800155c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	441a      	add	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	d303      	bcc.n	800154c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68d9      	ldr	r1, [r3, #12]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	461a      	mov	r2, r3
 8001556:	6838      	ldr	r0, [r7, #0]
 8001558:	f001 fad0 	bl	8002afc <memcpy>
	}
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800156c:	f7ff fb2e 	bl	8000bcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001576:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001578:	e011      	b.n	800159e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2b00      	cmp	r3, #0
 8001580:	d012      	beq.n	80015a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3324      	adds	r3, #36	; 0x24
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fc6c 	bl	8001e64 <xTaskRemoveFromEventList>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001592:	f000 fd3f 	bl	8002014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	3b01      	subs	r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dce9      	bgt.n	800157a <prvUnlockQueue+0x16>
 80015a6:	e000      	b.n	80015aa <prvUnlockQueue+0x46>
					break;
 80015a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	22ff      	movs	r2, #255	; 0xff
 80015ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80015b2:	f7ff fb39 	bl	8000c28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80015b6:	f7ff fb09 	bl	8000bcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80015c2:	e011      	b.n	80015e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d012      	beq.n	80015f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3310      	adds	r3, #16
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fc47 	bl	8001e64 <xTaskRemoveFromEventList>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80015dc:	f000 fd1a 	bl	8002014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80015e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	dce9      	bgt.n	80015c4 <prvUnlockQueue+0x60>
 80015f0:	e000      	b.n	80015f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80015f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	22ff      	movs	r2, #255	; 0xff
 80015f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80015fc:	f7ff fb14 	bl	8000c28 <vPortExitCritical>
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001610:	f7ff fadc 	bl	8000bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800161c:	2301      	movs	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	e001      	b.n	8001626 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001626:	f7ff faff 	bl	8000c28 <vPortExitCritical>

	return xReturn;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800163c:	f7ff fac6 	bl	8000bcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001648:	429a      	cmp	r2, r3
 800164a:	d102      	bne.n	8001652 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800164c:	2301      	movs	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e001      	b.n	8001656 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001656:	f7ff fae7 	bl	8000c28 <vPortExitCritical>

	return xReturn;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001674:	f7ff faaa 	bl	8000bcc <vPortEnterCritical>
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800167e:	b25b      	sxtb	r3, r3
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d103      	bne.n	800168e <vQueueWaitForMessageRestricted+0x2a>
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001694:	b25b      	sxtb	r3, r3
 8001696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169a:	d103      	bne.n	80016a4 <vQueueWaitForMessageRestricted+0x40>
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016a4:	f7ff fac0 	bl	8000c28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3324      	adds	r3, #36	; 0x24
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fba9 	bl	8001e10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff50 	bl	8001564 <prvUnlockQueue>
	}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	4613      	mov	r3, r2
 80016da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f001 f95f 	bl	80029a4 <pvPortMalloc>
 80016e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00e      	beq.n	800170c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80016ee:	2050      	movs	r0, #80	; 0x50
 80016f0:	f001 f958 	bl	80029a4 <pvPortMalloc>
 80016f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
 8001702:	e005      	b.n	8001710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f001 f993 	bl	8002a30 <vPortFree>
 800170a:	e001      	b.n	8001710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	2300      	movs	r3, #0
 800171a:	9303      	str	r3, [sp, #12]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f80e 	bl	800174e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001732:	69f8      	ldr	r0, [r7, #28]
 8001734:	f000 f892 	bl	800185c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
 800173c:	e002      	b.n	8001744 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001744:	69bb      	ldr	r3, [r7, #24]
	}
 8001746:	4618      	mov	r0, r3
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b088      	sub	sp, #32
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800175c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001766:	3b01      	subs	r3, #1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f023 0307 	bic.w	r3, r3, #7
 8001774:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <prvInitialiseNewTask+0x46>
 8001780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001784:	f383 8811 	msr	BASEPRI, r3
 8001788:	f3bf 8f6f 	isb	sy
 800178c:	f3bf 8f4f 	dsb	sy
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e7fe      	b.n	8001792 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01f      	beq.n	80017da <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e012      	b.n	80017c6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	4413      	add	r3, r2
 80017a6:	7819      	ldrb	r1, [r3, #0]
 80017a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	4413      	add	r3, r2
 80017ae:	3334      	adds	r3, #52	; 0x34
 80017b0:	460a      	mov	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	3301      	adds	r3, #1
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	d9e9      	bls.n	80017a0 <prvInitialiseNewTask+0x52>
 80017cc:	e000      	b.n	80017d0 <prvInitialiseNewTask+0x82>
			{
				break;
 80017ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80017d8:	e003      	b.n	80017e2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d901      	bls.n	80017ec <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80017e8:	2304      	movs	r3, #4
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80017ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80017f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80017fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001800:	3304      	adds	r3, #4
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f824 	bl	8000850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180a:	3318      	adds	r3, #24
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f81f 	bl	8000850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001816:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181a:	f1c3 0205 	rsb	r2, r3, #5
 800181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001820:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182a:	2200      	movs	r2, #0
 800182c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001830:	2200      	movs	r2, #0
 8001832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	69b8      	ldr	r0, [r7, #24]
 800183c:	f7ff f89c 	bl	8000978 <pxPortInitialiseStack>
 8001840:	4602      	mov	r2, r0
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001852:	bf00      	nop
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001864:	f7ff f9b2 	bl	8000bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <prvAddNewTaskToReadyList+0xb8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a29      	ldr	r2, [pc, #164]	; (8001914 <prvAddNewTaskToReadyList+0xb8>)
 8001870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001872:	4b29      	ldr	r3, [pc, #164]	; (8001918 <prvAddNewTaskToReadyList+0xbc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800187a:	4a27      	ldr	r2, [pc, #156]	; (8001918 <prvAddNewTaskToReadyList+0xbc>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <prvAddNewTaskToReadyList+0xb8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d110      	bne.n	80018aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001888:	f000 fbe8 	bl	800205c <prvInitialiseTaskLists>
 800188c:	e00d      	b.n	80018aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <prvAddNewTaskToReadyList+0xc0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <prvAddNewTaskToReadyList+0xbc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d802      	bhi.n	80018aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80018a4:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <prvAddNewTaskToReadyList+0xbc>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <prvAddNewTaskToReadyList+0xc4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3301      	adds	r3, #1
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <prvAddNewTaskToReadyList+0xc4>)
 80018b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	2201      	movs	r2, #1
 80018ba:	409a      	lsls	r2, r3
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <prvAddNewTaskToReadyList+0xc8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <prvAddNewTaskToReadyList+0xc8>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <prvAddNewTaskToReadyList+0xcc>)
 80018d4:	441a      	add	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3304      	adds	r3, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4610      	mov	r0, r2
 80018de:	f7fe ffc4 	bl	800086a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80018e2:	f7ff f9a1 	bl	8000c28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <prvAddNewTaskToReadyList+0xc0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00e      	beq.n	800190c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <prvAddNewTaskToReadyList+0xbc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <prvAddNewTaskToReadyList+0xd0>)
 80018fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000100 	.word	0x20000100
 8001918:	20000028 	.word	0x20000028
 800191c:	2000010c 	.word	0x2000010c
 8001920:	2000011c 	.word	0x2000011c
 8001924:	20000108 	.word	0x20000108
 8001928:	2000002c 	.word	0x2000002c
 800192c:	e000ed04 	.word	0xe000ed04

08001930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <vTaskDelay+0x60>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <vTaskDelay+0x2e>
 800194a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194e:	f383 8811 	msr	BASEPRI, r3
 8001952:	f3bf 8f6f 	isb	sy
 8001956:	f3bf 8f4f 	dsb	sy
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	e7fe      	b.n	800195c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800195e:	f000 f867 	bl	8001a30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fcb7 	bl	80022d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800196a:	f000 f86f 	bl	8001a4c <xTaskResumeAll>
 800196e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d107      	bne.n	8001986 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <vTaskDelay+0x64>)
 8001978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f3bf 8f4f 	dsb	sy
 8001982:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000128 	.word	0x20000128
 8001994:	e000ed04 	.word	0xe000ed04

08001998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <vTaskStartScheduler+0x80>)
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	2220      	movs	r2, #32
 80019aa:	491c      	ldr	r1, [pc, #112]	; (8001a1c <vTaskStartScheduler+0x84>)
 80019ac:	481c      	ldr	r0, [pc, #112]	; (8001a20 <vTaskStartScheduler+0x88>)
 80019ae:	f7ff fe8d 	bl	80016cc <xTaskCreate>
 80019b2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d102      	bne.n	80019c0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80019ba:	f000 fcf3 	bl	80023a4 <xTimerCreateTimerTask>
 80019be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d115      	bne.n	80019f2 <vTaskStartScheduler+0x5a>
 80019c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ca:	f383 8811 	msr	BASEPRI, r3
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	f3bf 8f4f 	dsb	sy
 80019d6:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <vTaskStartScheduler+0x8c>)
 80019da:	f04f 32ff 	mov.w	r2, #4294967295
 80019de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <vTaskStartScheduler+0x90>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <vTaskStartScheduler+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80019ec:	f7ff f850 	bl	8000a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80019f0:	e00d      	b.n	8001a0e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d109      	bne.n	8001a0e <vTaskStartScheduler+0x76>
 80019fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fe:	f383 8811 	msr	BASEPRI, r3
 8001a02:	f3bf 8f6f 	isb	sy
 8001a06:	f3bf 8f4f 	dsb	sy
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	e7fe      	b.n	8001a0c <vTaskStartScheduler+0x74>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000124 	.word	0x20000124
 8001a1c:	08002b54 	.word	0x08002b54
 8001a20:	0800202d 	.word	0x0800202d
 8001a24:	20000120 	.word	0x20000120
 8001a28:	2000010c 	.word	0x2000010c
 8001a2c:	20000104 	.word	0x20000104

08001a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <vTaskSuspendAll+0x18>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <vTaskSuspendAll+0x18>)
 8001a3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000128 	.word	0x20000128

08001a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <xTaskResumeAll+0x114>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d109      	bne.n	8001a76 <xTaskResumeAll+0x2a>
 8001a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a66:	f383 8811 	msr	BASEPRI, r3
 8001a6a:	f3bf 8f6f 	isb	sy
 8001a6e:	f3bf 8f4f 	dsb	sy
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	e7fe      	b.n	8001a74 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001a76:	f7ff f8a9 	bl	8000bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <xTaskResumeAll+0x114>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <xTaskResumeAll+0x114>)
 8001a82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <xTaskResumeAll+0x114>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d161      	bne.n	8001b50 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <xTaskResumeAll+0x118>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d05d      	beq.n	8001b50 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a94:	e02e      	b.n	8001af4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <xTaskResumeAll+0x11c>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3318      	adds	r3, #24
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe ff3e 	bl	8000924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe ff39 	bl	8000924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <xTaskResumeAll+0x120>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	4a2a      	ldr	r2, [pc, #168]	; (8001b6c <xTaskResumeAll+0x120>)
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <xTaskResumeAll+0x124>)
 8001ad2:	441a      	add	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f7fe fec5 	bl	800086a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <xTaskResumeAll+0x128>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d302      	bcc.n	8001af4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <xTaskResumeAll+0x12c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001af4:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <xTaskResumeAll+0x11c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1cc      	bne.n	8001a96 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001b02:	f000 fb27 	bl	8002154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <xTaskResumeAll+0x130>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d010      	beq.n	8001b34 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001b12:	f000 f847 	bl	8001ba4 <xTaskIncrementTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <xTaskResumeAll+0x12c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f1      	bne.n	8001b12 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <xTaskResumeAll+0x130>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <xTaskResumeAll+0x12c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <xTaskResumeAll+0x134>)
 8001b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001b50:	f7ff f86a 	bl	8000c28 <vPortExitCritical>

	return xAlreadyYielded;
 8001b54:	68bb      	ldr	r3, [r7, #8]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000128 	.word	0x20000128
 8001b64:	20000100 	.word	0x20000100
 8001b68:	200000c0 	.word	0x200000c0
 8001b6c:	20000108 	.word	0x20000108
 8001b70:	2000002c 	.word	0x2000002c
 8001b74:	20000028 	.word	0x20000028
 8001b78:	20000114 	.word	0x20000114
 8001b7c:	20000110 	.word	0x20000110
 8001b80:	e000ed04 	.word	0xe000ed04

08001b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <xTaskGetTickCount+0x1c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000104 	.word	0x20000104

08001ba4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bae:	4b4e      	ldr	r3, [pc, #312]	; (8001ce8 <xTaskIncrementTick+0x144>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 808d 	bne.w	8001cd2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <xTaskIncrementTick+0x148>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001bc0:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <xTaskIncrementTick+0x148>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d11f      	bne.n	8001c0c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <xTaskIncrementTick+0x14c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d009      	beq.n	8001bea <xTaskIncrementTick+0x46>
 8001bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bda:	f383 8811 	msr	BASEPRI, r3
 8001bde:	f3bf 8f6f 	isb	sy
 8001be2:	f3bf 8f4f 	dsb	sy
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	e7fe      	b.n	8001be8 <xTaskIncrementTick+0x44>
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <xTaskIncrementTick+0x14c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <xTaskIncrementTick+0x150>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a3e      	ldr	r2, [pc, #248]	; (8001cf0 <xTaskIncrementTick+0x14c>)
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4a3e      	ldr	r2, [pc, #248]	; (8001cf4 <xTaskIncrementTick+0x150>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <xTaskIncrementTick+0x154>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <xTaskIncrementTick+0x154>)
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	f000 faa4 	bl	8002154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <xTaskIncrementTick+0x158>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d348      	bcc.n	8001ca8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c16:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <xTaskIncrementTick+0x14c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d104      	bne.n	8001c2a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <xTaskIncrementTick+0x158>)
 8001c22:	f04f 32ff 	mov.w	r2, #4294967295
 8001c26:	601a      	str	r2, [r3, #0]
					break;
 8001c28:	e03e      	b.n	8001ca8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <xTaskIncrementTick+0x14c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d203      	bcs.n	8001c4a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001c42:	4a2e      	ldr	r2, [pc, #184]	; (8001cfc <xTaskIncrementTick+0x158>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001c48:	e02e      	b.n	8001ca8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fe68 	bl	8000924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3318      	adds	r3, #24
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fe5f 	bl	8000924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <xTaskIncrementTick+0x15c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	4a22      	ldr	r2, [pc, #136]	; (8001d00 <xTaskIncrementTick+0x15c>)
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <xTaskIncrementTick+0x160>)
 8001c86:	441a      	add	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f7fe fdeb 	bl	800086a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <xTaskIncrementTick+0x164>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3b9      	bcc.n	8001c16 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ca6:	e7b6      	b.n	8001c16 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <xTaskIncrementTick+0x164>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cae:	4915      	ldr	r1, [pc, #84]	; (8001d04 <xTaskIncrementTick+0x160>)
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d901      	bls.n	8001cc4 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <xTaskIncrementTick+0x168>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e004      	b.n	8001cdc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <xTaskIncrementTick+0x16c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <xTaskIncrementTick+0x16c>)
 8001cda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001cdc:	697b      	ldr	r3, [r7, #20]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000128 	.word	0x20000128
 8001cec:	20000104 	.word	0x20000104
 8001cf0:	200000b8 	.word	0x200000b8
 8001cf4:	200000bc 	.word	0x200000bc
 8001cf8:	20000118 	.word	0x20000118
 8001cfc:	20000120 	.word	0x20000120
 8001d00:	20000108 	.word	0x20000108
 8001d04:	2000002c 	.word	0x2000002c
 8001d08:	20000028 	.word	0x20000028
 8001d0c:	20000114 	.word	0x20000114
 8001d10:	20000110 	.word	0x20000110

08001d14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <vTaskSwitchContext+0xa0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <vTaskSwitchContext+0xa4>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001d28:	e03e      	b.n	8001da8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001d2a:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <vTaskSwitchContext+0xa4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <vTaskSwitchContext+0xa8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	f1c3 031f 	rsb	r3, r3, #31
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	491e      	ldr	r1, [pc, #120]	; (8001dc0 <vTaskSwitchContext+0xac>)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <vTaskSwitchContext+0x5a>
	__asm volatile
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	e7fe      	b.n	8001d6c <vTaskSwitchContext+0x58>
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <vTaskSwitchContext+0xac>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d104      	bne.n	8001d9e <vTaskSwitchContext+0x8a>
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <vTaskSwitchContext+0xb0>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000128 	.word	0x20000128
 8001db8:	20000114 	.word	0x20000114
 8001dbc:	20000108 	.word	0x20000108
 8001dc0:	2000002c 	.word	0x2000002c
 8001dc4:	20000028 	.word	0x20000028

08001dc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <vTaskPlaceOnEventList+0x24>
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e7fe      	b.n	8001dea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <vTaskPlaceOnEventList+0x44>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3318      	adds	r3, #24
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7fe fd5c 	bl	80008b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f000 fa6b 	bl	80022d8 <prvAddCurrentTaskToDelayedList>
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000028 	.word	0x20000028

08001e10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <vTaskPlaceOnEventListRestricted+0x26>
 8001e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	e7fe      	b.n	8001e34 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <vTaskPlaceOnEventListRestricted+0x50>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7fe fd13 	bl	800086a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	68b8      	ldr	r0, [r7, #8]
 8001e54:	f000 fa40 	bl	80022d8 <prvAddCurrentTaskToDelayedList>
	}
 8001e58:	bf00      	nop
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000028 	.word	0x20000028

08001e64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <xTaskRemoveFromEventList+0x2a>
 8001e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e7fe      	b.n	8001e8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	3318      	adds	r3, #24
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fd46 	bl	8000924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <xTaskRemoveFromEventList+0xac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d11c      	bne.n	8001eda <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fd3d 	bl	8000924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <xTaskRemoveFromEventList+0xb0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <xTaskRemoveFromEventList+0xb0>)
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <xTaskRemoveFromEventList+0xb4>)
 8001eca:	441a      	add	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	3304      	adds	r3, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7fe fcc9 	bl	800086a <vListInsertEnd>
 8001ed8:	e005      	b.n	8001ee6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	3318      	adds	r3, #24
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480e      	ldr	r0, [pc, #56]	; (8001f1c <xTaskRemoveFromEventList+0xb8>)
 8001ee2:	f7fe fcc2 	bl	800086a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <xTaskRemoveFromEventList+0xbc>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d905      	bls.n	8001f00 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <xTaskRemoveFromEventList+0xc0>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e001      	b.n	8001f04 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001f04:	697b      	ldr	r3, [r7, #20]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000128 	.word	0x20000128
 8001f14:	20000108 	.word	0x20000108
 8001f18:	2000002c 	.word	0x2000002c
 8001f1c:	200000c0 	.word	0x200000c0
 8001f20:	20000028 	.word	0x20000028
 8001f24:	20000114 	.word	0x20000114

08001f28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <vTaskInternalSetTimeOutState+0x24>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <vTaskInternalSetTimeOutState+0x28>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	20000118 	.word	0x20000118
 8001f50:	20000104 	.word	0x20000104

08001f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <xTaskCheckForTimeOut+0x24>
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e7fe      	b.n	8001f76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <xTaskCheckForTimeOut+0x3e>
 8001f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f82:	f383 8811 	msr	BASEPRI, r3
 8001f86:	f3bf 8f6f 	isb	sy
 8001f8a:	f3bf 8f4f 	dsb	sy
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e7fe      	b.n	8001f90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001f92:	f7fe fe1b 	bl	8000bcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <xTaskCheckForTimeOut+0xb8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d102      	bne.n	8001fb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e023      	b.n	8001ffe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <xTaskCheckForTimeOut+0xbc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d007      	beq.n	8001fd2 <xTaskCheckForTimeOut+0x7e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d302      	bcc.n	8001fd2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	e015      	b.n	8001ffe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d20b      	bcs.n	8001ff4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	1ad2      	subs	r2, r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff9d 	bl	8001f28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e004      	b.n	8001ffe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001ffe:	f7fe fe13 	bl	8000c28 <vPortExitCritical>

	return xReturn;
 8002002:	69fb      	ldr	r3, [r7, #28]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000104 	.word	0x20000104
 8002010:	20000118 	.word	0x20000118

08002014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <vTaskMissedYield+0x14>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	20000114 	.word	0x20000114

0800202c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002034:	f000 f852 	bl	80020dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <prvIdleTask+0x28>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d9f9      	bls.n	8002034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <prvIdleTask+0x2c>)
 8002042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002050:	e7f0      	b.n	8002034 <prvIdleTask+0x8>
 8002052:	bf00      	nop
 8002054:	2000002c 	.word	0x2000002c
 8002058:	e000ed04 	.word	0xe000ed04

0800205c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	e00c      	b.n	8002082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <prvInitialiseTaskLists+0x60>)
 8002074:	4413      	add	r3, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fbca 	bl	8000810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d9ef      	bls.n	8002068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <prvInitialiseTaskLists+0x64>)
 800208a:	f7fe fbc1 	bl	8000810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <prvInitialiseTaskLists+0x68>)
 8002090:	f7fe fbbe 	bl	8000810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002094:	480c      	ldr	r0, [pc, #48]	; (80020c8 <prvInitialiseTaskLists+0x6c>)
 8002096:	f7fe fbbb 	bl	8000810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800209a:	480c      	ldr	r0, [pc, #48]	; (80020cc <prvInitialiseTaskLists+0x70>)
 800209c:	f7fe fbb8 	bl	8000810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <prvInitialiseTaskLists+0x74>)
 80020a2:	f7fe fbb5 	bl	8000810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <prvInitialiseTaskLists+0x78>)
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <prvInitialiseTaskLists+0x64>)
 80020aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <prvInitialiseTaskLists+0x7c>)
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <prvInitialiseTaskLists+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000002c 	.word	0x2000002c
 80020c0:	20000090 	.word	0x20000090
 80020c4:	200000a4 	.word	0x200000a4
 80020c8:	200000c0 	.word	0x200000c0
 80020cc:	200000d4 	.word	0x200000d4
 80020d0:	200000ec 	.word	0x200000ec
 80020d4:	200000b8 	.word	0x200000b8
 80020d8:	200000bc 	.word	0x200000bc

080020dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020e2:	e019      	b.n	8002118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80020e4:	f7fe fd72 	bl	8000bcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <prvCheckTasksWaitingTermination+0x4c>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fc15 	bl	8000924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <prvCheckTasksWaitingTermination+0x50>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <prvCheckTasksWaitingTermination+0x50>)
 8002102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <prvCheckTasksWaitingTermination+0x54>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3b01      	subs	r3, #1
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <prvCheckTasksWaitingTermination+0x54>)
 800210c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800210e:	f7fe fd8b 	bl	8000c28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f80e 	bl	8002134 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <prvCheckTasksWaitingTermination+0x54>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e1      	bne.n	80020e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200000d4 	.word	0x200000d4
 800212c:	20000100 	.word	0x20000100
 8002130:	200000e8 	.word	0x200000e8

08002134 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fc75 	bl	8002a30 <vPortFree>
			vPortFree( pxTCB );
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fc72 	bl	8002a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <prvResetNextTaskUnblockTime+0x38>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <prvResetNextTaskUnblockTime+0x3c>)
 8002166:	f04f 32ff 	mov.w	r2, #4294967295
 800216a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800216c:	e008      	b.n	8002180 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <prvResetNextTaskUnblockTime+0x38>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <prvResetNextTaskUnblockTime+0x3c>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	200000b8 	.word	0x200000b8
 8002190:	20000120 	.word	0x20000120

08002194 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <xTaskGetSchedulerState+0x34>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d102      	bne.n	80021a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021a2:	2301      	movs	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	e008      	b.n	80021ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <xTaskGetSchedulerState+0x38>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80021b0:	2302      	movs	r3, #2
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	e001      	b.n	80021ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80021ba:	687b      	ldr	r3, [r7, #4]
	}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	2000010c 	.word	0x2000010c
 80021cc:	20000128 	.word	0x20000128

080021d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d06c      	beq.n	80022c0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <xTaskPriorityDisinherit+0xfc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d009      	beq.n	8002204 <xTaskPriorityDisinherit+0x34>
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e7fe      	b.n	8002202 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <xTaskPriorityDisinherit+0x50>
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	e7fe      	b.n	800221e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	429a      	cmp	r2, r3
 8002234:	d044      	beq.n	80022c0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	2b00      	cmp	r3, #0
 800223c:	d140      	bne.n	80022c0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	3304      	adds	r3, #4
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fb6e 	bl	8000924 <uxListRemove>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d115      	bne.n	800227a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002252:	491f      	ldr	r1, [pc, #124]	; (80022d0 <xTaskPriorityDisinherit+0x100>)
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <xTaskPriorityDisinherit+0xaa>
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2201      	movs	r2, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <xTaskPriorityDisinherit+0x104>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4013      	ands	r3, r2
 8002276:	4a17      	ldr	r2, [pc, #92]	; (80022d4 <xTaskPriorityDisinherit+0x104>)
 8002278:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f1c3 0205 	rsb	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	2201      	movs	r2, #1
 8002294:	409a      	lsls	r2, r3
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <xTaskPriorityDisinherit+0x104>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <xTaskPriorityDisinherit+0x104>)
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <xTaskPriorityDisinherit+0x100>)
 80022ae:	441a      	add	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	3304      	adds	r3, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f7fe fad7 	bl	800086a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80022bc:	2301      	movs	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80022c0:	697b      	ldr	r3, [r7, #20]
	}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000028 	.word	0x20000028
 80022d0:	2000002c 	.word	0x2000002c
 80022d4:	20000108 	.word	0x20000108

080022d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <prvAddCurrentTaskToDelayedList+0xb0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <prvAddCurrentTaskToDelayedList+0xb4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3304      	adds	r3, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fb18 	bl	8000924 <uxListRemove>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <prvAddCurrentTaskToDelayedList+0xb4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	2201      	movs	r2, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4013      	ands	r3, r2
 800230e:	4a20      	ldr	r2, [pc, #128]	; (8002390 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d10a      	bne.n	8002330 <prvAddCurrentTaskToDelayedList+0x58>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002320:	4b1a      	ldr	r3, [pc, #104]	; (800238c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3304      	adds	r3, #4
 8002326:	4619      	mov	r1, r3
 8002328:	481a      	ldr	r0, [pc, #104]	; (8002394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800232a:	f7fe fa9e 	bl	800086a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800232e:	e026      	b.n	800237e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <prvAddCurrentTaskToDelayedList+0xb4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d209      	bcs.n	800235c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <prvAddCurrentTaskToDelayedList+0xb4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3304      	adds	r3, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f7fe faac 	bl	80008b2 <vListInsert>
}
 800235a:	e010      	b.n	800237e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <prvAddCurrentTaskToDelayedList+0xc4>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3304      	adds	r3, #4
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7fe faa2 	bl	80008b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d202      	bcs.n	800237e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002378:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6013      	str	r3, [r2, #0]
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000104 	.word	0x20000104
 800238c:	20000028 	.word	0x20000028
 8002390:	20000108 	.word	0x20000108
 8002394:	200000ec 	.word	0x200000ec
 8002398:	200000bc 	.word	0x200000bc
 800239c:	200000b8 	.word	0x200000b8
 80023a0:	20000120 	.word	0x20000120

080023a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80023ae:	f000 facf 	bl	8002950 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <xTimerCreateTimerTask+0x50>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <xTimerCreateTimerTask+0x54>)
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2303      	movs	r3, #3
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	2220      	movs	r2, #32
 80023c6:	490d      	ldr	r1, [pc, #52]	; (80023fc <xTimerCreateTimerTask+0x58>)
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <xTimerCreateTimerTask+0x5c>)
 80023ca:	f7ff f97f 	bl	80016cc <xTaskCreate>
 80023ce:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <xTimerCreateTimerTask+0x46>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	e7fe      	b.n	80023e8 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80023ea:	687b      	ldr	r3, [r7, #4]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000015c 	.word	0x2000015c
 80023f8:	20000160 	.word	0x20000160
 80023fc:	08002b5c 	.word	0x08002b5c
 8002400:	08002535 	.word	0x08002535

08002404 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <xTimerGenericCommand+0x2c>
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	623b      	str	r3, [r7, #32]
 800242e:	e7fe      	b.n	800242e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <xTimerGenericCommand+0x94>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d02a      	beq.n	800248e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	dc18      	bgt.n	800247c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800244a:	f7ff fea3 	bl	8002194 <xTaskGetSchedulerState>
 800244e:	4603      	mov	r3, r0
 8002450:	2b02      	cmp	r3, #2
 8002452:	d109      	bne.n	8002468 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <xTimerGenericCommand+0x94>)
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	f107 0114 	add.w	r1, r7, #20
 800245c:	2300      	movs	r3, #0
 800245e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002460:	f7fe fd82 	bl	8000f68 <xQueueGenericSend>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24
 8002466:	e012      	b.n	800248e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <xTimerGenericCommand+0x94>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	f107 0114 	add.w	r1, r7, #20
 8002470:	2300      	movs	r3, #0
 8002472:	2200      	movs	r2, #0
 8002474:	f7fe fd78 	bl	8000f68 <xQueueGenericSend>
 8002478:	6278      	str	r0, [r7, #36]	; 0x24
 800247a:	e008      	b.n	800248e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <xTimerGenericCommand+0x94>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	f107 0114 	add.w	r1, r7, #20
 8002484:	2300      	movs	r3, #0
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	f7fe fe68 	bl	800115c <xQueueGenericSendFromISR>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002490:	4618      	mov	r0, r3
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	2000015c 	.word	0x2000015c

0800249c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b088      	sub	sp, #32
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <prvProcessExpiredTimer+0x94>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3304      	adds	r3, #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fa35 	bl	8000924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d021      	beq.n	800250c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	18d1      	adds	r1, r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	6978      	ldr	r0, [r7, #20]
 80024d6:	f000 f8d1 	bl	800267c <prvInsertTimerInActiveList>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01e      	beq.n	800251e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	2100      	movs	r1, #0
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8a 	bl	8002404 <xTimerGenericCommand>
 80024f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d112      	bne.n	800251e <prvProcessExpiredTimer+0x82>
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	e7fe      	b.n	800250a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	4798      	blx	r3
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000154 	.word	0x20000154

08002534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f857 	bl	80025f4 <prvGetNextExpireTime>
 8002546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4619      	mov	r1, r3
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f803 	bl	8002558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002552:	f000 f8d5 	bl	8002700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002556:	e7f1      	b.n	800253c <prvTimerTask+0x8>

08002558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002562:	f7ff fa65 	bl	8001a30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002566:	f107 0308 	add.w	r3, r7, #8
 800256a:	4618      	mov	r0, r3
 800256c:	f000 f866 	bl	800263c <prvSampleTimeNow>
 8002570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d130      	bne.n	80025da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <prvProcessTimerOrBlockTask+0x3c>
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	429a      	cmp	r2, r3
 8002584:	d806      	bhi.n	8002594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002586:	f7ff fa61 	bl	8001a4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800258a:	68f9      	ldr	r1, [r7, #12]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff85 	bl	800249c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002592:	e024      	b.n	80025de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <prvProcessTimerOrBlockTask+0x90>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <prvProcessTimerOrBlockTask+0x50>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <prvProcessTimerOrBlockTask+0x52>
 80025a8:	2300      	movs	r3, #0
 80025aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025ac:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <prvProcessTimerOrBlockTask+0x94>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7ff f853 	bl	8001664 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80025be:	f7ff fa45 	bl	8001a4c <xTaskResumeAll>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <prvProcessTimerOrBlockTask+0x98>)
 80025ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	f3bf 8f6f 	isb	sy
}
 80025d8:	e001      	b.n	80025de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80025da:	f7ff fa37 	bl	8001a4c <xTaskResumeAll>
}
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000158 	.word	0x20000158
 80025ec:	2000015c 	.word	0x2000015c
 80025f0:	e000ed04 	.word	0xe000ed04

080025f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <prvGetNextExpireTime+0x44>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <prvGetNextExpireTime+0x16>
 8002606:	2201      	movs	r2, #1
 8002608:	e000      	b.n	800260c <prvGetNextExpireTime+0x18>
 800260a:	2200      	movs	r2, #0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <prvGetNextExpireTime+0x44>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e001      	b.n	8002628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000154 	.word	0x20000154

0800263c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002644:	f7ff fa9e 	bl	8001b84 <xTaskGetTickCount>
 8002648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <prvSampleTimeNow+0x3c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d205      	bcs.n	8002660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002654:	f000 f918 	bl	8002888 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e002      	b.n	8002666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <prvSampleTimeNow+0x3c>)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800266c:	68fb      	ldr	r3, [r7, #12]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000164 	.word	0x20000164

0800267c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d812      	bhi.n	80026c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	1ad2      	subs	r2, r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e01b      	b.n	80026ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <prvInsertTimerInActiveList+0x7c>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3304      	adds	r3, #4
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7fe f8f6 	bl	80008b2 <vListInsert>
 80026c6:	e012      	b.n	80026ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d206      	bcs.n	80026de <prvInsertTimerInActiveList+0x62>
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d302      	bcc.n	80026de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80026d8:	2301      	movs	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e007      	b.n	80026ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <prvInsertTimerInActiveList+0x80>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3304      	adds	r3, #4
 80026e6:	4619      	mov	r1, r3
 80026e8:	4610      	mov	r0, r2
 80026ea:	f7fe f8e2 	bl	80008b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80026ee:	697b      	ldr	r3, [r7, #20]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000158 	.word	0x20000158
 80026fc:	20000154 	.word	0x20000154

08002700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	; 0x30
 8002704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002706:	e0ac      	b.n	8002862 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f2c0 80a8 	blt.w	8002860 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe f8ff 	bl	8000924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff87 	bl	800263c <prvSampleTimeNow>
 800272e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b09      	cmp	r3, #9
 8002734:	f200 8095 	bhi.w	8002862 <prvProcessReceivedCommands+0x162>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <prvProcessReceivedCommands+0x40>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002769 	.word	0x08002769
 8002744:	08002769 	.word	0x08002769
 8002748:	08002769 	.word	0x08002769
 800274c:	080027db 	.word	0x080027db
 8002750:	080027ef 	.word	0x080027ef
 8002754:	08002837 	.word	0x08002837
 8002758:	08002769 	.word	0x08002769
 800275c:	08002769 	.word	0x08002769
 8002760:	080027db 	.word	0x080027db
 8002764:	080027ef 	.word	0x080027ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	18d1      	adds	r1, r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002788:	f7ff ff78 	bl	800267c <prvInsertTimerInActiveList>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d067      	beq.n	8002862 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d05c      	beq.n	8002862 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	441a      	add	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	2100      	movs	r1, #0
 80027b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ba:	f7ff fe23 	bl	8002404 <xTimerGenericCommand>
 80027be:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d14d      	bne.n	8002862 <prvProcessReceivedCommands+0x162>
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e7fe      	b.n	80027d8 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80027ec:	e039      	b.n	8002862 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <prvProcessReceivedCommands+0x122>
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e7fe      	b.n	8002820 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	18d1      	adds	r1, r2, r3
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002830:	f7ff ff24 	bl	800267c <prvInsertTimerInActiveList>
					break;
 8002834:	e015      	b.n	8002862 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8002844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002846:	f000 f8f3 	bl	8002a30 <vPortFree>
 800284a:	e00a      	b.n	8002862 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	b2da      	uxtb	r2, r3
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800285e:	e000      	b.n	8002862 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002860:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <prvProcessReceivedCommands+0x184>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f107 0108 	add.w	r1, r7, #8
 800286a:	2200      	movs	r2, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fd0d 	bl	800128c <xQueueReceive>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af47 	bne.w	8002708 <prvProcessReceivedCommands+0x8>
	}
}
 800287a:	bf00      	nop
 800287c:	3728      	adds	r7, #40	; 0x28
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000015c 	.word	0x2000015c

08002888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800288e:	e047      	b.n	8002920 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <prvSwitchTimerLists+0xc0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <prvSwitchTimerLists+0xc0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe f83b 	bl	8000924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d02d      	beq.n	8002920 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90e      	bls.n	80028f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028e2:	4b19      	ldr	r3, [pc, #100]	; (8002948 <prvSwitchTimerLists+0xc0>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3304      	adds	r3, #4
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f7fd ffe0 	bl	80008b2 <vListInsert>
 80028f2:	e015      	b.n	8002920 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028f4:	2300      	movs	r3, #0
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	2100      	movs	r1, #0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff fd80 	bl	8002404 <xTimerGenericCommand>
 8002904:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <prvSwitchTimerLists+0x98>
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	e7fe      	b.n	800291e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <prvSwitchTimerLists+0xc0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1b2      	bne.n	8002890 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <prvSwitchTimerLists+0xc0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <prvSwitchTimerLists+0xc4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <prvSwitchTimerLists+0xc0>)
 8002936:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002938:	4a04      	ldr	r2, [pc, #16]	; (800294c <prvSwitchTimerLists+0xc4>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000154 	.word	0x20000154
 800294c:	20000158 	.word	0x20000158

08002950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002954:	f7fe f93a 	bl	8000bcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <prvCheckForValidListAndQueue+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d113      	bne.n	8002988 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002960:	480c      	ldr	r0, [pc, #48]	; (8002994 <prvCheckForValidListAndQueue+0x44>)
 8002962:	f7fd ff55 	bl	8000810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002966:	480c      	ldr	r0, [pc, #48]	; (8002998 <prvCheckForValidListAndQueue+0x48>)
 8002968:	f7fd ff52 	bl	8000810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <prvCheckForValidListAndQueue+0x4c>)
 800296e:	4a09      	ldr	r2, [pc, #36]	; (8002994 <prvCheckForValidListAndQueue+0x44>)
 8002970:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <prvCheckForValidListAndQueue+0x50>)
 8002974:	4a08      	ldr	r2, [pc, #32]	; (8002998 <prvCheckForValidListAndQueue+0x48>)
 8002976:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002978:	2200      	movs	r2, #0
 800297a:	210c      	movs	r1, #12
 800297c:	2005      	movs	r0, #5
 800297e:	f7fe fa9f 	bl	8000ec0 <xQueueGenericCreate>
 8002982:	4602      	mov	r2, r0
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <prvCheckForValidListAndQueue+0x40>)
 8002986:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002988:	f7fe f94e 	bl	8000c28 <vPortExitCritical>
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	2000015c 	.word	0x2000015c
 8002994:	2000012c 	.word	0x2000012c
 8002998:	20000140 	.word	0x20000140
 800299c:	20000154 	.word	0x20000154
 80029a0:	20000158 	.word	0x20000158

080029a4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f023 0307 	bic.w	r3, r3, #7
 80029c0:	3308      	adds	r3, #8
 80029c2:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80029c4:	f7ff f834 	bl	8001a30 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80029c8:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <pvPortMalloc+0x80>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <pvPortMalloc+0x84>)
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <pvPortMalloc+0x80>)
 80029da:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <pvPortMalloc+0x88>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	f642 32f7 	movw	r2, #11255	; 0x2bf7
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d813      	bhi.n	8002a14 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <pvPortMalloc+0x88>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	441a      	add	r2, r3
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <pvPortMalloc+0x88>)
 80029f6:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d90b      	bls.n	8002a14 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <pvPortMalloc+0x80>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <pvPortMalloc+0x88>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <pvPortMalloc+0x88>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <pvPortMalloc+0x88>)
 8002a12:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a14:	f7ff f81a 	bl	8001a4c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8002a18:	68fb      	ldr	r3, [r7, #12]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20002d6c 	.word	0x20002d6c
 8002a28:	20000170 	.word	0x20000170
 8002a2c:	20002d68 	.word	0x20002d68

08002a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <vPortFree+0x22>
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e7fe      	b.n	8002a50 <vPortFree+0x20>
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a66:	e003      	b.n	8002a70 <LoopCopyDataInit>

08002a68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002a6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002a6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002a6e:	3104      	adds	r1, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002a70:	480b      	ldr	r0, [pc, #44]	; (8002aa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002a74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002a76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002a78:	d3f6      	bcc.n	8002a68 <CopyDataInit>
	ldr	r2, =_sbss
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002a7c:	e002      	b.n	8002a84 <LoopFillZerobss>

08002a7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002a7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002a80:	f842 3b04 	str.w	r3, [r2], #4

08002a84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <LoopForever+0x16>)
	cmp	r2, r3
 8002a86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002a88:	d3f9      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a8a:	f7fd fba1 	bl	80001d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8e:	f000 f811 	bl	8002ab4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a92:	f7fd fd1d 	bl	80004d0 <main>

08002a96 <LoopForever>:

LoopForever:
    b LoopForever
 8002a96:	e7fe      	b.n	8002a96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a98:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8002a9c:	08002b6c 	.word	0x08002b6c
	ldr	r0, =_sdata
 8002aa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002aa4:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002aa8:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002aac:	20002d70 	.word	0x20002d70

08002ab0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ab0:	e7fe      	b.n	8002ab0 <ADC1_IRQHandler>
	...

08002ab4 <__libc_init_array>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	4e0d      	ldr	r6, [pc, #52]	; (8002aec <__libc_init_array+0x38>)
 8002ab8:	4c0d      	ldr	r4, [pc, #52]	; (8002af0 <__libc_init_array+0x3c>)
 8002aba:	1ba4      	subs	r4, r4, r6
 8002abc:	10a4      	asrs	r4, r4, #2
 8002abe:	2500      	movs	r5, #0
 8002ac0:	42a5      	cmp	r5, r4
 8002ac2:	d109      	bne.n	8002ad8 <__libc_init_array+0x24>
 8002ac4:	4e0b      	ldr	r6, [pc, #44]	; (8002af4 <__libc_init_array+0x40>)
 8002ac6:	4c0c      	ldr	r4, [pc, #48]	; (8002af8 <__libc_init_array+0x44>)
 8002ac8:	f000 f824 	bl	8002b14 <_init>
 8002acc:	1ba4      	subs	r4, r4, r6
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	2500      	movs	r5, #0
 8002ad2:	42a5      	cmp	r5, r4
 8002ad4:	d105      	bne.n	8002ae2 <__libc_init_array+0x2e>
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
 8002ad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002adc:	4798      	blx	r3
 8002ade:	3501      	adds	r5, #1
 8002ae0:	e7ee      	b.n	8002ac0 <__libc_init_array+0xc>
 8002ae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ae6:	4798      	blx	r3
 8002ae8:	3501      	adds	r5, #1
 8002aea:	e7f2      	b.n	8002ad2 <__libc_init_array+0x1e>
 8002aec:	08002b64 	.word	0x08002b64
 8002af0:	08002b64 	.word	0x08002b64
 8002af4:	08002b64 	.word	0x08002b64
 8002af8:	08002b68 	.word	0x08002b68

08002afc <memcpy>:
 8002afc:	b510      	push	{r4, lr}
 8002afe:	1e43      	subs	r3, r0, #1
 8002b00:	440a      	add	r2, r1
 8002b02:	4291      	cmp	r1, r2
 8002b04:	d100      	bne.n	8002b08 <memcpy+0xc>
 8002b06:	bd10      	pop	{r4, pc}
 8002b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b10:	e7f7      	b.n	8002b02 <memcpy+0x6>
	...

08002b14 <_init>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr

08002b20 <_fini>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr
