
ESC_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e80  08003e80  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003e80  08003e80  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e80  08003e80  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e84  08003e84  00013e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c9dc  20000014  08003e9c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c9f0  08003e9c  0002c9f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9c4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c4a  00000000  00000000  0002ba08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000780  00000000  00000000  0002d658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000678  00000000  00000000  0002ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016e08  00000000  00000000  0002e450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000759f  00000000  00000000  00045258  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008880c  00000000  00000000  0004c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5003  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000d5080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003db4 	.word	0x08003db4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08003db4 	.word	0x08003db4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	2b00      	cmp	r3, #0
 8000240:	db0b      	blt.n	800025a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 021f 	and.w	r2, r3, #31
 8000248:	4907      	ldr	r1, [pc, #28]	; (8000268 <__NVIC_EnableIRQ+0x38>)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	095b      	lsrs	r3, r3, #5
 8000250:	2001      	movs	r0, #1
 8000252:	fa00 f202 	lsl.w	r2, r0, r2
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000e100 	.word	0xe000e100

0800026c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	db0a      	blt.n	8000296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	b2da      	uxtb	r2, r3
 8000284:	490c      	ldr	r1, [pc, #48]	; (80002b8 <__NVIC_SetPriority+0x4c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	0112      	lsls	r2, r2, #4
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	440b      	add	r3, r1
 8000290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000294:	e00a      	b.n	80002ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	b2da      	uxtb	r2, r3
 800029a:	4908      	ldr	r1, [pc, #32]	; (80002bc <__NVIC_SetPriority+0x50>)
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f003 030f 	and.w	r3, r3, #15
 80002a2:	3b04      	subs	r3, #4
 80002a4:	0112      	lsls	r2, r2, #4
 80002a6:	b2d2      	uxtb	r2, r2
 80002a8:	440b      	add	r3, r1
 80002aa:	761a      	strb	r2, [r3, #24]
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <InitADC12>:

#include "ADC.h"

/********************************************* Used functions ********************************************/

void InitADC12 (void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
	uint16_t ticks = 0;														//(1us = 168 ticks @ 168MHz)
 80002c6:	2300      	movs	r3, #0
 80002c8:	80fb      	strh	r3, [r7, #6]

	//Pin init

	RCC				-> AHB2ENR 		|= RCC_AHB2ENR_ADC12EN;
 80002ca:	4b5f      	ldr	r3, [pc, #380]	; (8000448 <InitADC12+0x188>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	4a5e      	ldr	r2, [pc, #376]	; (8000448 <InitADC12+0x188>)
 80002d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d4:	64d3      	str	r3, [r2, #76]	; 0x4c
	//RCC				-> AHB2ENR		|= RCC_AHB2ENR_GPIOAEN;
	RCC				-> AHB2ENR		|= RCC_AHB2ENR_GPIOBEN;
 80002d6:	4b5c      	ldr	r3, [pc, #368]	; (8000448 <InitADC12+0x188>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a5b      	ldr	r2, [pc, #364]	; (8000448 <InitADC12+0x188>)
 80002dc:	f043 0302 	orr.w	r3, r3, #2
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
	//GPIOA			-> MODER		|= GPIO_MODER_MODE0;
	//GPIOA			-> MODER		|= GPIO_MODER_MODE2;
	//GPIOA			-> MODER		|= GPIO_MODER_MODE4;
	//GPIOA			-> MODER		|= GPIO_MODER_MODE6;
	//GPIOB			-> MODER		|= GPIO_MODER_MODE1;
	GPIOB			-> MODER		|= GPIO_MODER_MODE11;
 80002e2:	4b5a      	ldr	r3, [pc, #360]	; (800044c <InitADC12+0x18c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a59      	ldr	r2, [pc, #356]	; (800044c <InitADC12+0x18c>)
 80002e8:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80002ec:	6013      	str	r3, [r2, #0]
	//GPIOB			-> MODER		|= GPIO_MODER_MODE12;

	//Clock
	RCC				-> CCIPR		|= RCC_CCIPR_ADC12SEL_0; 				//adc_ker_ck is PLLP
 80002ee:	4b56      	ldr	r3, [pc, #344]	; (8000448 <InitADC12+0x188>)
 80002f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f4:	4a54      	ldr	r2, [pc, #336]	; (8000448 <InitADC12+0x188>)
 80002f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	ADC12_COMMON	-> CCR			&= ~ADC_CCR_CKMODE;						//input ADC clock = adc_ker_ck
 80002fe:	4b54      	ldr	r3, [pc, #336]	; (8000450 <InitADC12+0x190>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	4a53      	ldr	r2, [pc, #332]	; (8000450 <InitADC12+0x190>)
 8000304:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000308:	6093      	str	r3, [r2, #8]
	ADC12_COMMON	-> CCR			&= ~ADC_CCR_PRESC;						//input ADC clock not divided
 800030a:	4b51      	ldr	r3, [pc, #324]	; (8000450 <InitADC12+0x190>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a50      	ldr	r2, [pc, #320]	; (8000450 <InitADC12+0x190>)
 8000310:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000314:	6093      	str	r3, [r2, #8]

	//Calibration
	ADC1			->	CR			&= ~ADC_CR_DEEPPWD;						// Deep power down is enabled on reset
 8000316:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000320:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000324:	6093      	str	r3, [r2, #8]
	ADC1			->	CR			|= ADC_CR_ADVREGEN;					// ADC1 voltage regulator enable
 8000326:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000334:	6093      	str	r3, [r2, #8]

	//ADC2			->	CR			&= ~ADC_CR_DEEPPWD;
	//ADC2			->	CR			|= ADC_CR_ADVREGEN;

	while (!(ticks == 1680))
 8000336:	e002      	b.n	800033e <InitADC12+0x7e>
		{
			ticks++;
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	3301      	adds	r3, #1
 800033c:	80fb      	strh	r3, [r7, #6]
	while (!(ticks == 1680))
 800033e:	88fb      	ldrh	r3, [r7, #6]
 8000340:	f5b3 6fd2 	cmp.w	r3, #1680	; 0x690
 8000344:	d1f8      	bne.n	8000338 <InitADC12+0x78>
		}

	ADC1			->	CR			&= ~ADC_CR_ADCALDIF;
 8000346:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000350:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000354:	6093      	str	r3, [r2, #8]

	ADC1			->	CR			|= ADC_CR_ADCAL;						//start calibration
 8000356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000364:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);										//wait for calibration to be completed
 8000366:	bf00      	nop
 8000368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	2b00      	cmp	r3, #0
 8000370:	dbfa      	blt.n	8000368 <InitADC12+0xa8>

	//ADC2			->	CR			|= ADC_CR_ADCAL;						//start calibration
	//while (ADC2->CR & ADC_CR_ADCAL);										//wait for calibration to be completed

	//TIM_CLK/((PSC + 1)*(ARR + 1)
	RCC				->	APB1ENR1	|= RCC_APB1ENR1_TIM6EN;
 8000372:	4b35      	ldr	r3, [pc, #212]	; (8000448 <InitADC12+0x188>)
 8000374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000376:	4a34      	ldr	r2, [pc, #208]	; (8000448 <InitADC12+0x188>)
 8000378:	f043 0310 	orr.w	r3, r3, #16
 800037c:	6593      	str	r3, [r2, #88]	; 0x58
	TIM6			->	PSC			= 200-1;
 800037e:	4b35      	ldr	r3, [pc, #212]	; (8000454 <InitADC12+0x194>)
 8000380:	22c7      	movs	r2, #199	; 0xc7
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6			->	ARR			= 84;									//Recalculate 1MS per second
 8000384:	4b33      	ldr	r3, [pc, #204]	; (8000454 <InitADC12+0x194>)
 8000386:	2254      	movs	r2, #84	; 0x54
 8000388:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6			->	CR2			|= TIM_CR2_MMS_1;						//Enable generation TRGO for ADC
 800038a:	4b32      	ldr	r3, [pc, #200]	; (8000454 <InitADC12+0x194>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	4a31      	ldr	r2, [pc, #196]	; (8000454 <InitADC12+0x194>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6053      	str	r3, [r2, #4]
	TIM6			->	CR1			|= TIM_CR1_CEN;
 8000396:	4b2f      	ldr	r3, [pc, #188]	; (8000454 <InitADC12+0x194>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a2e      	ldr	r2, [pc, #184]	; (8000454 <InitADC12+0x194>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6013      	str	r3, [r2, #0]

	ADC1			->	SMPR2		|= 0x7UL << ADC_SMPR2_SMP14_Pos;		//601.5 ADC clock cycles
 80003a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003ac:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80003b0:	6193      	str	r3, [r2, #24]

	//ADC1			->	CFGR		|= ADC_CFGR_DMAEN;
	//ADC1			->	CFGR		&= ~ADC_CFGR_DMACFG;					//0: DMA One Shot mode selected
	//ADC1			->	CFGR		|= ADC_CFGR_JQDIS;						//Injected Queue disabled

	ADC1			->	JSQR		|= 0xEUL << ADC_JSQR_JEXTSEL_Pos;		//adc_jext_trg14
 80003b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003bc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC1			->	JSQR		|= ADC_JSQR_JEXTEN_0;					//01: Hardware trigger detection on the rising edge
 80003c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC1			->	JSQR		|= 0xEUL << ADC_JSQR_JSQ1_Pos;			//JSQ1 = ADC1_IN14 channel
 80003d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003dc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC1			->	JSQR		&= ~ADC_JSQR_JL;						//1 conversion
 80003e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003ec:	f023 0303 	bic.w	r3, r3, #3
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c

	//Interrupt
	//ADC2			->	IER			|= ADC_IER_JEOSIE;
	ADC1			->	IER			|= ADC_IER_JEOSIE;
 80003f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000400:	6053      	str	r3, [r2, #4]
	NVIC_EnableIRQ(ADC1_2_IRQn);
 8000402:	2012      	movs	r0, #18
 8000404:	f7ff ff14 	bl	8000230 <__NVIC_EnableIRQ>
	NVIC_SetPriority(ADC1_2_IRQn, 5);
 8000408:	2105      	movs	r1, #5
 800040a:	2012      	movs	r0, #18
 800040c:	f7ff ff2e 	bl	800026c <__NVIC_SetPriority>

	//Enable
	ADC1			->	CR			|= ADC_CR_ADEN;
 8000410:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY));
 8000420:	bf00      	nop
 8000422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	2b00      	cmp	r3, #0
 800042e:	d0f8      	beq.n	8000422 <InitADC12+0x162>

	ADC1			->	CR			|= ADC_CR_JADSTART;
 8000430:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6093      	str	r3, [r2, #8]
	//ADC2			->	CR			|= ADC_CR_ADEN;
	//while (!(ADC2->ISR & ADC_ISR_ADRDY));
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	48000400 	.word	0x48000400
 8000450:	50000300 	.word	0x50000300
 8000454:	40001000 	.word	0x40001000

08000458 <InitOpamp1>:

#include "opamp.h"

/********************************************* Used functions ********************************************/

void InitOpamp1 (void){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0

	uint32_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
	uint8_t trim = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	70fb      	strb	r3, [r7, #3]

	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 8000466:	4b8c      	ldr	r3, [pc, #560]	; (8000698 <InitOpamp1+0x240>)
 8000468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800046a:	4a8b      	ldr	r2, [pc, #556]	; (8000698 <InitOpamp1+0x240>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6613      	str	r3, [r2, #96]	; 0x60

	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOAEN;
 8000472:	4b89      	ldr	r3, [pc, #548]	; (8000698 <InitOpamp1+0x240>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	4a88      	ldr	r2, [pc, #544]	; (8000698 <InitOpamp1+0x240>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 800047e:	4b86      	ldr	r3, [pc, #536]	; (8000698 <InitOpamp1+0x240>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4a85      	ldr	r2, [pc, #532]	; (8000698 <InitOpamp1+0x240>)
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c

/************************************************* Opamp 1 ************************************************/

	GPIOA			-> MODER	|= GPIO_MODER_MODE1;
 800048a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000494:	f043 030c 	orr.w	r3, r3, #12
 8000498:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE2;
 800049a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004a4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004a8:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE3;
 80004aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004b8:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_VPSEL;					//PA1 = OPAMP1_VINP0
 80004ba:	4b78      	ldr	r3, [pc, #480]	; (800069c <InitOpamp1+0x244>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a77      	ldr	r2, [pc, #476]	; (800069c <InitOpamp1+0x244>)
 80004c0:	f023 030c 	bic.w	r3, r3, #12
 80004c4:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= OPAMP_CSR_VMSEL_1;					//Feedback resistor is connected to OPAMP VINM input (PGA mode)
 80004c6:	4b75      	ldr	r3, [pc, #468]	; (800069c <InitOpamp1+0x244>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a74      	ldr	r2, [pc, #464]	; (800069c <InitOpamp1+0x244>)
 80004cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d0:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		&= ~OPAMP_CSR_OPAMPINTEN;				//PA2 = OPAMP1_VOUT = ADC1_IN3
 80004d2:	4b72      	ldr	r3, [pc, #456]	; (800069c <InitOpamp1+0x244>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a71      	ldr	r2, [pc, #452]	; (800069c <InitOpamp1+0x244>)
 80004d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004dc:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		|= OPAMP_CSR_CALON;
 80004de:	4b6f      	ldr	r3, [pc, #444]	; (800069c <InitOpamp1+0x244>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a6e      	ldr	r2, [pc, #440]	; (800069c <InitOpamp1+0x244>)
 80004e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004e8:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		|= OPAMP_CSR_OPAMPxEN;
 80004ea:	4b6c      	ldr	r3, [pc, #432]	; (800069c <InitOpamp1+0x244>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a6b      	ldr	r2, [pc, #428]	; (800069c <InitOpamp1+0x244>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= OPAMP_CSR_USERTRIM;
 80004f6:	4b69      	ldr	r3, [pc, #420]	; (800069c <InitOpamp1+0x244>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a68      	ldr	r2, [pc, #416]	; (800069c <InitOpamp1+0x244>)
 80004fc:	f043 0310 	orr.w	r3, r3, #16
 8000500:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 8000502:	4b66      	ldr	r3, [pc, #408]	; (800069c <InitOpamp1+0x244>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a65      	ldr	r2, [pc, #404]	; (800069c <InitOpamp1+0x244>)
 8000508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800050c:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 800050e:	4b63      	ldr	r3, [pc, #396]	; (800069c <InitOpamp1+0x244>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a62      	ldr	r2, [pc, #392]	; (800069c <InitOpamp1+0x244>)
 8000514:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000518:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 800051a:	4b60      	ldr	r3, [pc, #384]	; (800069c <InitOpamp1+0x244>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	0612      	lsls	r2, r2, #24
 8000522:	4611      	mov	r1, r2
 8000524:	4a5d      	ldr	r2, [pc, #372]	; (800069c <InitOpamp1+0x244>)
 8000526:	430b      	orrs	r3, r1
 8000528:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 800052a:	e002      	b.n	8000532 <InitOpamp1+0xda>
		{
			ticks++;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3301      	adds	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a5a      	ldr	r2, [pc, #360]	; (80006a0 <InitOpamp1+0x248>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d1f8      	bne.n	800052c <InitOpamp1+0xd4>
		}

		ticks = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
		trim++;
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	3301      	adds	r3, #1
 8000542:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000544:	4b55      	ldr	r3, [pc, #340]	; (800069c <InitOpamp1+0x244>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1e4      	bne.n	800051a <InitOpamp1+0xc2>

	ticks = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
	trim = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	70fb      	strb	r3, [r7, #3]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 8000558:	4b50      	ldr	r3, [pc, #320]	; (800069c <InitOpamp1+0x244>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a4f      	ldr	r2, [pc, #316]	; (800069c <InitOpamp1+0x244>)
 800055e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000562:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 8000564:	4b4d      	ldr	r3, [pc, #308]	; (800069c <InitOpamp1+0x244>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a4c      	ldr	r2, [pc, #304]	; (800069c <InitOpamp1+0x244>)
 800056a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800056e:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 8000570:	4b4a      	ldr	r3, [pc, #296]	; (800069c <InitOpamp1+0x244>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	78fa      	ldrb	r2, [r7, #3]
 8000576:	04d2      	lsls	r2, r2, #19
 8000578:	4611      	mov	r1, r2
 800057a:	4a48      	ldr	r2, [pc, #288]	; (800069c <InitOpamp1+0x244>)
 800057c:	430b      	orrs	r3, r1
 800057e:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 8000580:	e002      	b.n	8000588 <InitOpamp1+0x130>
		{
			ticks++;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3301      	adds	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a45      	ldr	r2, [pc, #276]	; (80006a0 <InitOpamp1+0x248>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d1f8      	bne.n	8000582 <InitOpamp1+0x12a>
		}

		ticks = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
		trim++;
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	3301      	adds	r3, #1
 8000598:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 800059a:	4b40      	ldr	r3, [pc, #256]	; (800069c <InitOpamp1+0x244>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1e4      	bne.n	8000570 <InitOpamp1+0x118>

	ticks = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
	trim = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	70fb      	strb	r3, [r7, #3]

	OPAMP1			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 80005ae:	4b3b      	ldr	r3, [pc, #236]	; (800069c <InitOpamp1+0x244>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a3a      	ldr	r2, [pc, #232]	; (800069c <InitOpamp1+0x244>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 80005ba:	4b38      	ldr	r3, [pc, #224]	; (800069c <InitOpamp1+0x244>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a37      	ldr	r2, [pc, #220]	; (800069c <InitOpamp1+0x244>)
 80005c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80005c4:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <InitOpamp1+0x244>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	0612      	lsls	r2, r2, #24
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a32      	ldr	r2, [pc, #200]	; (800069c <InitOpamp1+0x244>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 80005d6:	e002      	b.n	80005de <InitOpamp1+0x186>
		{
			ticks++;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <InitOpamp1+0x248>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d1f8      	bne.n	80005d8 <InitOpamp1+0x180>
		}

		ticks = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
		trim++;
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	3301      	adds	r3, #1
 80005ee:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <InitOpamp1+0x244>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1e4      	bne.n	80005c6 <InitOpamp1+0x16e>

	ticks = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
	trim = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	70fb      	strb	r3, [r7, #3]

	OPAMP1			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <InitOpamp1+0x244>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a24      	ldr	r2, [pc, #144]	; (800069c <InitOpamp1+0x244>)
 800060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060e:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <InitOpamp1+0x244>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <InitOpamp1+0x244>)
 8000616:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800061a:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <InitOpamp1+0x244>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	78fa      	ldrb	r2, [r7, #3]
 8000622:	04d2      	lsls	r2, r2, #19
 8000624:	4611      	mov	r1, r2
 8000626:	4a1d      	ldr	r2, [pc, #116]	; (800069c <InitOpamp1+0x244>)
 8000628:	430b      	orrs	r3, r1
 800062a:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 800062c:	e002      	b.n	8000634 <InitOpamp1+0x1dc>
		{
			ticks++;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3301      	adds	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <InitOpamp1+0x248>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d1f8      	bne.n	800062e <InitOpamp1+0x1d6>
		}

		ticks = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
		trim++;
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	3301      	adds	r3, #1
 8000644:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <InitOpamp1+0x244>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1e4      	bne.n	800061c <InitOpamp1+0x1c4>

	ticks = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
	trim = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	70fb      	strb	r3, [r7, #3]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_CALON;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <InitOpamp1+0x244>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <InitOpamp1+0x244>)
 8000660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000664:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <InitOpamp1+0x244>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a0c      	ldr	r2, [pc, #48]	; (800069c <InitOpamp1+0x244>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		&= ~OPAMP_CSR_PGGAIN;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <InitOpamp1+0x244>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a09      	ldr	r2, [pc, #36]	; (800069c <InitOpamp1+0x244>)
 8000678:	f423 23f8 	bic.w	r3, r3, #507904	; 0x7c000
 800067c:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0b00010UL << OPAMP_CSR_PGGAIN_Pos;	//Non inverting internal gain =8
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <InitOpamp1+0x244>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a06      	ldr	r2, [pc, #24]	; (800069c <InitOpamp1+0x244>)
 8000684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000688:	6013      	str	r3, [r2, #0]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	40010300 	.word	0x40010300
 80006a0:	00029040 	.word	0x00029040

080006a4 <InitOpamp2>:

void InitOpamp2 (void){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0

	uint32_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
	uint8_t trim = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	70fb      	strb	r3, [r7, #3]

	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 80006b2:	4b8c      	ldr	r3, [pc, #560]	; (80008e4 <InitOpamp2+0x240>)
 80006b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b6:	4a8b      	ldr	r2, [pc, #556]	; (80008e4 <InitOpamp2+0x240>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6613      	str	r3, [r2, #96]	; 0x60

	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOAEN;
 80006be:	4b89      	ldr	r3, [pc, #548]	; (80008e4 <InitOpamp2+0x240>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a88      	ldr	r2, [pc, #544]	; (80008e4 <InitOpamp2+0x240>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 80006ca:	4b86      	ldr	r3, [pc, #536]	; (80008e4 <InitOpamp2+0x240>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a85      	ldr	r2, [pc, #532]	; (80008e4 <InitOpamp2+0x240>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c

/************************************************* Opamp 1 ************************************************/

	GPIOA			-> MODER	|= GPIO_MODER_MODE5;
 80006d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006e0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80006e4:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE6;
 80006e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006f0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80006f4:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE7;
 80006f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000704:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_VPSEL;					//PA5 = OPAMP2_VINP0
 8000706:	4b78      	ldr	r3, [pc, #480]	; (80008e8 <InitOpamp2+0x244>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a77      	ldr	r2, [pc, #476]	; (80008e8 <InitOpamp2+0x244>)
 800070c:	f023 030c 	bic.w	r3, r3, #12
 8000710:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= OPAMP_CSR_VMSEL_1;					//Feedback resistor is connected to OPAMP VINM input (PGA mode)
 8000712:	4b75      	ldr	r3, [pc, #468]	; (80008e8 <InitOpamp2+0x244>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a74      	ldr	r2, [pc, #464]	; (80008e8 <InitOpamp2+0x244>)
 8000718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071c:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		&= ~OPAMP_CSR_OPAMPINTEN;				//PA6 = OPAMP2_VOUT = ADC2_IN3
 800071e:	4b72      	ldr	r3, [pc, #456]	; (80008e8 <InitOpamp2+0x244>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a71      	ldr	r2, [pc, #452]	; (80008e8 <InitOpamp2+0x244>)
 8000724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000728:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		|= OPAMP_CSR_CALON;
 800072a:	4b6f      	ldr	r3, [pc, #444]	; (80008e8 <InitOpamp2+0x244>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a6e      	ldr	r2, [pc, #440]	; (80008e8 <InitOpamp2+0x244>)
 8000730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000734:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		|= OPAMP_CSR_OPAMPxEN;
 8000736:	4b6c      	ldr	r3, [pc, #432]	; (80008e8 <InitOpamp2+0x244>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a6b      	ldr	r2, [pc, #428]	; (80008e8 <InitOpamp2+0x244>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= OPAMP_CSR_USERTRIM;
 8000742:	4b69      	ldr	r3, [pc, #420]	; (80008e8 <InitOpamp2+0x244>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a68      	ldr	r2, [pc, #416]	; (80008e8 <InitOpamp2+0x244>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 800074e:	4b66      	ldr	r3, [pc, #408]	; (80008e8 <InitOpamp2+0x244>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a65      	ldr	r2, [pc, #404]	; (80008e8 <InitOpamp2+0x244>)
 8000754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000758:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 800075a:	4b63      	ldr	r3, [pc, #396]	; (80008e8 <InitOpamp2+0x244>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a62      	ldr	r2, [pc, #392]	; (80008e8 <InitOpamp2+0x244>)
 8000760:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000764:	6013      	str	r3, [r2, #0]


	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 8000766:	4b60      	ldr	r3, [pc, #384]	; (80008e8 <InitOpamp2+0x244>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	78fa      	ldrb	r2, [r7, #3]
 800076c:	0612      	lsls	r2, r2, #24
 800076e:	4611      	mov	r1, r2
 8000770:	4a5d      	ldr	r2, [pc, #372]	; (80008e8 <InitOpamp2+0x244>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 8000776:	e002      	b.n	800077e <InitOpamp2+0xda>
		{
			ticks++;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a5a      	ldr	r2, [pc, #360]	; (80008ec <InitOpamp2+0x248>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d1f8      	bne.n	8000778 <InitOpamp2+0xd4>
		}

		ticks = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
		trim++;
 800078a:	78fb      	ldrb	r3, [r7, #3]
 800078c:	3301      	adds	r3, #1
 800078e:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000790:	4b55      	ldr	r3, [pc, #340]	; (80008e8 <InitOpamp2+0x244>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1e4      	bne.n	8000766 <InitOpamp2+0xc2>

	ticks = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
	trim = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	70fb      	strb	r3, [r7, #3]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 80007a4:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <InitOpamp2+0x244>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a4f      	ldr	r2, [pc, #316]	; (80008e8 <InitOpamp2+0x244>)
 80007aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007ae:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 80007b0:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <InitOpamp2+0x244>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a4c      	ldr	r2, [pc, #304]	; (80008e8 <InitOpamp2+0x244>)
 80007b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ba:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 80007bc:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <InitOpamp2+0x244>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	78fa      	ldrb	r2, [r7, #3]
 80007c2:	04d2      	lsls	r2, r2, #19
 80007c4:	4611      	mov	r1, r2
 80007c6:	4a48      	ldr	r2, [pc, #288]	; (80008e8 <InitOpamp2+0x244>)
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 80007cc:	e002      	b.n	80007d4 <InitOpamp2+0x130>
		{
			ticks++;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3301      	adds	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a45      	ldr	r2, [pc, #276]	; (80008ec <InitOpamp2+0x248>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d1f8      	bne.n	80007ce <InitOpamp2+0x12a>
		}

		ticks = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
		trim++;
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	3301      	adds	r3, #1
 80007e4:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <InitOpamp2+0x244>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1e4      	bne.n	80007bc <InitOpamp2+0x118>

	ticks = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
	trim = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	70fb      	strb	r3, [r7, #3]

	OPAMP2			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <InitOpamp2+0x244>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a3a      	ldr	r2, [pc, #232]	; (80008e8 <InitOpamp2+0x244>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <InitOpamp2+0x244>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <InitOpamp2+0x244>)
 800080c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000810:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <InitOpamp2+0x244>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	78fa      	ldrb	r2, [r7, #3]
 8000818:	0612      	lsls	r2, r2, #24
 800081a:	4611      	mov	r1, r2
 800081c:	4a32      	ldr	r2, [pc, #200]	; (80008e8 <InitOpamp2+0x244>)
 800081e:	430b      	orrs	r3, r1
 8000820:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 8000822:	e002      	b.n	800082a <InitOpamp2+0x186>
		{
			ticks++;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3301      	adds	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <InitOpamp2+0x248>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d1f8      	bne.n	8000824 <InitOpamp2+0x180>
		}

		ticks = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
		trim++;
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	3301      	adds	r3, #1
 800083a:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 800083c:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <InitOpamp2+0x244>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1e4      	bne.n	8000812 <InitOpamp2+0x16e>

	ticks = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
	trim = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	70fb      	strb	r3, [r7, #3]

	OPAMP2			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <InitOpamp2+0x244>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <InitOpamp2+0x244>)
 8000856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085a:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <InitOpamp2+0x244>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <InitOpamp2+0x244>)
 8000862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000866:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <InitOpamp2+0x244>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	78fa      	ldrb	r2, [r7, #3]
 800086e:	04d2      	lsls	r2, r2, #19
 8000870:	4611      	mov	r1, r2
 8000872:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <InitOpamp2+0x244>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 8000878:	e002      	b.n	8000880 <InitOpamp2+0x1dc>
		{
			ticks++;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3301      	adds	r3, #1
 800087e:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <InitOpamp2+0x248>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d1f8      	bne.n	800087a <InitOpamp2+0x1d6>
		}

		ticks = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
		trim++;
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	3301      	adds	r3, #1
 8000890:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <InitOpamp2+0x244>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1e4      	bne.n	8000868 <InitOpamp2+0x1c4>

	ticks = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
	trim = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	70fb      	strb	r3, [r7, #3]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_CALON;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <InitOpamp2+0x244>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <InitOpamp2+0x244>)
 80008ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008b0:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <InitOpamp2+0x244>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <InitOpamp2+0x244>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		&= ~OPAMP_CSR_PGGAIN;
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <InitOpamp2+0x244>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <InitOpamp2+0x244>)
 80008c4:	f423 23f8 	bic.w	r3, r3, #507904	; 0x7c000
 80008c8:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0b00010UL << OPAMP_CSR_PGGAIN_Pos;	//Non inverting internal gain =8
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <InitOpamp2+0x244>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <InitOpamp2+0x244>)
 80008d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010304 	.word	0x40010304
 80008ec:	00029040 	.word	0x00029040

080008f0 <InitOpamp3>:

void InitOpamp3 (void){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0

	uint32_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
	uint8_t trim = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	70fb      	strb	r3, [r7, #3]

	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 80008fe:	4b89      	ldr	r3, [pc, #548]	; (8000b24 <InitOpamp3+0x234>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	4a88      	ldr	r2, [pc, #544]	; (8000b24 <InitOpamp3+0x234>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6613      	str	r3, [r2, #96]	; 0x60

	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOAEN;
 800090a:	4b86      	ldr	r3, [pc, #536]	; (8000b24 <InitOpamp3+0x234>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a85      	ldr	r2, [pc, #532]	; (8000b24 <InitOpamp3+0x234>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 8000916:	4b83      	ldr	r3, [pc, #524]	; (8000b24 <InitOpamp3+0x234>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a82      	ldr	r2, [pc, #520]	; (8000b24 <InitOpamp3+0x234>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB			-> MODER	|= GPIO_MODER_MODE0;
 8000922:	4b81      	ldr	r3, [pc, #516]	; (8000b28 <InitOpamp3+0x238>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a80      	ldr	r2, [pc, #512]	; (8000b28 <InitOpamp3+0x238>)
 8000928:	f043 0303 	orr.w	r3, r3, #3
 800092c:	6013      	str	r3, [r2, #0]
	GPIOB			-> MODER	|= GPIO_MODER_MODE1;
 800092e:	4b7e      	ldr	r3, [pc, #504]	; (8000b28 <InitOpamp3+0x238>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a7d      	ldr	r2, [pc, #500]	; (8000b28 <InitOpamp3+0x238>)
 8000934:	f043 030c 	orr.w	r3, r3, #12
 8000938:	6013      	str	r3, [r2, #0]
	GPIOB			-> MODER	|= GPIO_MODER_MODE2;
 800093a:	4b7b      	ldr	r3, [pc, #492]	; (8000b28 <InitOpamp3+0x238>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a7a      	ldr	r2, [pc, #488]	; (8000b28 <InitOpamp3+0x238>)
 8000940:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000944:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_VPSEL;					//PB0 = OPAMP3_VINP0
 8000946:	4b79      	ldr	r3, [pc, #484]	; (8000b2c <InitOpamp3+0x23c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a78      	ldr	r2, [pc, #480]	; (8000b2c <InitOpamp3+0x23c>)
 800094c:	f023 030c 	bic.w	r3, r3, #12
 8000950:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= OPAMP_CSR_VMSEL_1;					//Feedback resistor is connected to OPAMP VINM input (PGA mode)
 8000952:	4b76      	ldr	r3, [pc, #472]	; (8000b2c <InitOpamp3+0x23c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a75      	ldr	r2, [pc, #468]	; (8000b2c <InitOpamp3+0x23c>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		&= ~OPAMP_CSR_OPAMPINTEN;				//PB1 = OPAMP3_VOUT = ADC1_IN12
 800095e:	4b73      	ldr	r3, [pc, #460]	; (8000b2c <InitOpamp3+0x23c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a72      	ldr	r2, [pc, #456]	; (8000b2c <InitOpamp3+0x23c>)
 8000964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000968:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		|= OPAMP_CSR_CALON;
 800096a:	4b70      	ldr	r3, [pc, #448]	; (8000b2c <InitOpamp3+0x23c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a6f      	ldr	r2, [pc, #444]	; (8000b2c <InitOpamp3+0x23c>)
 8000970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000974:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		|= OPAMP_CSR_OPAMPxEN;
 8000976:	4b6d      	ldr	r3, [pc, #436]	; (8000b2c <InitOpamp3+0x23c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a6c      	ldr	r2, [pc, #432]	; (8000b2c <InitOpamp3+0x23c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= OPAMP_CSR_USERTRIM;
 8000982:	4b6a      	ldr	r3, [pc, #424]	; (8000b2c <InitOpamp3+0x23c>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a69      	ldr	r2, [pc, #420]	; (8000b2c <InitOpamp3+0x23c>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 800098e:	4b67      	ldr	r3, [pc, #412]	; (8000b2c <InitOpamp3+0x23c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a66      	ldr	r2, [pc, #408]	; (8000b2c <InitOpamp3+0x23c>)
 8000994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000998:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 800099a:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <InitOpamp3+0x23c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a63      	ldr	r2, [pc, #396]	; (8000b2c <InitOpamp3+0x23c>)
 80009a0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80009a4:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 80009a6:	4b61      	ldr	r3, [pc, #388]	; (8000b2c <InitOpamp3+0x23c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	78fa      	ldrb	r2, [r7, #3]
 80009ac:	0612      	lsls	r2, r2, #24
 80009ae:	4611      	mov	r1, r2
 80009b0:	4a5e      	ldr	r2, [pc, #376]	; (8000b2c <InitOpamp3+0x23c>)
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 80009b6:	e002      	b.n	80009be <InitOpamp3+0xce>
		{
			ticks++;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a5b      	ldr	r2, [pc, #364]	; (8000b30 <InitOpamp3+0x240>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d1f8      	bne.n	80009b8 <InitOpamp3+0xc8>
		}

		ticks = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
		trim++;
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	3301      	adds	r3, #1
 80009ce:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 80009d0:	4b56      	ldr	r3, [pc, #344]	; (8000b2c <InitOpamp3+0x23c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e4      	bne.n	80009a6 <InitOpamp3+0xb6>

	ticks = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
	trim = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	70fb      	strb	r3, [r7, #3]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 80009e4:	4b51      	ldr	r3, [pc, #324]	; (8000b2c <InitOpamp3+0x23c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a50      	ldr	r2, [pc, #320]	; (8000b2c <InitOpamp3+0x23c>)
 80009ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009ee:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 80009f0:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <InitOpamp3+0x23c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a4d      	ldr	r2, [pc, #308]	; (8000b2c <InitOpamp3+0x23c>)
 80009f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009fa:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 80009fc:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <InitOpamp3+0x23c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	78fa      	ldrb	r2, [r7, #3]
 8000a02:	04d2      	lsls	r2, r2, #19
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a49      	ldr	r2, [pc, #292]	; (8000b2c <InitOpamp3+0x23c>)
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 8000a0c:	e002      	b.n	8000a14 <InitOpamp3+0x124>
		{
			ticks++;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a46      	ldr	r2, [pc, #280]	; (8000b30 <InitOpamp3+0x240>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d1f8      	bne.n	8000a0e <InitOpamp3+0x11e>
		}

		ticks = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
		trim++;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	3301      	adds	r3, #1
 8000a24:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <InitOpamp3+0x23c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1e4      	bne.n	80009fc <InitOpamp3+0x10c>

	ticks = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
	trim = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	70fb      	strb	r3, [r7, #3]

	OPAMP3			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <InitOpamp3+0x23c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a3b      	ldr	r2, [pc, #236]	; (8000b2c <InitOpamp3+0x23c>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <InitOpamp3+0x23c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a38      	ldr	r2, [pc, #224]	; (8000b2c <InitOpamp3+0x23c>)
 8000a4c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000a50:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 8000a52:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <InitOpamp3+0x23c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	78fa      	ldrb	r2, [r7, #3]
 8000a58:	0612      	lsls	r2, r2, #24
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a33      	ldr	r2, [pc, #204]	; (8000b2c <InitOpamp3+0x23c>)
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 8000a62:	e002      	b.n	8000a6a <InitOpamp3+0x17a>
		{
			ticks++;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3301      	adds	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <InitOpamp3+0x240>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d1f8      	bne.n	8000a64 <InitOpamp3+0x174>
		}

		ticks = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
		trim++;
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <InitOpamp3+0x23c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1e4      	bne.n	8000a52 <InitOpamp3+0x162>

	ticks = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
	trim = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	70fb      	strb	r3, [r7, #3]

	OPAMP3			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <InitOpamp3+0x23c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <InitOpamp3+0x23c>)
 8000a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9a:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <InitOpamp3+0x23c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <InitOpamp3+0x23c>)
 8000aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa6:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <InitOpamp3+0x23c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	78fa      	ldrb	r2, [r7, #3]
 8000aae:	04d2      	lsls	r2, r2, #19
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <InitOpamp3+0x23c>)
 8000ab4:	430b      	orrs	r3, r1
 8000ab6:	6013      	str	r3, [r2, #0]

		while (!(ticks == 168000))
 8000ab8:	e002      	b.n	8000ac0 <InitOpamp3+0x1d0>
		{
			ticks++;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3301      	adds	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
		while (!(ticks == 168000))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <InitOpamp3+0x240>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d1f8      	bne.n	8000aba <InitOpamp3+0x1ca>
		}

		ticks = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
		trim++;
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	70fb      	strb	r3, [r7, #3]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <InitOpamp3+0x23c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1e4      	bne.n	8000aa8 <InitOpamp3+0x1b8>

	ticks = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
	trim = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	70fb      	strb	r3, [r7, #3]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_CALON;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <InitOpamp3+0x23c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <InitOpamp3+0x23c>)
 8000aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000af0:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <InitOpamp3+0x23c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <InitOpamp3+0x23c>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		&= ~OPAMP_CSR_PGGAIN;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <InitOpamp3+0x23c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <InitOpamp3+0x23c>)
 8000b04:	f423 23f8 	bic.w	r3, r3, #507904	; 0x7c000
 8000b08:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0b00010UL << OPAMP_CSR_PGGAIN_Pos;	//Non inverting internal gain =8
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <InitOpamp3+0x23c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <InitOpamp3+0x23c>)
 8000b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b14:	6013      	str	r3, [r2, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	40010308 	.word	0x40010308
 8000b30:	00029040 	.word	0x00029040

08000b34 <InitVrefbuf>:
#include "vrefbuf.h"

/********************************************* Used functions ********************************************/

void InitVrefbuf (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <InitVrefbuf+0x4c>)
 8000b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <InitVrefbuf+0x4c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6613      	str	r3, [r2, #96]	; 0x60

	VREFBUF			-> CSR		|= VREFBUF_CSR_VRS_0;					//VREFBUF = 2.5V
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <InitVrefbuf+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <InitVrefbuf+0x50>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
	while (VREFBUF->CSR & VREFBUF_CSR_VRR);
 8000b50:	bf00      	nop
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <InitVrefbuf+0x50>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f9      	bne.n	8000b52 <InitVrefbuf+0x1e>
	VREFBUF			-> CSR		|= VREFBUF_CSR_ENVR;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <InitVrefbuf+0x50>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <InitVrefbuf+0x50>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]
	VREFBUF			-> CSR		&= ~VREFBUF_CSR_HIZ;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <InitVrefbuf+0x50>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <InitVrefbuf+0x50>)
 8000b70:	f023 0302 	bic.w	r3, r3, #2
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010030 	.word	0x40010030

08000b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <SystemInit+0x28>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <SystemInit+0x28>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SystemInit+0x28>)
 8000b9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ba2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f103 0208 	add.w	r2, r3, #8
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f103 0208 	add.w	r2, r3, #8
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f103 0208 	add.w	r2, r3, #8
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	601a      	str	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000c56:	b480      	push	{r7}
 8000c58:	b085      	sub	sp, #20
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d103      	bne.n	8000c76 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e00c      	b.n	8000c90 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3308      	adds	r3, #8
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e002      	b.n	8000c84 <vListInsert+0x2e>
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d2f6      	bcs.n	8000c7e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6892      	ldr	r2, [r2, #8]
 8000cde:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	6852      	ldr	r2, [r2, #4]
 8000ce8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d103      	bne.n	8000cfc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	1e5a      	subs	r2, r3, #1
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3b04      	subs	r3, #4
 8000d3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	f023 0201 	bic.w	r2, r3, #1
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3b04      	subs	r3, #4
 8000d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <pxPortInitialiseStack+0x64>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	3b14      	subs	r3, #20
 8000d56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3b04      	subs	r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f06f 0202 	mvn.w	r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3b20      	subs	r3, #32
 8000d70:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	08000d85 	.word	0x08000d85

08000d84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <prvTaskExitError+0x50>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d96:	d009      	beq.n	8000dac <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9c:	f383 8811 	msr	BASEPRI, r3
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	e7fe      	b.n	8000daa <prvTaskExitError+0x26>
 8000dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db0:	f383 8811 	msr	BASEPRI, r3
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000dbe:	bf00      	nop
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0fc      	beq.n	8000dc0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000000 	.word	0x20000000
	...

08000de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <pxCurrentTCBConst2>)
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	6808      	ldr	r0, [r1, #0]
 8000de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dea:	f380 8809 	msr	PSP, r0
 8000dee:	f3bf 8f6f 	isb	sy
 8000df2:	f04f 0000 	mov.w	r0, #0
 8000df6:	f380 8811 	msr	BASEPRI, r0
 8000dfa:	4770      	bx	lr
 8000dfc:	f3af 8000 	nop.w

08000e00 <pxCurrentTCBConst2>:
 8000e00:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop

08000e08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000e08:	4808      	ldr	r0, [pc, #32]	; (8000e2c <prvPortStartFirstTask+0x24>)
 8000e0a:	6800      	ldr	r0, [r0, #0]
 8000e0c:	6800      	ldr	r0, [r0, #0]
 8000e0e:	f380 8808 	msr	MSP, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	f380 8814 	msr	CONTROL, r0
 8000e1a:	b662      	cpsie	i
 8000e1c:	b661      	cpsie	f
 8000e1e:	f3bf 8f4f 	dsb	sy
 8000e22:	f3bf 8f6f 	isb	sy
 8000e26:	df00      	svc	0
 8000e28:	bf00      	nop
 8000e2a:	0000      	.short	0x0000
 8000e2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop

08000e34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000e3a:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <xPortStartScheduler+0x118>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a44      	ldr	r2, [pc, #272]	; (8000f50 <xPortStartScheduler+0x11c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d109      	bne.n	8000e58 <xPortStartScheduler+0x24>
 8000e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e48:	f383 8811 	msr	BASEPRI, r3
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f3bf 8f4f 	dsb	sy
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e7fe      	b.n	8000e56 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000e58:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <xPortStartScheduler+0x118>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a3d      	ldr	r2, [pc, #244]	; (8000f54 <xPortStartScheduler+0x120>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d109      	bne.n	8000e76 <xPortStartScheduler+0x42>
 8000e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e66:	f383 8811 	msr	BASEPRI, r3
 8000e6a:	f3bf 8f6f 	isb	sy
 8000e6e:	f3bf 8f4f 	dsb	sy
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	e7fe      	b.n	8000e74 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000e76:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <xPortStartScheduler+0x124>)
 8000e78:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	22ff      	movs	r2, #255	; 0xff
 8000e86:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <xPortStartScheduler+0x128>)
 8000e9c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000e9e:	4b30      	ldr	r3, [pc, #192]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000ea4:	e009      	b.n	8000eba <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	4a2c      	ldr	r2, [pc, #176]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000eae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec2:	2b80      	cmp	r3, #128	; 0x80
 8000ec4:	d0ef      	beq.n	8000ea6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d009      	beq.n	8000ee6 <xPortStartScheduler+0xb2>
 8000ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed6:	f383 8811 	msr	BASEPRI, r3
 8000eda:	f3bf 8f6f 	isb	sy
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	e7fe      	b.n	8000ee4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000eee:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <xPortStartScheduler+0x12c>)
 8000efa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <xPortStartScheduler+0x130>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <xPortStartScheduler+0x130>)
 8000f0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <xPortStartScheduler+0x130>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a13      	ldr	r2, [pc, #76]	; (8000f64 <xPortStartScheduler+0x130>)
 8000f16:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000f1a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000f1c:	f000 f8d4 	bl	80010c8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <xPortStartScheduler+0x134>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000f26:	f000 f8eb 	bl	8001100 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <xPortStartScheduler+0x138>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <xPortStartScheduler+0x138>)
 8000f30:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000f34:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000f36:	f7ff ff67 	bl	8000e08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000f3a:	f001 f9bd 	bl	80022b8 <vTaskSwitchContext>
    prvTaskExitError();
 8000f3e:	f7ff ff21 	bl	8000d84 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	410fc271 	.word	0x410fc271
 8000f54:	410fc270 	.word	0x410fc270
 8000f58:	e000e400 	.word	0xe000e400
 8000f5c:	20000030 	.word	0x20000030
 8000f60:	20000034 	.word	0x20000034
 8000f64:	e000ed20 	.word	0xe000ed20
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	e000ef34 	.word	0xe000ef34

08000f70 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f7a:	f383 8811 	msr	BASEPRI, r3
 8000f7e:	f3bf 8f6f 	isb	sy
 8000f82:	f3bf 8f4f 	dsb	sy
 8000f86:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <vPortEnterCritical+0x54>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <vPortEnterCritical+0x54>)
 8000f90:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <vPortEnterCritical+0x54>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d10e      	bne.n	8000fb8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <vPortEnterCritical+0x58>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d009      	beq.n	8000fb8 <vPortEnterCritical+0x48>
 8000fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fa8:	f383 8811 	msr	BASEPRI, r3
 8000fac:	f3bf 8f6f 	isb	sy
 8000fb0:	f3bf 8f4f 	dsb	sy
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	e7fe      	b.n	8000fb6 <vPortEnterCritical+0x46>
    }
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	e000ed04 	.word	0xe000ed04

08000fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <vPortExitCritical+0x4c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d109      	bne.n	8000fee <vPortExitCritical+0x22>
 8000fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fde:	f383 8811 	msr	BASEPRI, r3
 8000fe2:	f3bf 8f6f 	isb	sy
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	e7fe      	b.n	8000fec <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <vPortExitCritical+0x4c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <vPortExitCritical+0x4c>)
 8000ff6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <vPortExitCritical+0x4c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d104      	bne.n	800100a <vPortExitCritical+0x3e>
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000
 800101c:	00000000 	.word	0x00000000

08001020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001020:	f3ef 8009 	mrs	r0, PSP
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <pxCurrentTCBConst>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	f01e 0f10 	tst.w	lr, #16
 8001030:	bf08      	it	eq
 8001032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103a:	6010      	str	r0, [r2, #0]
 800103c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001044:	f380 8811 	msr	BASEPRI, r0
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	f3bf 8f6f 	isb	sy
 8001050:	f001 f932 	bl	80022b8 <vTaskSwitchContext>
 8001054:	f04f 0000 	mov.w	r0, #0
 8001058:	f380 8811 	msr	BASEPRI, r0
 800105c:	bc09      	pop	{r0, r3}
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	6808      	ldr	r0, [r1, #0]
 8001062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001066:	f01e 0f10 	tst.w	lr, #16
 800106a:	bf08      	it	eq
 800106c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001070:	f380 8809 	msr	PSP, r0
 8001074:	f3bf 8f6f 	isb	sy
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w

08001080 <pxCurrentTCBConst>:
 8001080:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop

08001088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
        __asm volatile
 800108e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001092:	f383 8811 	msr	BASEPRI, r3
 8001096:	f3bf 8f6f 	isb	sy
 800109a:	f3bf 8f4f 	dsb	sy
 800109e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80010a0:	f001 f852 	bl	8002148 <xTaskIncrementTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SysTick_Handler+0x3c>)
 80010ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	e000ed04 	.word	0xe000ed04

080010c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <vPortSetupTimerInterrupt+0x28>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <vPortSetupTimerInterrupt+0x2c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <vPortSetupTimerInterrupt+0x30>)
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <vPortSetupTimerInterrupt+0x34>)
 80010dc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <vPortSetupTimerInterrupt+0x28>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010
 80010f4:	e000e018 	.word	0xe000e018
 80010f8:	e000e014 	.word	0xe000e014
 80010fc:	0002903f 	.word	0x0002903f

08001100 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001100:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001110 <vPortEnableVFP+0x10>
 8001104:	6801      	ldr	r1, [r0, #0]
 8001106:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800110a:	6001      	str	r1, [r0, #0]
 800110c:	4770      	bx	lr
 800110e:	0000      	.short	0x0000
 8001110:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop

08001118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800111e:	f3ef 8305 	mrs	r3, IPSR
 8001122:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b0f      	cmp	r3, #15
 8001128:	d913      	bls.n	8001152 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800112a:	4a16      	ldr	r2, [pc, #88]	; (8001184 <vPortValidateInterruptPriority+0x6c>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <vPortValidateInterruptPriority+0x70>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	7afa      	ldrb	r2, [r7, #11]
 800113a:	429a      	cmp	r2, r3
 800113c:	d209      	bcs.n	8001152 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001142:	f383 8811 	msr	BASEPRI, r3
 8001146:	f3bf 8f6f 	isb	sy
 800114a:	f3bf 8f4f 	dsb	sy
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	e7fe      	b.n	8001150 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <vPortValidateInterruptPriority+0x74>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <vPortValidateInterruptPriority+0x78>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d909      	bls.n	8001176 <vPortValidateInterruptPriority+0x5e>
 8001162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	e7fe      	b.n	8001174 <vPortValidateInterruptPriority+0x5c>
    }
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e3f0 	.word	0xe000e3f0
 8001188:	20000030 	.word	0x20000030
 800118c:	e000ed0c 	.word	0xe000ed0c
 8001190:	20000034 	.word	0x20000034

08001194 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <xQueueGenericReset+0x28>
 80011a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ac:	f383 8811 	msr	BASEPRI, r3
 80011b0:	f3bf 8f6f 	isb	sy
 80011b4:	f3bf 8f4f 	dsb	sy
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	e7fe      	b.n	80011ba <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 80011bc:	f7ff fed8 	bl	8000f70 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	68f9      	ldr	r1, [r7, #12]
 80011ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	441a      	add	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ec:	3b01      	subs	r3, #1
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80011f2:	fb01 f303 	mul.w	r3, r1, r3
 80011f6:	441a      	add	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d114      	bne.n	800123c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01a      	beq.n	8001250 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3310      	adds	r3, #16
 800121e:	4618      	mov	r0, r3
 8001220:	f001 f8f4 	bl	800240c <xTaskRemoveFromEventList>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d012      	beq.n	8001250 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <xQueueGenericReset+0xcc>)
 800122c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	f3bf 8f4f 	dsb	sy
 8001236:	f3bf 8f6f 	isb	sy
 800123a:	e009      	b.n	8001250 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3310      	adds	r3, #16
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fcb7 	bl	8000bb4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	3324      	adds	r3, #36	; 0x24
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fcb2 	bl	8000bb4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001250:	f7ff febc 	bl	8000fcc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000ed04 	.word	0xe000ed04

08001264 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af02      	add	r7, sp, #8
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d109      	bne.n	800128c <xQueueGenericCreate+0x28>
 8001278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800127c:	f383 8811 	msr	BASEPRI, r3
 8001280:	f3bf 8f6f 	isb	sy
 8001284:	f3bf 8f4f 	dsb	sy
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	e7fe      	b.n	800128a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	fb02 f303 	mul.w	r3, r2, r3
 8001294:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <xQueueGenericCreate+0x46>
 800129c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d101      	bne.n	80012ae <xQueueGenericCreate+0x4a>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <xQueueGenericCreate+0x4c>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <xQueueGenericCreate+0x64>
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e7fe      	b.n	80012c6 <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	3350      	adds	r3, #80	; 0x50
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 fdb3 	bl	8002e38 <pvPortMalloc>
 80012d2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00d      	beq.n	80012f6 <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3350      	adds	r3, #80	; 0x50
 80012e2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 f805 	bl	8001300 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80012f6:	6a3b      	ldr	r3, [r7, #32]
    }
 80012f8:	4618      	mov	r0, r3
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d103      	bne.n	800131c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e002      	b.n	8001322 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800132e:	2101      	movs	r1, #1
 8001330:	69b8      	ldr	r0, [r7, #24]
 8001332:	f7ff ff2f 	bl	8001194 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	78fa      	ldrb	r2, [r7, #3]
 800133a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	; 0x38
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <xQueueGenericSend+0x30>
 8001364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001368:	f383 8811 	msr	BASEPRI, r3
 800136c:	f3bf 8f6f 	isb	sy
 8001370:	f3bf 8f4f 	dsb	sy
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
 8001376:	e7fe      	b.n	8001376 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <xQueueGenericSend+0x3e>
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <xQueueGenericSend+0x42>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <xQueueGenericSend+0x44>
 800138a:	2300      	movs	r3, #0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <xQueueGenericSend+0x5c>
 8001390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e7fe      	b.n	80013a2 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d103      	bne.n	80013b2 <xQueueGenericSend+0x6a>
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <xQueueGenericSend+0x6e>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <xQueueGenericSend+0x70>
 80013b6:	2300      	movs	r3, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d109      	bne.n	80013d0 <xQueueGenericSend+0x88>
 80013bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c0:	f383 8811 	msr	BASEPRI, r3
 80013c4:	f3bf 8f6f 	isb	sy
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	623b      	str	r3, [r7, #32]
 80013ce:	e7fe      	b.n	80013ce <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80013d0:	f001 f9b4 	bl	800273c <xTaskGetSchedulerState>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <xQueueGenericSend+0x98>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <xQueueGenericSend+0x9c>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <xQueueGenericSend+0x9e>
 80013e4:	2300      	movs	r3, #0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <xQueueGenericSend+0xb6>
 80013ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ee:	f383 8811 	msr	BASEPRI, r3
 80013f2:	f3bf 8f6f 	isb	sy
 80013f6:	f3bf 8f4f 	dsb	sy
 80013fa:	61fb      	str	r3, [r7, #28]
 80013fc:	e7fe      	b.n	80013fc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80013fe:	f7ff fdb7 	bl	8000f70 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	429a      	cmp	r2, r3
 800140c:	d302      	bcc.n	8001414 <xQueueGenericSend+0xcc>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d129      	bne.n	8001468 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800141a:	f000 fab9 	bl	8001990 <prvCopyDataToQueue>
 800141e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	2b00      	cmp	r3, #0
 8001426:	d010      	beq.n	800144a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	3324      	adds	r3, #36	; 0x24
 800142c:	4618      	mov	r0, r3
 800142e:	f000 ffed 	bl	800240c <xTaskRemoveFromEventList>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001438:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <xQueueGenericSend+0x1f0>)
 800143a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f3bf 8f4f 	dsb	sy
 8001444:	f3bf 8f6f 	isb	sy
 8001448:	e00a      	b.n	8001460 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <xQueueGenericSend+0x1f0>)
 8001452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001460:	f7ff fdb4 	bl	8000fcc <vPortExitCritical>
                return pdPASS;
 8001464:	2301      	movs	r3, #1
 8001466:	e063      	b.n	8001530 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800146e:	f7ff fdad 	bl	8000fcc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001472:	2300      	movs	r3, #0
 8001474:	e05c      	b.n	8001530 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001478:	2b00      	cmp	r3, #0
 800147a:	d106      	bne.n	800148a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4618      	mov	r0, r3
 8001482:	f001 f825 	bl	80024d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001486:	2301      	movs	r3, #1
 8001488:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800148a:	f7ff fd9f 	bl	8000fcc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800148e:	f000 fda1 	bl	8001fd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001492:	f7ff fd6d 	bl	8000f70 <vPortEnterCritical>
 8001496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800149c:	b25b      	sxtb	r3, r3
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a2:	d103      	bne.n	80014ac <xQueueGenericSend+0x164>
 80014a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d103      	bne.n	80014c2 <xQueueGenericSend+0x17a>
 80014ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014c2:	f7ff fd83 	bl	8000fcc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80014c6:	1d3a      	adds	r2, r7, #4
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 f814 	bl	80024fc <xTaskCheckForTimeOut>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d124      	bne.n	8001524 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80014da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014dc:	f000 fb42 	bl	8001b64 <prvIsQueueFull>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d018      	beq.n	8001518 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80014e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e8:	3310      	adds	r3, #16
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 ff3e 	bl	8002370 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80014f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014f6:	f000 facd 	bl	8001a94 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80014fa:	f000 fd79 	bl	8001ff0 <xTaskResumeAll>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f af7c 	bne.w	80013fe <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <xQueueGenericSend+0x1f0>)
 8001508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f3bf 8f4f 	dsb	sy
 8001512:	f3bf 8f6f 	isb	sy
 8001516:	e772      	b.n	80013fe <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800151a:	f000 fabb 	bl	8001a94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800151e:	f000 fd67 	bl	8001ff0 <xTaskResumeAll>
 8001522:	e76c      	b.n	80013fe <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001526:	f000 fab5 	bl	8001a94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800152a:	f000 fd61 	bl	8001ff0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800152e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001530:	4618      	mov	r0, r3
 8001532:	3738      	adds	r7, #56	; 0x38
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	e000ed04 	.word	0xe000ed04

0800153c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800154e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001550:	2b00      	cmp	r3, #0
 8001552:	d109      	bne.n	8001568 <xQueueGenericSendFromISR+0x2c>
 8001554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001558:	f383 8811 	msr	BASEPRI, r3
 800155c:	f3bf 8f6f 	isb	sy
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
 8001566:	e7fe      	b.n	8001566 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <xQueueGenericSendFromISR+0x3a>
 800156e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <xQueueGenericSendFromISR+0x3e>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <xQueueGenericSendFromISR+0x40>
 800157a:	2300      	movs	r3, #0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <xQueueGenericSendFromISR+0x58>
 8001580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
 8001592:	e7fe      	b.n	8001592 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d103      	bne.n	80015a2 <xQueueGenericSendFromISR+0x66>
 800159a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <xQueueGenericSendFromISR+0x6a>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <xQueueGenericSendFromISR+0x6c>
 80015a6:	2300      	movs	r3, #0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d109      	bne.n	80015c0 <xQueueGenericSendFromISR+0x84>
 80015ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b0:	f383 8811 	msr	BASEPRI, r3
 80015b4:	f3bf 8f6f 	isb	sy
 80015b8:	f3bf 8f4f 	dsb	sy
 80015bc:	623b      	str	r3, [r7, #32]
 80015be:	e7fe      	b.n	80015be <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015c0:	f7ff fdaa 	bl	8001118 <vPortValidateInterruptPriority>
        __asm volatile
 80015c4:	f3ef 8211 	mrs	r2, BASEPRI
 80015c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015cc:	f383 8811 	msr	BASEPRI, r3
 80015d0:	f3bf 8f6f 	isb	sy
 80015d4:	f3bf 8f4f 	dsb	sy
 80015d8:	61fa      	str	r2, [r7, #28]
 80015da:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80015dc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80015e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d302      	bcc.n	80015f2 <xQueueGenericSendFromISR+0xb6>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d13d      	bne.n	800166e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80015f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001608:	f000 f9c2 	bl	8001990 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800160c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d112      	bne.n	800163c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	2b00      	cmp	r3, #0
 800161c:	d024      	beq.n	8001668 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800161e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001620:	3324      	adds	r3, #36	; 0x24
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fef2 	bl	800240c <xTaskRemoveFromEventList>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01c      	beq.n	8001668 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d019      	beq.n	8001668 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e015      	b.n	8001668 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800163c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001640:	2b7f      	cmp	r3, #127	; 0x7f
 8001642:	d109      	bne.n	8001658 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e7fe      	b.n	8001656 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001658:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800165c:	3301      	adds	r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	b25a      	sxtb	r2, r3
 8001662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001668:	2301      	movs	r3, #1
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800166c:	e001      	b.n	8001672 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800166e:	2300      	movs	r3, #0
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001674:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800167c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800167e:	4618      	mov	r0, r3
 8001680:	3740      	adds	r7, #64	; 0x40
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08c      	sub	sp, #48	; 0x30
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <xQueueReceive+0x2e>
        __asm volatile
 80016a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a6:	f383 8811 	msr	BASEPRI, r3
 80016aa:	f3bf 8f6f 	isb	sy
 80016ae:	f3bf 8f4f 	dsb	sy
 80016b2:	623b      	str	r3, [r7, #32]
 80016b4:	e7fe      	b.n	80016b4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d103      	bne.n	80016c4 <xQueueReceive+0x3c>
 80016bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <xQueueReceive+0x40>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <xQueueReceive+0x42>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <xQueueReceive+0x5a>
 80016ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	e7fe      	b.n	80016e0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80016e2:	f001 f82b 	bl	800273c <xTaskGetSchedulerState>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <xQueueReceive+0x6a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <xQueueReceive+0x6e>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <xQueueReceive+0x70>
 80016f6:	2300      	movs	r3, #0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <xQueueReceive+0x88>
 80016fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001700:	f383 8811 	msr	BASEPRI, r3
 8001704:	f3bf 8f6f 	isb	sy
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	e7fe      	b.n	800170e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001710:	f7ff fc2e 	bl	8000f70 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001718:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01f      	beq.n	8001760 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001724:	f000 f990 	bl	8001a48 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1e5a      	subs	r2, r3, #1
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00f      	beq.n	8001758 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173a:	3310      	adds	r3, #16
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fe65 	bl	800240c <xTaskRemoveFromEventList>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d007      	beq.n	8001758 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001748:	4b3c      	ldr	r3, [pc, #240]	; (800183c <xQueueReceive+0x1b4>)
 800174a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	f3bf 8f4f 	dsb	sy
 8001754:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001758:	f7ff fc38 	bl	8000fcc <vPortExitCritical>
                return pdPASS;
 800175c:	2301      	movs	r3, #1
 800175e:	e069      	b.n	8001834 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d103      	bne.n	800176e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001766:	f7ff fc31 	bl	8000fcc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800176a:	2300      	movs	r3, #0
 800176c:	e062      	b.n	8001834 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d106      	bne.n	8001782 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fea9 	bl	80024d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800177e:	2301      	movs	r3, #1
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001782:	f7ff fc23 	bl	8000fcc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001786:	f000 fc25 	bl	8001fd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800178a:	f7ff fbf1 	bl	8000f70 <vPortEnterCritical>
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001794:	b25b      	sxtb	r3, r3
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d103      	bne.n	80017a4 <xQueueReceive+0x11c>
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d103      	bne.n	80017ba <xQueueReceive+0x132>
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017ba:	f7ff fc07 	bl	8000fcc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80017be:	1d3a      	adds	r2, r7, #4
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fe98 	bl	80024fc <xTaskCheckForTimeOut>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d123      	bne.n	800181a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80017d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017d4:	f000 f9b0 	bl	8001b38 <prvIsQueueEmpty>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d017      	beq.n	800180e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	3324      	adds	r3, #36	; 0x24
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fdc2 	bl	8002370 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80017ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017ee:	f000 f951 	bl	8001a94 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80017f2:	f000 fbfd 	bl	8001ff0 <xTaskResumeAll>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d189      	bne.n	8001710 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <xQueueReceive+0x1b4>)
 80017fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	f3bf 8f6f 	isb	sy
 800180c:	e780      	b.n	8001710 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800180e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001810:	f000 f940 	bl	8001a94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001814:	f000 fbec 	bl	8001ff0 <xTaskResumeAll>
 8001818:	e77a      	b.n	8001710 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800181a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800181c:	f000 f93a 	bl	8001a94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001820:	f000 fbe6 	bl	8001ff0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001826:	f000 f987 	bl	8001b38 <prvIsQueueEmpty>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	f43f af6f 	beq.w	8001710 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001832:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001834:	4618      	mov	r0, r3
 8001836:	3730      	adds	r7, #48	; 0x30
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	e000ed04 	.word	0xe000ed04

08001840 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b090      	sub	sp, #64	; 0x40
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <xQueueReceiveFromISR+0x2a>
 8001856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185a:	f383 8811 	msr	BASEPRI, r3
 800185e:	f3bf 8f6f 	isb	sy
 8001862:	f3bf 8f4f 	dsb	sy
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
 8001868:	e7fe      	b.n	8001868 <xQueueReceiveFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <xQueueReceiveFromISR+0x38>
 8001870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <xQueueReceiveFromISR+0x3c>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <xQueueReceiveFromISR+0x3e>
 800187c:	2300      	movs	r3, #0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <xQueueReceiveFromISR+0x56>
 8001882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e7fe      	b.n	8001894 <xQueueReceiveFromISR+0x54>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001896:	f7ff fc3f 	bl	8001118 <vPortValidateInterruptPriority>
        __asm volatile
 800189a:	f3ef 8211 	mrs	r2, BASEPRI
 800189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a2:	f383 8811 	msr	BASEPRI, r3
 80018a6:	f3bf 8f6f 	isb	sy
 80018aa:	f3bf 8f4f 	dsb	sy
 80018ae:	623a      	str	r2, [r7, #32]
 80018b0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80018b2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80018bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03d      	beq.n	800193e <xQueueReceiveFromISR+0xfe>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80018c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018d0:	f000 f8ba 	bl	8001a48 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80018d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018da:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80018dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80018e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e4:	d112      	bne.n	800190c <xQueueReceiveFromISR+0xcc>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d024      	beq.n	8001938 <xQueueReceiveFromISR+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f0:	3310      	adds	r3, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fd8a 	bl	800240c <xTaskRemoveFromEventList>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <xQueueReceiveFromISR+0xf8>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d019      	beq.n	8001938 <xQueueReceiveFromISR+0xf8>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e015      	b.n	8001938 <xQueueReceiveFromISR+0xf8>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800190c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001910:	2b7f      	cmp	r3, #127	; 0x7f
 8001912:	d109      	bne.n	8001928 <xQueueReceiveFromISR+0xe8>
        __asm volatile
 8001914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001918:	f383 8811 	msr	BASEPRI, r3
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f3bf 8f4f 	dsb	sy
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	e7fe      	b.n	8001926 <xQueueReceiveFromISR+0xe6>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192c:	3301      	adds	r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	b25a      	sxtb	r2, r3
 8001932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8001938:	2301      	movs	r3, #1
 800193a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800193c:	e001      	b.n	8001942 <xQueueReceiveFromISR+0x102>
        }
        else
        {
            xReturn = pdFAIL;
 800193e:	2300      	movs	r3, #0
 8001940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001944:	617b      	str	r3, [r7, #20]
        __asm volatile
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f383 8811 	msr	BASEPRI, r3
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800194c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800194e:	4618      	mov	r0, r3
 8001950:	3740      	adds	r7, #64	; 0x40
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <uxQueueMessagesWaiting+0x22>
        __asm volatile
 8001964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001968:	f383 8811 	msr	BASEPRI, r3
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	e7fe      	b.n	8001976 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 8001978:	f7ff fafa 	bl	8000f70 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8001982:	f7ff fb23 	bl	8000fcc <vPortExitCritical>

    return uxReturn;
 8001986:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a4:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d043      	beq.n	8001a36 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d119      	bne.n	80019e8 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6858      	ldr	r0, [r3, #4]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	461a      	mov	r2, r3
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	f002 f9e4 	bl	8003d8c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	441a      	add	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d32b      	bcc.n	8001a36 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	e026      	b.n	8001a36 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68d8      	ldr	r0, [r3, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	461a      	mov	r2, r3
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	f002 f9ca 	bl	8003d8c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	425b      	negs	r3, r3
 8001a02:	441a      	add	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	425b      	negs	r3, r3
 8001a1e:	441a      	add	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d105      	bne.n	8001a36 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001a3e:	693b      	ldr	r3, [r7, #16]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d018      	beq.n	8001a8c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	441a      	add	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d303      	bcc.n	8001a7c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68d9      	ldr	r1, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	461a      	mov	r2, r3
 8001a86:	6838      	ldr	r0, [r7, #0]
 8001a88:	f002 f980 	bl	8003d8c <memcpy>
    }
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001a9c:	f7ff fa68 	bl	8000f70 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aa6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001aa8:	e011      	b.n	8001ace <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3324      	adds	r3, #36	; 0x24
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fca8 	bl	800240c <xTaskRemoveFromEventList>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001ac2:	f000 fd7f 	bl	80025c4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	dce9      	bgt.n	8001aaa <prvUnlockQueue+0x16>
 8001ad6:	e000      	b.n	8001ada <prvUnlockQueue+0x46>
                        break;
 8001ad8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	22ff      	movs	r2, #255	; 0xff
 8001ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001ae2:	f7ff fa73 	bl	8000fcc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001ae6:	f7ff fa43 	bl	8000f70 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001af0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001af2:	e011      	b.n	8001b18 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d012      	beq.n	8001b22 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3310      	adds	r3, #16
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fc83 	bl	800240c <xTaskRemoveFromEventList>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001b0c:	f000 fd5a 	bl	80025c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	dce9      	bgt.n	8001af4 <prvUnlockQueue+0x60>
 8001b20:	e000      	b.n	8001b24 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001b22:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	22ff      	movs	r2, #255	; 0xff
 8001b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001b2c:	f7ff fa4e 	bl	8000fcc <vPortExitCritical>
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b40:	f7ff fa16 	bl	8000f70 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e001      	b.n	8001b56 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001b56:	f7ff fa39 	bl	8000fcc <vPortExitCritical>

    return xReturn;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b6c:	f7ff fa00 	bl	8000f70 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d102      	bne.n	8001b82 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e001      	b.n	8001b86 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001b86:	f7ff fa21 	bl	8000fcc <vPortExitCritical>

    return xReturn;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e014      	b.n	8001bce <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001ba4:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <vQueueAddToRegistry+0x4c>)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10b      	bne.n	8001bc8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001bb0:	490b      	ldr	r1, [pc, #44]	; (8001be0 <vQueueAddToRegistry+0x4c>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001bba:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <vQueueAddToRegistry+0x4c>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001bc6:	e005      	b.n	8001bd4 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	d9e7      	bls.n	8001ba4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	2000c98c 	.word	0x2000c98c

08001be4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001bf4:	f7ff f9bc 	bl	8000f70 <vPortEnterCritical>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d103      	bne.n	8001c0e <vQueueWaitForMessageRestricted+0x2a>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1a:	d103      	bne.n	8001c24 <vQueueWaitForMessageRestricted+0x40>
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c24:	f7ff f9d2 	bl	8000fcc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d106      	bne.n	8001c3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3324      	adds	r3, #36	; 0x24
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68b9      	ldr	r1, [r7, #8]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fbbd 	bl	80023b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff28 	bl	8001a94 <prvUnlockQueue>
    }
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 f8e9 	bl	8002e38 <pvPortMalloc>
 8001c66:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00e      	beq.n	8001c8c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c6e:	2058      	movs	r0, #88	; 0x58
 8001c70:	f001 f8e2 	bl	8002e38 <pvPortMalloc>
 8001c74:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
 8001c82:	e005      	b.n	8001c90 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001c84:	6978      	ldr	r0, [r7, #20]
 8001c86:	f001 f91d 	bl	8002ec4 <vPortFree>
 8001c8a:	e001      	b.n	8001c90 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d013      	beq.n	8001cbe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9303      	str	r3, [sp, #12]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f80e 	bl	8001cce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001cb2:	69f8      	ldr	r0, [r7, #28]
 8001cb4:	f000 f89e 	bl	8001df4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	e002      	b.n	8001cc4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
    }
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b088      	sub	sp, #32
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	21a5      	movs	r1, #165	; 0xa5
 8001ce8:	f002 f85b 	bl	8003da2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f023 0307 	bic.w	r3, r3, #7
 8001d04:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <prvInitialiseNewTask+0x56>
 8001d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d14:	f383 8811 	msr	BASEPRI, r3
 8001d18:	f3bf 8f6f 	isb	sy
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e7fe      	b.n	8001d22 <prvInitialiseNewTask+0x54>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01f      	beq.n	8001d70 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
 8001d34:	e012      	b.n	8001d5c <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	7819      	ldrb	r1, [r3, #0]
 8001d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	3334      	adds	r3, #52	; 0x34
 8001d46:	460a      	mov	r2, r1
 8001d48:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d006      	beq.n	8001d64 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b0f      	cmp	r3, #15
 8001d60:	d9e9      	bls.n	8001d36 <prvInitialiseNewTask+0x68>
 8001d62:	e000      	b.n	8001d66 <prvInitialiseNewTask+0x98>
            {
                break;
 8001d64:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d6e:	e003      	b.n	8001d78 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d901      	bls.n	8001d82 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe ff31 	bl	8000bf4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d94:	3318      	adds	r3, #24
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe ff2c 	bl	8000bf4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da4:	f1c3 0205 	rsb	r2, r3, #5
 8001da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001daa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db4:	3350      	adds	r3, #80	; 0x50
 8001db6:	2204      	movs	r2, #4
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f001 fff1 	bl	8003da2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	3354      	adds	r3, #84	; 0x54
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 ffea 	bl	8003da2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	69b8      	ldr	r0, [r7, #24]
 8001dd4:	f7fe ffa2 	bl	8000d1c <pxPortInitialiseStack>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ddc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <prvInitialiseNewTask+0x11c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001de8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001dfc:	f7ff f8b8 	bl	8000f70 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <prvAddNewTaskToReadyList+0xc4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <prvAddNewTaskToReadyList+0xc4>)
 8001e08:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <prvAddNewTaskToReadyList+0xc8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e12:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <prvAddNewTaskToReadyList+0xc8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <prvAddNewTaskToReadyList+0xc4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d110      	bne.n	8001e42 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001e20:	f000 fbf4 	bl	800260c <prvInitialiseTaskLists>
 8001e24:	e00d      	b.n	8001e42 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001e26:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <prvAddNewTaskToReadyList+0xcc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <prvAddNewTaskToReadyList+0xc8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d802      	bhi.n	8001e42 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <prvAddNewTaskToReadyList+0xc8>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <prvAddNewTaskToReadyList+0xd0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <prvAddNewTaskToReadyList+0xd0>)
 8001e4a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <prvAddNewTaskToReadyList+0xd0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	649a      	str	r2, [r3, #72]	; 0x48
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <prvAddNewTaskToReadyList+0xd4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d903      	bls.n	8001e68 <prvAddNewTaskToReadyList+0x74>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <prvAddNewTaskToReadyList+0xd4>)
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <prvAddNewTaskToReadyList+0xd8>)
 8001e76:	441a      	add	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7fe fec5 	bl	8000c0e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001e84:	f7ff f8a2 	bl	8000fcc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001e88:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <prvAddNewTaskToReadyList+0xcc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00e      	beq.n	8001eae <prvAddNewTaskToReadyList+0xba>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <prvAddNewTaskToReadyList+0xc8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d207      	bcs.n	8001eae <prvAddNewTaskToReadyList+0xba>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <prvAddNewTaskToReadyList+0xdc>)
 8001ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000110 	.word	0x20000110
 8001ebc:	20000038 	.word	0x20000038
 8001ec0:	2000011c 	.word	0x2000011c
 8001ec4:	2000012c 	.word	0x2000012c
 8001ec8:	20000118 	.word	0x20000118
 8001ecc:	2000003c 	.word	0x2000003c
 8001ed0:	e000ed04 	.word	0xe000ed04

08001ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d016      	beq.n	8001f14 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <vTaskDelay+0x60>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <vTaskDelay+0x2e>
 8001eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	f3bf 8f4f 	dsb	sy
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	e7fe      	b.n	8001f00 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001f02:	f000 f867 	bl	8001fd4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f06:	2100      	movs	r1, #0
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fc35 	bl	8002778 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001f0e:	f000 f86f 	bl	8001ff0 <xTaskResumeAll>
 8001f12:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d107      	bne.n	8001f2a <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <vTaskDelay+0x64>)
 8001f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f3bf 8f4f 	dsb	sy
 8001f26:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000138 	.word	0x20000138
 8001f38:	e000ed04 	.word	0xe000ed04

08001f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <vTaskStartScheduler+0x80>)
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2300      	movs	r3, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	491c      	ldr	r1, [pc, #112]	; (8001fc0 <vTaskStartScheduler+0x84>)
 8001f50:	481c      	ldr	r0, [pc, #112]	; (8001fc4 <vTaskStartScheduler+0x88>)
 8001f52:	f7ff fe7b 	bl	8001c4c <xTaskCreate>
 8001f56:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001f5e:	f000 fc5f 	bl	8002820 <xTimerCreateTimerTask>
 8001f62:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d115      	bne.n	8001f96 <vTaskStartScheduler+0x5a>
 8001f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6e:	f383 8811 	msr	BASEPRI, r3
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	f3bf 8f4f 	dsb	sy
 8001f7a:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <vTaskStartScheduler+0x8c>)
 8001f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f82:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <vTaskStartScheduler+0x90>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <vTaskStartScheduler+0x94>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001f90:	f7fe ff50 	bl	8000e34 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8001f94:	e00d      	b.n	8001fb2 <vTaskStartScheduler+0x76>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d109      	bne.n	8001fb2 <vTaskStartScheduler+0x76>
 8001f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	e7fe      	b.n	8001fb0 <vTaskStartScheduler+0x74>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000134 	.word	0x20000134
 8001fc0:	08003dcc 	.word	0x08003dcc
 8001fc4:	080025dd 	.word	0x080025dd
 8001fc8:	20000130 	.word	0x20000130
 8001fcc:	2000011c 	.word	0x2000011c
 8001fd0:	20000114 	.word	0x20000114

08001fd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <vTaskSuspendAll+0x18>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	4a03      	ldr	r2, [pc, #12]	; (8001fec <vTaskSuspendAll+0x18>)
 8001fe0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	20000138 	.word	0x20000138

08001ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <xTaskResumeAll+0x114>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <xTaskResumeAll+0x2a>
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	e7fe      	b.n	8002018 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800201a:	f7fe ffa9 	bl	8000f70 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <xTaskResumeAll+0x114>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3b01      	subs	r3, #1
 8002024:	4a37      	ldr	r2, [pc, #220]	; (8002104 <xTaskResumeAll+0x114>)
 8002026:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <xTaskResumeAll+0x114>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d162      	bne.n	80020f6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002030:	4b35      	ldr	r3, [pc, #212]	; (8002108 <xTaskResumeAll+0x118>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05e      	beq.n	80020f6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002038:	e02f      	b.n	800209a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <xTaskResumeAll+0x11c>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3318      	adds	r3, #24
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fe3e 	bl	8000cc8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3304      	adds	r3, #4
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe39 	bl	8000cc8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <xTaskResumeAll+0x120>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d903      	bls.n	800206a <xTaskResumeAll+0x7a>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <xTaskResumeAll+0x120>)
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4a27      	ldr	r2, [pc, #156]	; (8002114 <xTaskResumeAll+0x124>)
 8002078:	441a      	add	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3304      	adds	r3, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4610      	mov	r0, r2
 8002082:	f7fe fdc4 	bl	8000c0e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <xTaskResumeAll+0x128>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	429a      	cmp	r2, r3
 8002092:	d302      	bcc.n	800209a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <xTaskResumeAll+0x12c>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <xTaskResumeAll+0x11c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1cb      	bne.n	800203a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80020a8:	f000 fb2c 	bl	8002704 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <xTaskResumeAll+0x130>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80020b8:	f000 f846 	bl	8002148 <xTaskIncrementTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <xTaskResumeAll+0x12c>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f1      	bne.n	80020b8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <xTaskResumeAll+0x130>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <xTaskResumeAll+0x12c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80020e2:	2301      	movs	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <xTaskResumeAll+0x134>)
 80020e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80020f6:	f7fe ff69 	bl	8000fcc <vPortExitCritical>

    return xAlreadyYielded;
 80020fa:	68bb      	ldr	r3, [r7, #8]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000138 	.word	0x20000138
 8002108:	20000110 	.word	0x20000110
 800210c:	200000d0 	.word	0x200000d0
 8002110:	20000118 	.word	0x20000118
 8002114:	2000003c 	.word	0x2000003c
 8002118:	20000038 	.word	0x20000038
 800211c:	20000124 	.word	0x20000124
 8002120:	20000120 	.word	0x20000120
 8002124:	e000ed04 	.word	0xe000ed04

08002128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <xTaskGetTickCount+0x1c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000114 	.word	0x20000114

08002148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002152:	4b4e      	ldr	r3, [pc, #312]	; (800228c <xTaskIncrementTick+0x144>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 808e 	bne.w	8002278 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <xTaskIncrementTick+0x148>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002164:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <xTaskIncrementTick+0x148>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d11f      	bne.n	80021b0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <xTaskIncrementTick+0x14c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <xTaskIncrementTick+0x46>
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	e7fe      	b.n	800218c <xTaskIncrementTick+0x44>
 800218e:	4b41      	ldr	r3, [pc, #260]	; (8002294 <xTaskIncrementTick+0x14c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4b40      	ldr	r3, [pc, #256]	; (8002298 <xTaskIncrementTick+0x150>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a3e      	ldr	r2, [pc, #248]	; (8002294 <xTaskIncrementTick+0x14c>)
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <xTaskIncrementTick+0x150>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b3e      	ldr	r3, [pc, #248]	; (800229c <xTaskIncrementTick+0x154>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	4a3c      	ldr	r2, [pc, #240]	; (800229c <xTaskIncrementTick+0x154>)
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	f000 faaa 	bl	8002704 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <xTaskIncrementTick+0x158>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d349      	bcc.n	800224e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021ba:	4b36      	ldr	r3, [pc, #216]	; (8002294 <xTaskIncrementTick+0x14c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <xTaskIncrementTick+0x158>)
 80021c6:	f04f 32ff 	mov.w	r2, #4294967295
 80021ca:	601a      	str	r2, [r3, #0]
                    break;
 80021cc:	e03f      	b.n	800224e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <xTaskIncrementTick+0x14c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d203      	bcs.n	80021ee <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80021e6:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <xTaskIncrementTick+0x158>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80021ec:	e02f      	b.n	800224e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3304      	adds	r3, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fd68 	bl	8000cc8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3318      	adds	r3, #24
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fd5f 	bl	8000cc8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220e:	4b25      	ldr	r3, [pc, #148]	; (80022a4 <xTaskIncrementTick+0x15c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d903      	bls.n	800221e <xTaskIncrementTick+0xd6>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <xTaskIncrementTick+0x15c>)
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <xTaskIncrementTick+0x160>)
 800222c:	441a      	add	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3304      	adds	r3, #4
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7fe fcea 	bl	8000c0e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <xTaskIncrementTick+0x164>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	429a      	cmp	r2, r3
 8002246:	d3b8      	bcc.n	80021ba <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002248:	2301      	movs	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800224c:	e7b5      	b.n	80021ba <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800224e:	4b17      	ldr	r3, [pc, #92]	; (80022ac <xTaskIncrementTick+0x164>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002254:	4914      	ldr	r1, [pc, #80]	; (80022a8 <xTaskIncrementTick+0x160>)
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d901      	bls.n	800226a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002266:	2301      	movs	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <xTaskIncrementTick+0x168>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8002272:	2301      	movs	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e004      	b.n	8002282 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <xTaskIncrementTick+0x16c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <xTaskIncrementTick+0x16c>)
 8002280:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002282:	697b      	ldr	r3, [r7, #20]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000138 	.word	0x20000138
 8002290:	20000114 	.word	0x20000114
 8002294:	200000c8 	.word	0x200000c8
 8002298:	200000cc 	.word	0x200000cc
 800229c:	20000128 	.word	0x20000128
 80022a0:	20000130 	.word	0x20000130
 80022a4:	20000118 	.word	0x20000118
 80022a8:	2000003c 	.word	0x2000003c
 80022ac:	20000038 	.word	0x20000038
 80022b0:	20000124 	.word	0x20000124
 80022b4:	20000120 	.word	0x20000120

080022b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022be:	4b27      	ldr	r3, [pc, #156]	; (800235c <vTaskSwitchContext+0xa4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <vTaskSwitchContext+0xa8>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80022cc:	e040      	b.n	8002350 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <vTaskSwitchContext+0xa8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <vTaskSwitchContext+0xac>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e00f      	b.n	80022fc <vTaskSwitchContext+0x44>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <vTaskSwitchContext+0x3e>
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	e7fe      	b.n	80022f4 <vTaskSwitchContext+0x3c>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	491a      	ldr	r1, [pc, #104]	; (8002368 <vTaskSwitchContext+0xb0>)
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0e5      	beq.n	80022dc <vTaskSwitchContext+0x24>
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <vTaskSwitchContext+0xb0>)
 800231c:	4413      	add	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3308      	adds	r3, #8
 8002332:	429a      	cmp	r2, r3
 8002334:	d104      	bne.n	8002340 <vTaskSwitchContext+0x88>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <vTaskSwitchContext+0xb4>)
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4a06      	ldr	r2, [pc, #24]	; (8002364 <vTaskSwitchContext+0xac>)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	20000138 	.word	0x20000138
 8002360:	20000124 	.word	0x20000124
 8002364:	20000118 	.word	0x20000118
 8002368:	2000003c 	.word	0x2000003c
 800236c:	20000038 	.word	0x20000038

08002370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <vTaskPlaceOnEventList+0x24>
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e7fe      	b.n	8002392 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <vTaskPlaceOnEventList+0x44>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3318      	adds	r3, #24
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7fe fc5a 	bl	8000c56 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023a2:	2101      	movs	r1, #1
 80023a4:	6838      	ldr	r0, [r7, #0]
 80023a6:	f000 f9e7 	bl	8002778 <prvAddCurrentTaskToDelayedList>
}
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000038 	.word	0x20000038

080023b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <vTaskPlaceOnEventListRestricted+0x26>
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e7fe      	b.n	80023dc <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <vTaskPlaceOnEventListRestricted+0x50>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3318      	adds	r3, #24
 80023e4:	4619      	mov	r1, r3
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f7fe fc11 	bl	8000c0e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	68b8      	ldr	r0, [r7, #8]
 80023fc:	f000 f9bc 	bl	8002778 <prvAddCurrentTaskToDelayedList>
    }
 8002400:	bf00      	nop
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000038 	.word	0x20000038

0800240c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <xTaskRemoveFromEventList+0x2a>
 8002422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e7fe      	b.n	8002434 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	3318      	adds	r3, #24
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fc44 	bl	8000cc8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <xTaskRemoveFromEventList+0xac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d11d      	bne.n	8002484 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	3304      	adds	r3, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fc3b 	bl	8000cc8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <xTaskRemoveFromEventList+0xb0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d903      	bls.n	8002466 <xTaskRemoveFromEventList+0x5a>
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	4a16      	ldr	r2, [pc, #88]	; (80024bc <xTaskRemoveFromEventList+0xb0>)
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <xTaskRemoveFromEventList+0xb4>)
 8002474:	441a      	add	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	3304      	adds	r3, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4610      	mov	r0, r2
 800247e:	f7fe fbc6 	bl	8000c0e <vListInsertEnd>
 8002482:	e005      	b.n	8002490 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	3318      	adds	r3, #24
 8002488:	4619      	mov	r1, r3
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <xTaskRemoveFromEventList+0xb8>)
 800248c:	f7fe fbbf 	bl	8000c0e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <xTaskRemoveFromEventList+0xbc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	429a      	cmp	r2, r3
 800249c:	d905      	bls.n	80024aa <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800249e:	2301      	movs	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <xTaskRemoveFromEventList+0xc0>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e001      	b.n	80024ae <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80024ae:	697b      	ldr	r3, [r7, #20]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000138 	.word	0x20000138
 80024bc:	20000118 	.word	0x20000118
 80024c0:	2000003c 	.word	0x2000003c
 80024c4:	200000d0 	.word	0x200000d0
 80024c8:	20000038 	.word	0x20000038
 80024cc:	20000124 	.word	0x20000124

080024d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <vTaskInternalSetTimeOutState+0x24>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <vTaskInternalSetTimeOutState+0x28>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	605a      	str	r2, [r3, #4]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	20000128 	.word	0x20000128
 80024f8:	20000114 	.word	0x20000114

080024fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <xTaskCheckForTimeOut+0x24>
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e7fe      	b.n	800251e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <xTaskCheckForTimeOut+0x3e>
 8002526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e7fe      	b.n	8002538 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800253a:	f7fe fd19 	bl	8000f70 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <xTaskCheckForTimeOut+0xc0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d102      	bne.n	800255e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	e026      	b.n	80025ac <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <xTaskCheckForTimeOut+0xc4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d00a      	beq.n	8002580 <xTaskCheckForTimeOut+0x84>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	429a      	cmp	r2, r3
 8002572:	d305      	bcc.n	8002580 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002574:	2301      	movs	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e015      	b.n	80025ac <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	429a      	cmp	r2, r3
 8002588:	d20b      	bcs.n	80025a2 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad2      	subs	r2, r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff9a 	bl	80024d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	e004      	b.n	80025ac <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80025ac:	f7fe fd0e 	bl	8000fcc <vPortExitCritical>

    return xReturn;
 80025b0:	69fb      	ldr	r3, [r7, #28]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000114 	.word	0x20000114
 80025c0:	20000128 	.word	0x20000128

080025c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <vTaskMissedYield+0x14>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20000124 	.word	0x20000124

080025dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80025e4:	f000 f852 	bl	800268c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <prvIdleTask+0x28>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d9f9      	bls.n	80025e4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <prvIdleTask+0x2c>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002600:	e7f0      	b.n	80025e4 <prvIdleTask+0x8>
 8002602:	bf00      	nop
 8002604:	2000003c 	.word	0x2000003c
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	e00c      	b.n	8002632 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <prvInitialiseTaskLists+0x60>)
 8002624:	4413      	add	r3, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fac4 	bl	8000bb4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d9ef      	bls.n	8002618 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <prvInitialiseTaskLists+0x64>)
 800263a:	f7fe fabb 	bl	8000bb4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800263e:	480d      	ldr	r0, [pc, #52]	; (8002674 <prvInitialiseTaskLists+0x68>)
 8002640:	f7fe fab8 	bl	8000bb4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <prvInitialiseTaskLists+0x6c>)
 8002646:	f7fe fab5 	bl	8000bb4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800264a:	480c      	ldr	r0, [pc, #48]	; (800267c <prvInitialiseTaskLists+0x70>)
 800264c:	f7fe fab2 	bl	8000bb4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002650:	480b      	ldr	r0, [pc, #44]	; (8002680 <prvInitialiseTaskLists+0x74>)
 8002652:	f7fe faaf 	bl	8000bb4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <prvInitialiseTaskLists+0x78>)
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <prvInitialiseTaskLists+0x64>)
 800265a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <prvInitialiseTaskLists+0x7c>)
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <prvInitialiseTaskLists+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000003c 	.word	0x2000003c
 8002670:	200000a0 	.word	0x200000a0
 8002674:	200000b4 	.word	0x200000b4
 8002678:	200000d0 	.word	0x200000d0
 800267c:	200000e4 	.word	0x200000e4
 8002680:	200000fc 	.word	0x200000fc
 8002684:	200000c8 	.word	0x200000c8
 8002688:	200000cc 	.word	0x200000cc

0800268c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002692:	e019      	b.n	80026c8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002694:	f7fe fc6c 	bl	8000f70 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <prvCheckTasksWaitingTermination+0x4c>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fb0f 	bl	8000cc8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <prvCheckTasksWaitingTermination+0x50>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <prvCheckTasksWaitingTermination+0x50>)
 80026b2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <prvCheckTasksWaitingTermination+0x54>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <prvCheckTasksWaitingTermination+0x54>)
 80026bc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80026be:	f7fe fc85 	bl	8000fcc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f80e 	bl	80026e4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <prvCheckTasksWaitingTermination+0x54>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e1      	bne.n	8002694 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200000e4 	.word	0x200000e4
 80026dc:	20000110 	.word	0x20000110
 80026e0:	200000f8 	.word	0x200000f8

080026e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fbe7 	bl	8002ec4 <vPortFree>
                vPortFree( pxTCB );
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fbe4 	bl	8002ec4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <prvResetNextTaskUnblockTime+0x30>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <prvResetNextTaskUnblockTime+0x34>)
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800271a:	e005      	b.n	8002728 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <prvResetNextTaskUnblockTime+0x30>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <prvResetNextTaskUnblockTime+0x34>)
 8002726:	6013      	str	r3, [r2, #0]
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200000c8 	.word	0x200000c8
 8002738:	20000130 	.word	0x20000130

0800273c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <xTaskGetSchedulerState+0x34>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800274a:	2301      	movs	r3, #1
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	e008      	b.n	8002762 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <xTaskGetSchedulerState+0x38>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002758:	2302      	movs	r3, #2
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e001      	b.n	8002762 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002762:	687b      	ldr	r3, [r7, #4]
    }
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	2000011c 	.word	0x2000011c
 8002774:	20000138 	.word	0x20000138

08002778 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <prvAddCurrentTaskToDelayedList+0x90>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <prvAddCurrentTaskToDelayedList+0x94>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3304      	adds	r3, #4
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fa9a 	bl	8000cc8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d10a      	bne.n	80027b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <prvAddCurrentTaskToDelayedList+0x94>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3304      	adds	r3, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4819      	ldr	r0, [pc, #100]	; (8002810 <prvAddCurrentTaskToDelayedList+0x98>)
 80027ac:	f7fe fa2f 	bl	8000c0e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80027b0:	e026      	b.n	8002800 <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <prvAddCurrentTaskToDelayedList+0x94>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d209      	bcs.n	80027de <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <prvAddCurrentTaskToDelayedList+0x9c>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <prvAddCurrentTaskToDelayedList+0x94>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3304      	adds	r3, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f7fe fa3d 	bl	8000c56 <vListInsert>
}
 80027dc:	e010      	b.n	8002800 <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <prvAddCurrentTaskToDelayedList+0xa0>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <prvAddCurrentTaskToDelayedList+0x94>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	4610      	mov	r0, r2
 80027ec:	f7fe fa33 	bl	8000c56 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <prvAddCurrentTaskToDelayedList+0xa4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d202      	bcs.n	8002800 <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <prvAddCurrentTaskToDelayedList+0xa4>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000114 	.word	0x20000114
 800280c:	20000038 	.word	0x20000038
 8002810:	200000fc 	.word	0x200000fc
 8002814:	200000cc 	.word	0x200000cc
 8002818:	200000c8 	.word	0x200000c8
 800281c:	20000130 	.word	0x20000130

08002820 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800282a:	f000 facf 	bl	8002dcc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <xTimerCreateTimerTask+0x50>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <xTimerCreateTimerTask+0x54>)
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2303      	movs	r3, #3
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	2220      	movs	r2, #32
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <xTimerCreateTimerTask+0x58>)
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <xTimerCreateTimerTask+0x5c>)
 8002846:	f7ff fa01 	bl	8001c4c <xTaskCreate>
 800284a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <xTimerCreateTimerTask+0x46>
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	e7fe      	b.n	8002864 <xTimerCreateTimerTask+0x44>
        return xReturn;
 8002866:	687b      	ldr	r3, [r7, #4]
    }
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	2000016c 	.word	0x2000016c
 8002874:	20000170 	.word	0x20000170
 8002878:	08003de4 	.word	0x08003de4
 800287c:	080029b1 	.word	0x080029b1

08002880 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800288e:	2300      	movs	r3, #0
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <xTimerGenericCommand+0x2c>
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	e7fe      	b.n	80028aa <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <xTimerGenericCommand+0x94>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d02a      	beq.n	800290a <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	dc18      	bgt.n	80028f8 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028c6:	f7ff ff39 	bl	800273c <xTaskGetSchedulerState>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d109      	bne.n	80028e4 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <xTimerGenericCommand+0x94>)
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	f107 0114 	add.w	r1, r7, #20
 80028d8:	2300      	movs	r3, #0
 80028da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028dc:	f7fe fd34 	bl	8001348 <xQueueGenericSend>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24
 80028e2:	e012      	b.n	800290a <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <xTimerGenericCommand+0x94>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	f107 0114 	add.w	r1, r7, #20
 80028ec:	2300      	movs	r3, #0
 80028ee:	2200      	movs	r2, #0
 80028f0:	f7fe fd2a 	bl	8001348 <xQueueGenericSend>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24
 80028f6:	e008      	b.n	800290a <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <xTimerGenericCommand+0x94>)
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	f107 0114 	add.w	r1, r7, #20
 8002900:	2300      	movs	r3, #0
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	f7fe fe1a 	bl	800153c <xQueueGenericSendFromISR>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800290c:	4618      	mov	r0, r3
 800290e:	3728      	adds	r7, #40	; 0x28
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	2000016c 	.word	0x2000016c

08002918 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <prvProcessExpiredTimer+0x94>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3304      	adds	r3, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe f9c9 	bl	8000cc8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d021      	beq.n	8002988 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	18d1      	adds	r1, r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6978      	ldr	r0, [r7, #20]
 8002952:	f000 f8d1 	bl	8002af8 <prvInsertTimerInActiveList>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01e      	beq.n	800299a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2300      	movs	r3, #0
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	2100      	movs	r1, #0
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff8a 	bl	8002880 <xTimerGenericCommand>
 800296c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d112      	bne.n	800299a <prvProcessExpiredTimer+0x82>
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e7fe      	b.n	8002986 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	b2da      	uxtb	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	4798      	blx	r3
    }
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000164 	.word	0x20000164

080029b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029b8:	f107 0308 	add.w	r3, r7, #8
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f857 	bl	8002a70 <prvGetNextExpireTime>
 80029c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4619      	mov	r1, r3
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f803 	bl	80029d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80029ce:	f000 f8d5 	bl	8002b7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029d2:	e7f1      	b.n	80029b8 <prvTimerTask+0x8>

080029d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80029de:	f7ff faf9 	bl	8001fd4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f866 	bl	8002ab8 <prvSampleTimeNow>
 80029ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d130      	bne.n	8002a56 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <prvProcessTimerOrBlockTask+0x3c>
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d806      	bhi.n	8002a10 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002a02:	f7ff faf5 	bl	8001ff0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002a06:	68f9      	ldr	r1, [r7, #12]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff85 	bl	8002918 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002a0e:	e024      	b.n	8002a5a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <prvProcessTimerOrBlockTask+0x90>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <prvProcessTimerOrBlockTask+0x50>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <prvProcessTimerOrBlockTask+0x52>
 8002a24:	2300      	movs	r3, #0
 8002a26:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <prvProcessTimerOrBlockTask+0x94>)
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7ff f8d5 	bl	8001be4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002a3a:	f7ff fad9 	bl	8001ff0 <xTaskResumeAll>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <prvProcessTimerOrBlockTask+0x98>)
 8002a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
    }
 8002a54:	e001      	b.n	8002a5a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002a56:	f7ff facb 	bl	8001ff0 <xTaskResumeAll>
    }
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000168 	.word	0x20000168
 8002a68:	2000016c 	.word	0x2000016c
 8002a6c:	e000ed04 	.word	0xe000ed04

08002a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <prvGetNextExpireTime+0x44>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <prvGetNextExpireTime+0x16>
 8002a82:	2201      	movs	r2, #1
 8002a84:	e000      	b.n	8002a88 <prvGetNextExpireTime+0x18>
 8002a86:	2200      	movs	r2, #0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <prvGetNextExpireTime+0x44>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e001      	b.n	8002aa4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
    }
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000164 	.word	0x20000164

08002ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002ac0:	f7ff fb32 	bl	8002128 <xTaskGetTickCount>
 8002ac4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <prvSampleTimeNow+0x3c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d205      	bcs.n	8002adc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002ad0:	f000 f918 	bl	8002d04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e002      	b.n	8002ae2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <prvSampleTimeNow+0x3c>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    }
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000174 	.word	0x20000174

08002af8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d812      	bhi.n	8002b44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	1ad2      	subs	r2, r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d302      	bcc.n	8002b32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	e01b      	b.n	8002b6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <prvInsertTimerInActiveList+0x7c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7fe f88a 	bl	8000c56 <vListInsert>
 8002b42:	e012      	b.n	8002b6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d206      	bcs.n	8002b5a <prvInsertTimerInActiveList+0x62>
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d302      	bcc.n	8002b5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002b54:	2301      	movs	r3, #1
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e007      	b.n	8002b6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <prvInsertTimerInActiveList+0x80>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7fe f876 	bl	8000c56 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002b6a:	697b      	ldr	r3, [r7, #20]
    }
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000168 	.word	0x20000168
 8002b78:	20000164 	.word	0x20000164

08002b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b82:	e0ac      	b.n	8002cde <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f2c0 80a8 	blt.w	8002cdc <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe f893 	bl	8000cc8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff87 	bl	8002ab8 <prvSampleTimeNow>
 8002baa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	f200 8095 	bhi.w	8002cde <prvProcessReceivedCommands+0x162>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <prvProcessReceivedCommands+0x40>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002be5 	.word	0x08002be5
 8002bc0:	08002be5 	.word	0x08002be5
 8002bc4:	08002be5 	.word	0x08002be5
 8002bc8:	08002c57 	.word	0x08002c57
 8002bcc:	08002c6b 	.word	0x08002c6b
 8002bd0:	08002cb3 	.word	0x08002cb3
 8002bd4:	08002be5 	.word	0x08002be5
 8002bd8:	08002be5 	.word	0x08002be5
 8002bdc:	08002c57 	.word	0x08002c57
 8002be0:	08002c6b 	.word	0x08002c6b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	18d1      	adds	r1, r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c04:	f7ff ff78 	bl	8002af8 <prvInsertTimerInActiveList>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d067      	beq.n	8002cde <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c14:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05c      	beq.n	8002cde <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2300      	movs	r3, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c36:	f7ff fe23 	bl	8002880 <xTimerGenericCommand>
 8002c3a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d14d      	bne.n	8002cde <prvProcessReceivedCommands+0x162>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e7fe      	b.n	8002c54 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002c68:	e039      	b.n	8002cde <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <prvProcessReceivedCommands+0x122>
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e7fe      	b.n	8002c9c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	18d1      	adds	r1, r2, r3
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cac:	f7ff ff24 	bl	8002af8 <prvInsertTimerInActiveList>
                        break;
 8002cb0:	e015      	b.n	8002cde <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cc2:	f000 f8ff 	bl	8002ec4 <vPortFree>
 8002cc6:	e00a      	b.n	8002cde <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002cda:	e000      	b.n	8002cde <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002cdc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <prvProcessReceivedCommands+0x184>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f107 0108 	add.w	r1, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fccd 	bl	8001688 <xQueueReceive>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f47f af47 	bne.w	8002b84 <prvProcessReceivedCommands+0x8>
        }
    }
 8002cf6:	bf00      	nop
 8002cf8:	3728      	adds	r7, #40	; 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000016c 	.word	0x2000016c

08002d04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d0a:	e047      	b.n	8002d9c <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d16:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd ffcf 	bl	8000cc8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02d      	beq.n	8002d9c <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d90e      	bls.n	8002d70 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f7fd ff74 	bl	8000c56 <vListInsert>
 8002d6e:	e015      	b.n	8002d9c <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d70:	2300      	movs	r3, #0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	2100      	movs	r1, #0
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff fd80 	bl	8002880 <xTimerGenericCommand>
 8002d80:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <prvSwitchTimerLists+0x98>
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	e7fe      	b.n	8002d9a <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1b2      	bne.n	8002d0c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <prvSwitchTimerLists+0xc4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <prvSwitchTimerLists+0xc0>)
 8002db2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <prvSwitchTimerLists+0xc4>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6013      	str	r3, [r2, #0]
    }
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000164 	.word	0x20000164
 8002dc8:	20000168 	.word	0x20000168

08002dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002dd0:	f7fe f8ce 	bl	8000f70 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <prvCheckForValidListAndQueue+0x54>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d11d      	bne.n	8002e18 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002ddc:	4811      	ldr	r0, [pc, #68]	; (8002e24 <prvCheckForValidListAndQueue+0x58>)
 8002dde:	f7fd fee9 	bl	8000bb4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002de2:	4811      	ldr	r0, [pc, #68]	; (8002e28 <prvCheckForValidListAndQueue+0x5c>)
 8002de4:	f7fd fee6 	bl	8000bb4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <prvCheckForValidListAndQueue+0x60>)
 8002dea:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <prvCheckForValidListAndQueue+0x58>)
 8002dec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <prvCheckForValidListAndQueue+0x64>)
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <prvCheckForValidListAndQueue+0x5c>)
 8002df2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002df4:	2200      	movs	r2, #0
 8002df6:	210c      	movs	r1, #12
 8002df8:	2005      	movs	r0, #5
 8002dfa:	f7fe fa33 	bl	8001264 <xQueueGenericCreate>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <prvCheckForValidListAndQueue+0x54>)
 8002e02:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <prvCheckForValidListAndQueue+0x54>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <prvCheckForValidListAndQueue+0x54>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4908      	ldr	r1, [pc, #32]	; (8002e34 <prvCheckForValidListAndQueue+0x68>)
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe febe 	bl	8001b94 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002e18:	f7fe f8d8 	bl	8000fcc <vPortExitCritical>
    }
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	2000016c 	.word	0x2000016c
 8002e24:	2000013c 	.word	0x2000013c
 8002e28:	20000150 	.word	0x20000150
 8002e2c:	20000164 	.word	0x20000164
 8002e30:	20000168 	.word	0x20000168
 8002e34:	08003dec 	.word	0x08003dec

08002e38 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned to the required number of bytes. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <pvPortMalloc+0x20>
            {
                /* Byte alignment required. */
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f023 0307 	bic.w	r3, r3, #7
 8002e54:	3308      	adds	r3, #8
 8002e56:	607b      	str	r3, [r7, #4]
            }
        }
    #endif

    vTaskSuspendAll();
 8002e58:	f7ff f8bc 	bl	8001fd4 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <pvPortMalloc+0x80>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d105      	bne.n	8002e70 <pvPortMalloc+0x38>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <pvPortMalloc+0x84>)
 8002e66:	f023 0307 	bic.w	r3, r3, #7
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <pvPortMalloc+0x80>)
 8002e6e:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation. */
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <pvPortMalloc+0x88>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	f24c 72f7 	movw	r2, #51191	; 0xc7f7
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d813      	bhi.n	8002ea8 <pvPortMalloc+0x70>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <pvPortMalloc+0x88>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	441a      	add	r2, r3
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <pvPortMalloc+0x88>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d90b      	bls.n	8002ea8 <pvPortMalloc+0x70>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <pvPortMalloc+0x80>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <pvPortMalloc+0x88>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <pvPortMalloc+0x88>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a06      	ldr	r2, [pc, #24]	; (8002ec0 <pvPortMalloc+0x88>)
 8002ea6:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002ea8:	f7ff f8a2 	bl	8001ff0 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000c97c 	.word	0x2000c97c
 8002ebc:	20000180 	.word	0x20000180
 8002ec0:	2000c978 	.word	0x2000c978

08002ec4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <vPortFree+0x22>
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e7fe      	b.n	8002ee4 <vPortFree+0x20>
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ef6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ef8:	f7fd fe46 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <LoopForever+0xe>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f04:	e002      	b.n	8002f0c <LoopCopyDataInit>

08002f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0a:	3304      	adds	r3, #4

08002f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f10:	d3f9      	bcc.n	8002f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f14:	4c0a      	ldr	r4, [pc, #40]	; (8002f40 <LoopForever+0x16>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f18:	e001      	b.n	8002f1e <LoopFillZerobss>

08002f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f1c:	3204      	adds	r2, #4

08002f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f20:	d3fb      	bcc.n	8002f1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f22:	f000 ff0f 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f26:	f000 f80f 	bl	8002f48 <main>

08002f2a <LoopForever>:

LoopForever:
    b LoopForever
 8002f2a:	e7fe      	b.n	8002f2a <LoopForever>
  ldr   r0, =_estack
 8002f2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f34:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002f38:	08003e88 	.word	0x08003e88
  ldr r2, =_sbss
 8002f3c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002f40:	2000c9f0 	.word	0x2000c9f0

08002f44 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f44:	e7fe      	b.n	8002f44 <ADC3_IRQHandler>
	...

08002f48 <main>:
uint16_t coeff_a[] = {0x8d83,0x2959,0xff57};
uint16_t coeff_b[] = {0x06c2,0x0d83,0x06c2};
uint8_t coeff_gain = 2;

int main(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af06      	add	r7, sp, #24
	InitRCC();
 8002f4e:	f000 f93d 	bl	80031cc <InitRCC>
	InitLedGPIO();
 8002f52:	f000 fa37 	bl	80033c4 <InitLedGPIO>
	InitUSART1();
 8002f56:	f000 fb83 	bl	8003660 <InitUSART1>
	InitDMAusart1();
 8002f5a:	f000 fbf9 	bl	8003750 <InitDMAusart1>
	InitFmac();
 8002f5e:	f000 fd13 	bl	8003988 <InitFmac>
	WriteFmacIirCoefficients(coeff_a, coeff_b, 0x00, sizeof(coeff_a), sizeof(coeff_b));
 8002f62:	2306      	movs	r3, #6
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2306      	movs	r3, #6
 8002f68:	2200      	movs	r2, #0
 8002f6a:	4925      	ldr	r1, [pc, #148]	; (8003000 <main+0xb8>)
 8002f6c:	4825      	ldr	r0, [pc, #148]	; (8003004 <main+0xbc>)
 8002f6e:	f000 fe73 	bl	8003c58 <WriteFmacIirCoefficients>
	SelectFmacIir(0x00, 0x08, 0x00, 0x00, sizeof(coeff_a), sizeof(coeff_b), 0x00, 0x04, 0x00, coeff_gain);
 8002f72:	4b25      	ldr	r3, [pc, #148]	; (8003008 <main+0xc0>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	9305      	str	r3, [sp, #20]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	9304      	str	r3, [sp, #16]
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	9303      	str	r3, [sp, #12]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9302      	str	r3, [sp, #8]
 8002f84:	2306      	movs	r3, #6
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2306      	movs	r3, #6
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2108      	movs	r1, #8
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 fe24 	bl	8003be0 <SelectFmacIir>
	InitOpamp1();
 8002f98:	f7fd fa5e 	bl	8000458 <InitOpamp1>
	InitOpamp2();
 8002f9c:	f7fd fb82 	bl	80006a4 <InitOpamp2>
	InitOpamp3();
 8002fa0:	f7fd fca6 	bl	80008f0 <InitOpamp3>
	InitVrefbuf();
 8002fa4:	f7fd fdc6 	bl	8000b34 <InitVrefbuf>
	InitADC12();
 8002fa8:	f7fd f98a 	bl	80002c0 <InitADC12>

	xTaskCreate(vTaskLED, "LED", 128, 0 , 1, &TaskLEDHandle);
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <main+0xc4>)
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2280      	movs	r2, #128	; 0x80
 8002fb8:	4915      	ldr	r1, [pc, #84]	; (8003010 <main+0xc8>)
 8002fba:	4816      	ldr	r0, [pc, #88]	; (8003014 <main+0xcc>)
 8002fbc:	f7fe fe46 	bl	8001c4c <xTaskCreate>
	xTaskCreate(vTaskSendUSART, "SendUSART", 2048, 0 , 1, &TaskSendUSARTHandle);
 8002fc0:	4b15      	ldr	r3, [pc, #84]	; (8003018 <main+0xd0>)
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fce:	4913      	ldr	r1, [pc, #76]	; (800301c <main+0xd4>)
 8002fd0:	4813      	ldr	r0, [pc, #76]	; (8003020 <main+0xd8>)
 8002fd2:	f7fe fe3b 	bl	8001c4c <xTaskCreate>

	SendDataADC = xQueueCreate(512, sizeof(uint16_t));
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2102      	movs	r1, #2
 8002fda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002fde:	f7fe f941 	bl	8001264 <xQueueGenericCreate>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <main+0xdc>)
 8002fe6:	601a      	str	r2, [r3, #0]
	SendDataFMAC = xQueueCreate(512, sizeof(uint16_t));
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2102      	movs	r1, #2
 8002fec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ff0:	f7fe f938 	bl	8001264 <xQueueGenericCreate>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <main+0xe0>)
 8002ff8:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 8002ffa:	f7fe ff9f 	bl	8001f3c <vTaskStartScheduler>

    while(1)
 8002ffe:	e7fe      	b.n	8002ffe <main+0xb6>
 8003000:	2000000c 	.word	0x2000000c
 8003004:	20000004 	.word	0x20000004
 8003008:	20000012 	.word	0x20000012
 800300c:	2000c9ec 	.word	0x2000c9ec
 8003010:	08003df4 	.word	0x08003df4
 8003014:	0800302d 	.word	0x0800302d
 8003018:	2000c9e8 	.word	0x2000c9e8
 800301c:	08003df8 	.word	0x08003df8
 8003020:	08003041 	.word	0x08003041
 8003024:	2000c9e4 	.word	0x2000c9e4
 8003028:	2000c9e0 	.word	0x2000c9e0

0800302c <vTaskLED>:
    {

    }
}

void vTaskLED (void *pvParameters){
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlinkLED (GREEN, 100);
 8003034:	2164      	movs	r1, #100	; 0x64
 8003036:	2005      	movs	r0, #5
 8003038:	f000 fae0 	bl	80035fc <BlinkLED>
 800303c:	e7fa      	b.n	8003034 <vTaskLED+0x8>
	...

08003040 <vTaskSendUSART>:
	}
}


void vTaskSendUSART(void *pvParameters){
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	//static char VoltageStr[4], TemperatureStr[4];

	while(1)
	{

		if (uxQueueMessagesWaiting(SendDataADC) != 0)
 8003048:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <vTaskSendUSART+0xc8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fc82 	bl	8001956 <uxQueueMessagesWaiting>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f7      	beq.n	8003048 <vTaskSendUSART+0x8>
		{
			SetLED (RED, OFF);
 8003058:	2100      	movs	r1, #0
 800305a:	200f      	movs	r0, #15
 800305c:	f000 fa08 	bl	8003470 <SetLED>

			xAdcStatus = xQueueReceiveFromISR(SendDataADC, &adcResult, 0);
 8003060:	4b29      	ldr	r3, [pc, #164]	; (8003108 <vTaskSendUSART+0xc8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f107 010e 	add.w	r1, r7, #14
 8003068:	2200      	movs	r2, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fbe8 	bl	8001840 <xQueueReceiveFromISR>
 8003070:	6178      	str	r0, [r7, #20]
			if (xAdcStatus == pdPASS) {
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d115      	bne.n	80030a4 <vTaskSendUSART+0x64>
				//voltage = adcCoeff*((float)(adcResult));
				//temperature = ((voltage - t0Voltage)/TempCoeff);
				ToggleLED(YELLOW);
 8003078:	2009      	movs	r0, #9
 800307a:	f000 fa83 	bl	8003584 <ToggleLED>
				WriteStrDMAusart1("Unfiltered: ");
 800307e:	4823      	ldr	r0, [pc, #140]	; (800310c <vTaskSendUSART+0xcc>)
 8003080:	f000 fbe6 	bl	8003850 <WriteStrDMAusart1>
				WriteStrDMAusart1(UtoaBuiltinDiv(adcResult, adcResultStr));
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	4922      	ldr	r1, [pc, #136]	; (8003110 <vTaskSendUSART+0xd0>)
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fe27 	bl	8003cdc <UtoaBuiltinDiv>
 800308e:	4603      	mov	r3, r0
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fbdd 	bl	8003850 <WriteStrDMAusart1>
				WriteStrDMAusart1(" mV");
				WriteStrDMAusart1(" Temperature: ");
				WriteStrDMAusart1(UtoaBuiltinDiv((uint16_t)(temperature), TemperatureStr));
				WriteStrDMAusart1(" C");
				WriteStrDMAusart1("\r\n"); */
				ToggleLED(YELLOW);
 8003096:	2009      	movs	r0, #9
 8003098:	f000 fa74 	bl	8003584 <ToggleLED>
				vTaskDelay(100);
 800309c:	2064      	movs	r0, #100	; 0x64
 800309e:	f7fe ff19 	bl	8001ed4 <vTaskDelay>
 80030a2:	e006      	b.n	80030b2 <vTaskSendUSART+0x72>

			}
			else
			{
				WriteStrDMAusart1("Could not receive from the ADC queue.\r\n");
 80030a4:	481b      	ldr	r0, [pc, #108]	; (8003114 <vTaskSendUSART+0xd4>)
 80030a6:	f000 fbd3 	bl	8003850 <WriteStrDMAusart1>
				SetLED (RED, ON);
 80030aa:	2101      	movs	r1, #1
 80030ac:	200f      	movs	r0, #15
 80030ae:	f000 f9df 	bl	8003470 <SetLED>
			}

			xFmacStatus = xQueueReceiveFromISR(SendDataFMAC, &fmacResult, 0);
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <vTaskSendUSART+0xd8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f107 010c 	add.w	r1, r7, #12
 80030ba:	2200      	movs	r2, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fbbf 	bl	8001840 <xQueueReceiveFromISR>
 80030c2:	6138      	str	r0, [r7, #16]
			if (xFmacStatus == pdPASS) {
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d115      	bne.n	80030f6 <vTaskSendUSART+0xb6>
				ToggleLED(YELLOW);
 80030ca:	2009      	movs	r0, #9
 80030cc:	f000 fa5a 	bl	8003584 <ToggleLED>
				WriteStrDMAusart1("Filtered: ");
 80030d0:	4812      	ldr	r0, [pc, #72]	; (800311c <vTaskSendUSART+0xdc>)
 80030d2:	f000 fbbd 	bl	8003850 <WriteStrDMAusart1>
				WriteStrDMAusart1(UtoaBuiltinDiv(fmacResult, fmacResultStr));
 80030d6:	89bb      	ldrh	r3, [r7, #12]
 80030d8:	4911      	ldr	r1, [pc, #68]	; (8003120 <vTaskSendUSART+0xe0>)
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fdfe 	bl	8003cdc <UtoaBuiltinDiv>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fbb4 	bl	8003850 <WriteStrDMAusart1>
				ToggleLED(YELLOW);
 80030e8:	2009      	movs	r0, #9
 80030ea:	f000 fa4b 	bl	8003584 <ToggleLED>
				vTaskDelay(100);
 80030ee:	2064      	movs	r0, #100	; 0x64
 80030f0:	f7fe fef0 	bl	8001ed4 <vTaskDelay>
 80030f4:	e7a8      	b.n	8003048 <vTaskSendUSART+0x8>
			}
			else
			{
				WriteStrDMAusart1("Could not receive from the FMAC queue.\r\n");
 80030f6:	480b      	ldr	r0, [pc, #44]	; (8003124 <vTaskSendUSART+0xe4>)
 80030f8:	f000 fbaa 	bl	8003850 <WriteStrDMAusart1>
				SetLED (RED, ON);
 80030fc:	2101      	movs	r1, #1
 80030fe:	200f      	movs	r0, #15
 8003100:	f000 f9b6 	bl	8003470 <SetLED>
		if (uxQueueMessagesWaiting(SendDataADC) != 0)
 8003104:	e7a0      	b.n	8003048 <vTaskSendUSART+0x8>
 8003106:	bf00      	nop
 8003108:	2000c9e4 	.word	0x2000c9e4
 800310c:	08003e04 	.word	0x08003e04
 8003110:	2000c980 	.word	0x2000c980
 8003114:	08003e14 	.word	0x08003e14
 8003118:	2000c9e0 	.word	0x2000c9e0
 800311c:	08003e3c 	.word	0x08003e3c
 8003120:	2000c984 	.word	0x2000c984
 8003124:	08003e48 	.word	0x08003e48

08003128 <ADC1_2_IRQHandler>:
		}
	}
}

void ADC1_2_IRQHandler(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
	uint16_t temp;

	if (ADC1->ISR & ADC_ISR_JEOS)
 800312e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <ADC1_2_IRQHandler+0x4c>
	{
		ADC1->ISR |= ADC_ISR_JEOS;
 800313c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800314a:	6013      	str	r3, [r2, #0]
		temp = (ADC1 -> JDR1);
 800314c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003154:	b29b      	uxth	r3, r3
 8003156:	80fb      	strh	r3, [r7, #6]
		xQueueSendToBackFromISR(SendDataADC, &temp, 0);
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <ADC1_2_IRQHandler+0x54>)
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	1db9      	adds	r1, r7, #6
 800315e:	2300      	movs	r3, #0
 8003160:	2200      	movs	r2, #0
 8003162:	f7fe f9eb 	bl	800153c <xQueueGenericSendFromISR>
		WriteFmacData(temp);
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fcff 	bl	8003b6c <WriteFmacData>
		ToggleLED(WHITE);
 800316e:	200d      	movs	r0, #13
 8003170:	f000 fa08 	bl	8003584 <ToggleLED>
	}
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	2000c9e4 	.word	0x2000c9e4

08003180 <FMAC_IRQHandler>:

void FMAC_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	static uint16_t temp;

	if (FMAC -> SR & FMAC_SR_YEMPTY)
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <FMAC_IRQHandler+0x40>)
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d014      	beq.n	80031ba <FMAC_IRQHandler+0x3a>
	{
		FMAC -> SR &= ~FMAC_SR_YEMPTY;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <FMAC_IRQHandler+0x40>)
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <FMAC_IRQHandler+0x40>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6153      	str	r3, [r2, #20]
		temp = (FMAC -> RDATA);
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <FMAC_IRQHandler+0x40>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <FMAC_IRQHandler+0x44>)
 80031a4:	801a      	strh	r2, [r3, #0]
		xQueueSendToBackFromISR(SendDataFMAC, &temp, 0);
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <FMAC_IRQHandler+0x48>)
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	2300      	movs	r3, #0
 80031ac:	2200      	movs	r2, #0
 80031ae:	4905      	ldr	r1, [pc, #20]	; (80031c4 <FMAC_IRQHandler+0x44>)
 80031b0:	f7fe f9c4 	bl	800153c <xQueueGenericSendFromISR>
		ToggleLED(BLUE);
 80031b4:	200e      	movs	r0, #14
 80031b6:	f000 f9e5 	bl	8003584 <ToggleLED>
	}
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40021400 	.word	0x40021400
 80031c4:	2000c988 	.word	0x2000c988
 80031c8:	2000c9e0 	.word	0x2000c9e0

080031cc <InitRCC>:

#include "sysinit.h"

/********************************************* Used functions ********************************************/

void InitRCC (void){
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
	uint8_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 80031d2:	2300      	movs	r3, #0
 80031d4:	71fb      	strb	r3, [r7, #7]

	PWR		-> CR1			|= PWR_CR1_VOS_0;							// Ensure range 1
 80031d6:	4b6d      	ldr	r3, [pc, #436]	; (800338c <InitRCC+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a6c      	ldr	r2, [pc, #432]	; (800338c <InitRCC+0x1c0>)
 80031dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e0:	6013      	str	r3, [r2, #0]
	PWR		-> CR5			&= ~PWR_CR5_R1MODE;							// Range 1 from normal to boost mode
 80031e2:	4b6a      	ldr	r3, [pc, #424]	; (800338c <InitRCC+0x1c0>)
 80031e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e8:	4a68      	ldr	r2, [pc, #416]	; (800338c <InitRCC+0x1c0>)
 80031ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	RCC		->CR			|= ((uint32_t)RCC_CR_HSEON); 				// Enable HSE
 80031f2:	4b67      	ldr	r3, [pc, #412]	; (8003390 <InitRCC+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a66      	ldr	r2, [pc, #408]	; (8003390 <InitRCC+0x1c4>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));									// Ready to start HSE
 80031fe:	bf00      	nop
 8003200:	4b63      	ldr	r3, [pc, #396]	; (8003390 <InitRCC+0x1c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f9      	beq.n	8003200 <InitRCC+0x34>

	RCC		-> CR			|= RCC_CR_CSSON;
 800320c:	4b60      	ldr	r3, [pc, #384]	; (8003390 <InitRCC+0x1c4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a5f      	ldr	r2, [pc, #380]	; (8003390 <InitRCC+0x1c4>)
 8003212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003216:	6013      	str	r3, [r2, #0]

	FLASH	-> ACR			|= FLASH_ACR_PRFTEN;
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <InitRCC+0x1c8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a5d      	ldr	r2, [pc, #372]	; (8003394 <InitRCC+0x1c8>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]
	FLASH	-> ACR			|= FLASH_ACR_LATENCY_4WS;					// See table 9
 8003224:	4b5b      	ldr	r3, [pc, #364]	; (8003394 <InitRCC+0x1c8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5a      	ldr	r2, [pc, #360]	; (8003394 <InitRCC+0x1c8>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6013      	str	r3, [r2, #0]

	RCC		-> CFGR			|= RCC_CFGR_HPRE_DIV1;						// AHB = SYSCLK/1
 8003230:	4b57      	ldr	r3, [pc, #348]	; (8003390 <InitRCC+0x1c4>)
 8003232:	4a57      	ldr	r2, [pc, #348]	; (8003390 <InitRCC+0x1c4>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_PPRE1_DIV1;						// APB1 = HCLK/1
 8003238:	4b55      	ldr	r3, [pc, #340]	; (8003390 <InitRCC+0x1c4>)
 800323a:	4a55      	ldr	r2, [pc, #340]	; (8003390 <InitRCC+0x1c4>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_PPRE2_DIV1;						// APB2 = HCLK/1
 8003240:	4b53      	ldr	r3, [pc, #332]	; (8003390 <InitRCC+0x1c4>)
 8003242:	4a53      	ldr	r2, [pc, #332]	; (8003390 <InitRCC+0x1c4>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	6093      	str	r3, [r2, #8]

	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLPEN;						// clear PLLPEN bits
 8003248:	4b51      	ldr	r3, [pc, #324]	; (8003390 <InitRCC+0x1c4>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a50      	ldr	r2, [pc, #320]	; (8003390 <InitRCC+0x1c4>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLP;						// clear PLLP bits
 8003254:	4b4e      	ldr	r3, [pc, #312]	; (8003390 <InitRCC+0x1c4>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a4d      	ldr	r2, [pc, #308]	; (8003390 <InitRCC+0x1c4>)
 800325a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800325e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLQEN;						// clear PLLQEN bits
 8003260:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <InitRCC+0x1c4>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a4a      	ldr	r2, [pc, #296]	; (8003390 <InitRCC+0x1c4>)
 8003266:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800326a:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLQ;						// clear PLLQ bits
 800326c:	4b48      	ldr	r3, [pc, #288]	; (8003390 <InitRCC+0x1c4>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a47      	ldr	r2, [pc, #284]	; (8003390 <InitRCC+0x1c4>)
 8003272:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003276:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLREN;						// clear PLLREN bits
 8003278:	4b45      	ldr	r3, [pc, #276]	; (8003390 <InitRCC+0x1c4>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a44      	ldr	r2, [pc, #272]	; (8003390 <InitRCC+0x1c4>)
 800327e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLR;						// clear PLLR bits
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <InitRCC+0x1c4>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a41      	ldr	r2, [pc, #260]	; (8003390 <InitRCC+0x1c4>)
 800328a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800328e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLN;						// clear PLLN bits
 8003290:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <InitRCC+0x1c4>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a3e      	ldr	r2, [pc, #248]	; (8003390 <InitRCC+0x1c4>)
 8003296:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800329a:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLM_0;						// clear PLLM bits
 800329c:	4b3c      	ldr	r3, [pc, #240]	; (8003390 <InitRCC+0x1c4>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <InitRCC+0x1c4>)
 80032a2:	f023 0310 	bic.w	r3, r3, #16
 80032a6:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLSRC;               		// clear PLLSRC bits
 80032a8:	4b39      	ldr	r3, [pc, #228]	; (8003390 <InitRCC+0x1c4>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a38      	ldr	r2, [pc, #224]	; (8003390 <InitRCC+0x1c4>)
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLSRC_HSE; 					// source HSE = 8MHz
 80032b4:	4b36      	ldr	r3, [pc, #216]	; (8003390 <InitRCC+0x1c4>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a35      	ldr	r2, [pc, #212]	; (8003390 <InitRCC+0x1c4>)
 80032ba:	f043 0303 	orr.w	r3, r3, #3
 80032be:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLM_0; 					// PLLM = HSE/1 = 8 MHz
 80032c0:	4b33      	ldr	r3, [pc, #204]	; (8003390 <InitRCC+0x1c4>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a32      	ldr	r2, [pc, #200]	; (8003390 <InitRCC+0x1c4>)
 80032c6:	f023 0310 	bic.w	r3, r3, #16
 80032ca:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= 0x29UL << RCC_PLLCFGR_PLLN_Pos; 			// PLLN = PLLM*42 = 336 MHz
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <InitRCC+0x1c4>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	; (8003390 <InitRCC+0x1c4>)
 80032d2:	f443 5324 	orr.w	r3, r3, #10496	; 0x2900
 80032d6:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLR; 						// PLLR = PLLN/2 = 168 MHz
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <InitRCC+0x1c4>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <InitRCC+0x1c4>)
 80032de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032e2:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLREN;
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <InitRCC+0x1c4>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <InitRCC+0x1c4>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLSRC; 						//HSE clock selected as PLL clock entry
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <InitRCC+0x1c4>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a26      	ldr	r2, [pc, #152]	; (8003390 <InitRCC+0x1c4>)
 80032f6:	f043 0303 	orr.w	r3, r3, #3
 80032fa:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= 0x8UL << RCC_PLLCFGR_PLLQ_Pos;			// PLLQ = PLLN/8 = 42 MHz (for FD CAN)
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <InitRCC+0x1c4>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	4a23      	ldr	r2, [pc, #140]	; (8003390 <InitRCC+0x1c4>)
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003306:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLQEN;
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <InitRCC+0x1c4>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a20      	ldr	r2, [pc, #128]	; (8003390 <InitRCC+0x1c4>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003312:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= 0x8UL << RCC_PLLCFGR_PLLPDIV_Pos;		// PLLP = PLLN/6 = 56 MHz (for ADC)
 8003314:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <InitRCC+0x1c4>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <InitRCC+0x1c4>)
 800331a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800331e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLPEN;
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <InitRCC+0x1c4>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <InitRCC+0x1c4>)
 8003326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332a:	60d3      	str	r3, [r2, #12]

	RCC		-> CR			|= RCC_CR_PLLON;                      		// enable PLL
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <InitRCC+0x1c4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <InitRCC+0x1c4>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {}     						// wait till PLL is ready
 8003338:	bf00      	nop
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <InitRCC+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f9      	beq.n	800333a <InitRCC+0x16e>

	RCC		-> CFGR			&= ~RCC_CFGR_SW;                   			// clear SW bits
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <InitRCC+0x1c4>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <InitRCC+0x1c4>)
 800334c:	f023 0303 	bic.w	r3, r3, #3
 8003350:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_SW_PLL;               			// select source SYSCLK = PLL
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <InitRCC+0x1c4>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <InitRCC+0x1c4>)
 8003358:	f043 0303 	orr.w	r3, r3, #3
 800335c:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS) {} 				// wait till PLL is used
 800335e:	bf00      	nop
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <InitRCC+0x1c4>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d1f9      	bne.n	8003360 <InitRCC+0x194>

	//waiting for at least 1us
	while (!(ticks == 200))
 800336c:	e002      	b.n	8003374 <InitRCC+0x1a8>
	{
		ticks++;
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	3301      	adds	r3, #1
 8003372:	71fb      	strb	r3, [r7, #7]
	while (!(ticks == 200))
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	2bc8      	cmp	r3, #200	; 0xc8
 8003378:	d1f9      	bne.n	800336e <InitRCC+0x1a2>
	}

	ticks = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	71fb      	strb	r3, [r7, #7]

}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40007000 	.word	0x40007000
 8003390:	40021000 	.word	0x40021000
 8003394:	40022000 	.word	0x40022000

08003398 <NMI_Handler>:
	FLASH -> CR &= ~FLASH_CR_PG;
}


void NMI_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
	 if (RCC -> CIFR & RCC_CIFR_CSSF)
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <NMI_Handler+0x28>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <NMI_Handler+0x1c>
	 {
		 RCC	->	CICR		|=RCC_CICR_CSSC;						//Clock security system interrupt clear
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <NMI_Handler+0x28>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <NMI_Handler+0x28>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b2:	6213      	str	r3, [r2, #32]
	 }
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000

080033c4 <InitLedGPIO>:
#include "LED.h"

/********************************************* Used functions ********************************************/


void InitLedGPIO (void){
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0

	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;		// Enable clock port B
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <InitLedGPIO+0xa0>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <InitLedGPIO+0xa0>)
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOCEN;		// Enable clock port C
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <InitLedGPIO+0xa0>)
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	4a22      	ldr	r2, [pc, #136]	; (8003464 <InitLedGPIO+0xa0>)
 80033da:	f043 0304 	orr.w	r3, r3, #4
 80033de:	64d3      	str	r3, [r2, #76]	; 0x4c

	//LED1 -- green
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE5;
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <InitLedGPIO+0xa4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <InitLedGPIO+0xa4>)
 80033e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033ea:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE5_0;		// Setting GPIO for PP output
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <InitLedGPIO+0xa4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <InitLedGPIO+0xa4>)
 80033f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]

	//LED2 -- yellow
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE9;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <InitLedGPIO+0xa4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <InitLedGPIO+0xa4>)
 80033fe:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003402:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE9_0;		// Setting GPIO for PP output
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <InitLedGPIO+0xa4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <InitLedGPIO+0xa4>)
 800340a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340e:	6013      	str	r3, [r2, #0]

	//LED3 -- white
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE13;
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <InitLedGPIO+0xa8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a15      	ldr	r2, [pc, #84]	; (800346c <InitLedGPIO+0xa8>)
 8003416:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800341a:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE13_0;	// Setting GPIO for PP output
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <InitLedGPIO+0xa8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a12      	ldr	r2, [pc, #72]	; (800346c <InitLedGPIO+0xa8>)
 8003422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003426:	6013      	str	r3, [r2, #0]

	//LED4 -- blue
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE14;
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <InitLedGPIO+0xa8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0f      	ldr	r2, [pc, #60]	; (800346c <InitLedGPIO+0xa8>)
 800342e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003432:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE14_0;	// Setting GPIO for PP output
 8003434:	4b0d      	ldr	r3, [pc, #52]	; (800346c <InitLedGPIO+0xa8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <InitLedGPIO+0xa8>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	6013      	str	r3, [r2, #0]

	//LED2 -- yellow
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE15;
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <InitLedGPIO+0xa8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a09      	ldr	r2, [pc, #36]	; (800346c <InitLedGPIO+0xa8>)
 8003446:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800344a:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE15_0;	// Setting GPIO for PP output
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <InitLedGPIO+0xa8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a06      	ldr	r2, [pc, #24]	; (800346c <InitLedGPIO+0xa8>)
 8003452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000
 8003468:	48000400 	.word	0x48000400
 800346c:	48000800 	.word	0x48000800

08003470 <SetLED>:

//Sets Led state using binary number
void SetLED (LED COLOR, LED STATE)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	460a      	mov	r2, r1
 800347a:	71fb      	strb	r3, [r7, #7]
 800347c:	4613      	mov	r3, r2
 800347e:	71bb      	strb	r3, [r7, #6]
	if ((COLOR == GREEN) && STATE == ON)
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	2b05      	cmp	r3, #5
 8003484:	d108      	bne.n	8003498 <SetLED+0x28>
 8003486:	79bb      	ldrb	r3, [r7, #6]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <SetLED+0x28>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BS5; 		// Enable LED1
 800348c:	4b3b      	ldr	r3, [pc, #236]	; (800357c <SetLED+0x10c>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a3a      	ldr	r2, [pc, #232]	; (800357c <SetLED+0x10c>)
 8003492:	f043 0320 	orr.w	r3, r3, #32
 8003496:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == GREEN) && STATE == OFF)
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d108      	bne.n	80034b0 <SetLED+0x40>
 800349e:	79bb      	ldrb	r3, [r7, #6]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <SetLED+0x40>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BR5; 		// Disable LED1
 80034a4:	4b35      	ldr	r3, [pc, #212]	; (800357c <SetLED+0x10c>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	4a34      	ldr	r2, [pc, #208]	; (800357c <SetLED+0x10c>)
 80034aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034ae:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == YELLOW) && STATE == ON)
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	2b09      	cmp	r3, #9
 80034b4:	d108      	bne.n	80034c8 <SetLED+0x58>
 80034b6:	79bb      	ldrb	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <SetLED+0x58>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BS9; 		// Enable LED2
 80034bc:	4b2f      	ldr	r3, [pc, #188]	; (800357c <SetLED+0x10c>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4a2e      	ldr	r2, [pc, #184]	; (800357c <SetLED+0x10c>)
 80034c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034c6:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == YELLOW) && STATE == OFF)
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	d108      	bne.n	80034e0 <SetLED+0x70>
 80034ce:	79bb      	ldrb	r3, [r7, #6]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <SetLED+0x70>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BR9; 		// Disable LED2
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <SetLED+0x10c>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4a28      	ldr	r2, [pc, #160]	; (800357c <SetLED+0x10c>)
 80034da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034de:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == WHITE) && STATE == ON)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b0d      	cmp	r3, #13
 80034e4:	d108      	bne.n	80034f8 <SetLED+0x88>
 80034e6:	79bb      	ldrb	r3, [r7, #6]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d105      	bne.n	80034f8 <SetLED+0x88>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS13; 	// Enable LED3
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <SetLED+0x110>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	4a23      	ldr	r2, [pc, #140]	; (8003580 <SetLED+0x110>)
 80034f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034f6:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == WHITE) && STATE == OFF)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b0d      	cmp	r3, #13
 80034fc:	d108      	bne.n	8003510 <SetLED+0xa0>
 80034fe:	79bb      	ldrb	r3, [r7, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <SetLED+0xa0>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR13; 	// Disable LED3
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <SetLED+0x110>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <SetLED+0x110>)
 800350a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800350e:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == BLUE) && STATE == ON)
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	2b0e      	cmp	r3, #14
 8003514:	d108      	bne.n	8003528 <SetLED+0xb8>
 8003516:	79bb      	ldrb	r3, [r7, #6]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <SetLED+0xb8>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS14; 	// Enable LED4
 800351c:	4b18      	ldr	r3, [pc, #96]	; (8003580 <SetLED+0x110>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <SetLED+0x110>)
 8003522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003526:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == BLUE) && STATE == OFF)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b0e      	cmp	r3, #14
 800352c:	d108      	bne.n	8003540 <SetLED+0xd0>
 800352e:	79bb      	ldrb	r3, [r7, #6]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d105      	bne.n	8003540 <SetLED+0xd0>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR14; 	// Disable LED4
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <SetLED+0x110>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	4a11      	ldr	r2, [pc, #68]	; (8003580 <SetLED+0x110>)
 800353a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800353e:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == RED) && STATE == ON)
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d108      	bne.n	8003558 <SetLED+0xe8>
 8003546:	79bb      	ldrb	r3, [r7, #6]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <SetLED+0xe8>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS15; 	// Enable LED5
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <SetLED+0x110>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <SetLED+0x110>)
 8003552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003556:	6193      	str	r3, [r2, #24]
	}
	if ((COLOR == RED) && STATE == OFF)
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	d108      	bne.n	8003570 <SetLED+0x100>
 800355e:	79bb      	ldrb	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <SetLED+0x100>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR15; 	// Disable LED5
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <SetLED+0x110>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4a05      	ldr	r2, [pc, #20]	; (8003580 <SetLED+0x110>)
 800356a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800356e:	6193      	str	r3, [r2, #24]
	}
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	48000400 	.word	0x48000400
 8003580:	48000800 	.word	0x48000800

08003584 <ToggleLED>:

void ToggleLED (LED COLOR)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
	if (COLOR == GREEN)
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d105      	bne.n	80035a0 <ToggleLED+0x1c>
	{
		GPIOB	-> ODR ^= GPIO_ODR_OD5; 					// Toggle LED1
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <ToggleLED+0x70>)
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <ToggleLED+0x70>)
 800359a:	f083 0320 	eor.w	r3, r3, #32
 800359e:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == YELLOW)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d105      	bne.n	80035b2 <ToggleLED+0x2e>
	{
		GPIOB	-> ODR ^= GPIO_ODR_OD9; 					// Toggle LED2
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <ToggleLED+0x70>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <ToggleLED+0x70>)
 80035ac:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 80035b0:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == WHITE)
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b0d      	cmp	r3, #13
 80035b6:	d105      	bne.n	80035c4 <ToggleLED+0x40>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD13; 					// Toggle LED3
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <ToggleLED+0x74>)
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <ToggleLED+0x74>)
 80035be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035c2:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == BLUE)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b0e      	cmp	r3, #14
 80035c8:	d105      	bne.n	80035d6 <ToggleLED+0x52>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD14; 					// Toggle LED4
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <ToggleLED+0x74>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <ToggleLED+0x74>)
 80035d0:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 80035d4:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == RED)
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b0f      	cmp	r3, #15
 80035da:	d105      	bne.n	80035e8 <ToggleLED+0x64>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD15; 					// Toggle LED5
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <ToggleLED+0x74>)
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <ToggleLED+0x74>)
 80035e2:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80035e6:	6153      	str	r3, [r2, #20]
	}
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	48000400 	.word	0x48000400
 80035f8:	48000800 	.word	0x48000800

080035fc <BlinkLED>:

void BlinkLED (LED COLOR, uint16_t period_ms)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	460a      	mov	r2, r1
 8003606:	71fb      	strb	r3, [r7, #7]
 8003608:	4613      	mov	r3, r2
 800360a:	80bb      	strh	r3, [r7, #4]
	ToggleLED(COLOR);
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ffb8 	bl	8003584 <ToggleLED>
	vTaskDelay(period_ms);
 8003614:	88bb      	ldrh	r3, [r7, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fc5c 	bl	8001ed4 <vTaskDelay>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <__NVIC_EnableIRQ>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	2b00      	cmp	r3, #0
 8003634:	db0b      	blt.n	800364e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	4907      	ldr	r1, [pc, #28]	; (800365c <__NVIC_EnableIRQ+0x38>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2001      	movs	r0, #1
 8003646:	fa00 f202 	lsl.w	r2, r0, r2
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000e100 	.word	0xe000e100

08003660 <InitUSART1>:

#include "UART.h"

/********************************************* Used functions ********************************************/

void InitUSART1 (void){
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0

	RCC		-> APB2ENR	|= RCC_APB2ENR_USART1EN;
 8003664:	4b37      	ldr	r3, [pc, #220]	; (8003744 <InitUSART1+0xe4>)
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	4a36      	ldr	r2, [pc, #216]	; (8003744 <InitUSART1+0xe4>)
 800366a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800366e:	6613      	str	r3, [r2, #96]	; 0x60

	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 8003670:	4b34      	ldr	r3, [pc, #208]	; (8003744 <InitUSART1+0xe4>)
 8003672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003674:	4a33      	ldr	r2, [pc, #204]	; (8003744 <InitUSART1+0xe4>)
 8003676:	f043 0302 	orr.w	r3, r3, #2
 800367a:	64d3      	str	r3, [r2, #76]	; 0x4c

	//TX
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE6;
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <InitUSART1+0xe8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a31      	ldr	r2, [pc, #196]	; (8003748 <InitUSART1+0xe8>)
 8003682:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003686:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE6_1;
 8003688:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <InitUSART1+0xe8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2e      	ldr	r2, [pc, #184]	; (8003748 <InitUSART1+0xe8>)
 800368e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003692:	6013      	str	r3, [r2, #0]

	GPIOB	-> OTYPER	&= ~GPIO_OTYPER_OT_6;
 8003694:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <InitUSART1+0xe8>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <InitUSART1+0xe8>)
 800369a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369e:	6053      	str	r3, [r2, #4]

	GPIOB	-> PUPDR	&= ~GPIO_PUPDR_PUPD6;
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <InitUSART1+0xe8>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <InitUSART1+0xe8>)
 80036a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036aa:	60d3      	str	r3, [r2, #12]
	GPIOB	-> PUPDR	|= GPIO_PUPDR_PUPD9_0;
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <InitUSART1+0xe8>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <InitUSART1+0xe8>)
 80036b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036b6:	60d3      	str	r3, [r2, #12]

	GPIOB	-> OSPEEDR	|= GPIO_OSPEEDR_OSPEED8;
 80036b8:	4b23      	ldr	r3, [pc, #140]	; (8003748 <InitUSART1+0xe8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a22      	ldr	r2, [pc, #136]	; (8003748 <InitUSART1+0xe8>)
 80036be:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80036c2:	6093      	str	r3, [r2, #8]

	GPIOB	-> AFR[0]	|= 0x07 << (4*6);
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <InitUSART1+0xe8>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <InitUSART1+0xe8>)
 80036ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036ce:	6213      	str	r3, [r2, #32]

	//RX
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE7;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <InitUSART1+0xe8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <InitUSART1+0xe8>)
 80036d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036da:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE7_1;
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <InitUSART1+0xe8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <InitUSART1+0xe8>)
 80036e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e6:	6013      	str	r3, [r2, #0]

	GPIOB	-> PUPDR	&= ~GPIO_PUPDR_PUPD7;
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <InitUSART1+0xe8>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <InitUSART1+0xe8>)
 80036ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036f2:	60d3      	str	r3, [r2, #12]

	GPIOB	-> AFR[0]	|= 0x07 << (4*7);
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <InitUSART1+0xe8>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a13      	ldr	r2, [pc, #76]	; (8003748 <InitUSART1+0xe8>)
 80036fa:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 80036fe:	6213      	str	r3, [r2, #32]

	//baudrate = 9600
	USART1	-> BRR		= 0x445C; //BRR = (fck + baudrate /2 ) / baudrate
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <InitUSART1+0xec>)
 8003702:	f244 425c 	movw	r2, #17500	; 0x445c
 8003706:	60da      	str	r2, [r3, #12]

	USART1	-> CR1		|= USART_CR1_TE;
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <InitUSART1+0xec>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0f      	ldr	r2, [pc, #60]	; (800374c <InitUSART1+0xec>)
 800370e:	f043 0308 	orr.w	r3, r3, #8
 8003712:	6013      	str	r3, [r2, #0]
	USART1	-> CR1		|= USART_CR1_RE;
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <InitUSART1+0xec>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0c      	ldr	r2, [pc, #48]	; (800374c <InitUSART1+0xec>)
 800371a:	f043 0304 	orr.w	r3, r3, #4
 800371e:	6013      	str	r3, [r2, #0]
	USART1	-> CR1 		|= USART_CR1_UE;
 8003720:	4b0a      	ldr	r3, [pc, #40]	; (800374c <InitUSART1+0xec>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a09      	ldr	r2, [pc, #36]	; (800374c <InitUSART1+0xec>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

	USART1	-> CR1		|= USART_CR1_RXNEIE;
 800372c:	4b07      	ldr	r3, [pc, #28]	; (800374c <InitUSART1+0xec>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a06      	ldr	r2, [pc, #24]	; (800374c <InitUSART1+0xec>)
 8003732:	f043 0320 	orr.w	r3, r3, #32
 8003736:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 8003738:	2025      	movs	r0, #37	; 0x25
 800373a:	f7ff ff73 	bl	8003624 <__NVIC_EnableIRQ>
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	48000400 	.word	0x48000400
 800374c:	40013800 	.word	0x40013800

08003750 <InitDMAusart1>:

	USART1	->TDR 		= data;
}

void InitDMAusart1 (void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
	char init[]			= "DMA1 init";
 8003756:	4a37      	ldr	r2, [pc, #220]	; (8003834 <InitDMAusart1+0xe4>)
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	ca07      	ldmia	r2, {r0, r1, r2}
 800375c:	c303      	stmia	r3!, {r0, r1}
 800375e:	801a      	strh	r2, [r3, #0]

	RCC					-> AHB1ENR	|= RCC_AHB1ENR_DMA1EN;
 8003760:	4b35      	ldr	r3, [pc, #212]	; (8003838 <InitDMAusart1+0xe8>)
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	4a34      	ldr	r2, [pc, #208]	; (8003838 <InitDMAusart1+0xe8>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6493      	str	r3, [r2, #72]	; 0x48
	RCC					-> AHB1ENR	|= RCC_AHB1ENR_DMAMUX1EN;
 800376c:	4b32      	ldr	r3, [pc, #200]	; (8003838 <InitDMAusart1+0xe8>)
 800376e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003770:	4a31      	ldr	r2, [pc, #196]	; (8003838 <InitDMAusart1+0xe8>)
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	6493      	str	r3, [r2, #72]	; 0x48

	DMA1_Channel7		-> CCR		&= ~DMA_CCR_EN;
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <InitDMAusart1+0xec>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2f      	ldr	r2, [pc, #188]	; (800383c <InitDMAusart1+0xec>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	6013      	str	r3, [r2, #0]

	DMAMUX1_Channel6	-> CCR		&= ~DMAMUX_CxCR_DMAREQ_ID;
 8003784:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <InitDMAusart1+0xf0>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <InitDMAusart1+0xf0>)
 800378a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800378e:	6013      	str	r3, [r2, #0]
	DMAMUX1_Channel6	-> CCR		|= 0x19UL << DMAMUX_CxCR_DMAREQ_ID_Pos; // USART1_TX
 8003790:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <InitDMAusart1+0xf0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <InitDMAusart1+0xf0>)
 8003796:	f043 0319 	orr.w	r3, r3, #25
 800379a:	6013      	str	r3, [r2, #0]

	DMA1_Channel7		-> CPAR		= (uint32_t)&USART1->TDR;
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <InitDMAusart1+0xec>)
 800379e:	4a29      	ldr	r2, [pc, #164]	; (8003844 <InitDMAusart1+0xf4>)
 80037a0:	609a      	str	r2, [r3, #8]
	DMA1_Channel7		-> CMAR		= (uint32_t)&init;
 80037a2:	4a26      	ldr	r2, [pc, #152]	; (800383c <InitDMAusart1+0xec>)
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7		-> CNDTR	= sizeof(init)-1;						// Size of buffer
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <InitDMAusart1+0xec>)
 80037aa:	2209      	movs	r2, #9
 80037ac:	605a      	str	r2, [r3, #4]

	DMA1_Channel7		-> CCR		&= ~DMA_CCR_CIRC;						// Disable cycle mode
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <InitDMAusart1+0xec>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <InitDMAusart1+0xec>)
 80037b4:	f023 0320 	bic.w	r3, r3, #32
 80037b8:	6013      	str	r3, [r2, #0]
	DMA1_Channel7		-> CCR		&= ~DMA_CCR_PINC;						// Disable increment pointer peripheral
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <InitDMAusart1+0xec>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <InitDMAusart1+0xec>)
 80037c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c4:	6013      	str	r3, [r2, #0]

	DMA1_Channel7		-> CCR		&= ~DMA_CCR_PSIZE;						// Size of data peripheral = 8 bit
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <InitDMAusart1+0xec>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <InitDMAusart1+0xec>)
 80037cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d0:	6013      	str	r3, [r2, #0]
	DMA1_Channel7		-> CCR		&= ~DMA_CCR_MSIZE;						// Size of data memory = 8 bit
 80037d2:	4b1a      	ldr	r3, [pc, #104]	; (800383c <InitDMAusart1+0xec>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <InitDMAusart1+0xec>)
 80037d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037dc:	6013      	str	r3, [r2, #0]

	DMA1_Channel7		-> CCR		|= DMA_CCR_DIR;							// Read: memory -> peripheral
 80037de:	4b17      	ldr	r3, [pc, #92]	; (800383c <InitDMAusart1+0xec>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a16      	ldr	r2, [pc, #88]	; (800383c <InitDMAusart1+0xec>)
 80037e4:	f043 0310 	orr.w	r3, r3, #16
 80037e8:	6013      	str	r3, [r2, #0]
	DMA1_Channel7		-> CCR		|= DMA_CCR_MINC;						// Memory increment mode enabled
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <InitDMAusart1+0xec>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <InitDMAusart1+0xec>)
 80037f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f4:	6013      	str	r3, [r2, #0]
	DMA1_Channel7		-> CCR		&= ~DMA_CCR_PINC;
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <InitDMAusart1+0xec>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <InitDMAusart1+0xec>)
 80037fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003800:	6013      	str	r3, [r2, #0]

	DMA1				-> IFCR		|= DMA_IFCR_CGIF7;
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <InitDMAusart1+0xf8>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a10      	ldr	r2, [pc, #64]	; (8003848 <InitDMAusart1+0xf8>)
 8003808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380c:	6053      	str	r3, [r2, #4]
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800380e:	2011      	movs	r0, #17
 8003810:	f7ff ff08 	bl	8003624 <__NVIC_EnableIRQ>
	DMA1_Channel7		-> CCR		|= DMA_CCR_TCIE;						// Transfer complete interrupt enable
 8003814:	4b09      	ldr	r3, [pc, #36]	; (800383c <InitDMAusart1+0xec>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a08      	ldr	r2, [pc, #32]	; (800383c <InitDMAusart1+0xec>)
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	6013      	str	r3, [r2, #0]

	USART1				-> CR3		|= USART_CR3_DMAT;						// Enable DMA for USART1
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <InitDMAusart1+0xfc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a09      	ldr	r2, [pc, #36]	; (800384c <InitDMAusart1+0xfc>)
 8003826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382a:	6093      	str	r3, [r2, #8]
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	08003e74 	.word	0x08003e74
 8003838:	40021000 	.word	0x40021000
 800383c:	40020080 	.word	0x40020080
 8003840:	40020818 	.word	0x40020818
 8003844:	40013828 	.word	0x40013828
 8003848:	40020000 	.word	0x40020000
 800384c:	40013800 	.word	0x40013800

08003850 <WriteStrDMAusart1>:

void WriteStrDMAusart1 (char *str)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	while(!(USART1->ISR & USART_ISR_TC));
 8003858:	bf00      	nop
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <WriteStrDMAusart1+0x54>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f9      	beq.n	800385a <WriteStrDMAusart1+0xa>

	DMA1_Channel7		-> CCR		&= ~DMA_CCR_EN;
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <WriteStrDMAusart1+0x58>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <WriteStrDMAusart1+0x58>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6013      	str	r3, [r2, #0]

	DMA1_Channel7		-> CMAR		= (uint32_t)str;
 8003872:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <WriteStrDMAusart1+0x58>)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7		-> CNDTR	= strlen(str);
 8003878:	4c0b      	ldr	r4, [pc, #44]	; (80038a8 <WriteStrDMAusart1+0x58>)
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fc fcd0 	bl	8000220 <strlen>
 8003880:	4603      	mov	r3, r0
 8003882:	6063      	str	r3, [r4, #4]

	DMA1_Channel7		-> CCR		|= DMA_CCR_EN;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <WriteStrDMAusart1+0x58>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <WriteStrDMAusart1+0x58>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6013      	str	r3, [r2, #0]

	USART1				-> ISR		&= ~USART_ISR_TC;
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <WriteStrDMAusart1+0x54>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4a03      	ldr	r2, [pc, #12]	; (80038a4 <WriteStrDMAusart1+0x54>)
 8003896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389a:	61d3      	str	r3, [r2, #28]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd90      	pop	{r4, r7, pc}
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40020080 	.word	0x40020080

080038ac <USART1_IRQHandler>:

	USART1				-> ISR		&= ~USART_ISR_TC;
}

void USART1_IRQHandler (void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	if (USART1->ISR & USART_CR1_RXNEIE)
 80038b0:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <USART1_IRQHandler+0x28>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <USART1_IRQHandler+0x1c>
	{
		USART1	-> ISR &= ~USART_CR1_RXNEIE;
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <USART1_IRQHandler+0x28>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <USART1_IRQHandler+0x28>)
 80038c2:	f023 0320 	bic.w	r3, r3, #32
 80038c6:	61d3      	str	r3, [r2, #28]
	}
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40013800 	.word	0x40013800

080038d8 <DMA1_CH7_IRQHandler>:

void DMA1_CH7_IRQHandler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
	DMA1				-> IFCR		|= DMA_IFCR_CGIF7;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <DMA1_CH7_IRQHandler+0x1c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <DMA1_CH7_IRQHandler+0x1c>)
 80038e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e6:	6053      	str	r3, [r2, #4]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40020000 	.word	0x40020000

080038f8 <__NVIC_EnableIRQ>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	2b00      	cmp	r3, #0
 8003908:	db0b      	blt.n	8003922 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	4907      	ldr	r1, [pc, #28]	; (8003930 <__NVIC_EnableIRQ+0x38>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2001      	movs	r0, #1
 800391a:	fa00 f202 	lsl.w	r2, r0, r2
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000e100 	.word	0xe000e100

08003934 <__NVIC_SetPriority>:
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	6039      	str	r1, [r7, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	2b00      	cmp	r3, #0
 8003946:	db0a      	blt.n	800395e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	490c      	ldr	r1, [pc, #48]	; (8003980 <__NVIC_SetPriority+0x4c>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	0112      	lsls	r2, r2, #4
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	440b      	add	r3, r1
 8003958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800395c:	e00a      	b.n	8003974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4908      	ldr	r1, [pc, #32]	; (8003984 <__NVIC_SetPriority+0x50>)
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	3b04      	subs	r3, #4
 800396c:	0112      	lsls	r2, r2, #4
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	440b      	add	r3, r1
 8003972:	761a      	strb	r2, [r3, #24]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000e100 	.word	0xe000e100
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <InitFmac>:
#include "fmac.h"

/**************************************** Configuration functions ***************************************/

void InitFmac(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	RCC		-> AHB1ENR		|= RCC_AHB1ENR_FMACEN;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <InitFmac+0x30>)
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <InitFmac+0x30>)
 8003992:	f043 0310 	orr.w	r3, r3, #16
 8003996:	6493      	str	r3, [r2, #72]	; 0x48

	FMAC	-> CR			|= FMAC_CR_RIEN;
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <InitFmac+0x34>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <InitFmac+0x34>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6113      	str	r3, [r2, #16]

	NVIC_EnableIRQ(FMAC_IRQn);
 80039a4:	2065      	movs	r0, #101	; 0x65
 80039a6:	f7ff ffa7 	bl	80038f8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(FMAC_IRQn, 5);
 80039aa:	2105      	movs	r1, #5
 80039ac:	2065      	movs	r0, #101	; 0x65
 80039ae:	f7ff ffc1 	bl	8003934 <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40021400 	.word	0x40021400

080039c0 <ConfigFmacX1buff>:

//threshold is free space 2^FULL_WM watermark
void ConfigFmacX1buff (uint8_t offset, uint8_t len, uint8_t threshold)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
 80039ca:	460b      	mov	r3, r1
 80039cc:	71bb      	strb	r3, [r7, #6]
 80039ce:	4613      	mov	r3, r2
 80039d0:	717b      	strb	r3, [r7, #5]
	FMAC	-> X1BUFCFG		&= ~FMAC_X1BUFCFG_X1_BASE;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039d8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039dc:	6013      	str	r3, [r2, #0]
	FMAC	-> X1BUFCFG		&= ~FMAC_X1BUFCFG_X1_BUF_SIZE;
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e8:	6013      	str	r3, [r2, #0]
	FMAC	-> X1BUFCFG		&= ~FMAC_X1BUFCFG_FULL_WM;
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039f0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80039f4:	6013      	str	r3, [r2, #0]

	FMAC	-> X1BUFCFG		|= (offset << FMAC_X1BUFCFG_X1_BASE_Pos);
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	490c      	ldr	r1, [pc, #48]	; (8003a30 <ConfigFmacX1buff+0x70>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]
	FMAC	-> X1BUFCFG		|= (len << FMAC_X1BUFCFG_X1_BUF_SIZE_Pos);
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <ConfigFmacX1buff+0x70>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	79ba      	ldrb	r2, [r7, #6]
 8003a08:	0212      	lsls	r2, r2, #8
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <ConfigFmacX1buff+0x70>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6013      	str	r3, [r2, #0]
	FMAC	-> X1BUFCFG		|= (threshold << FMAC_X1BUFCFG_FULL_WM_Pos);
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <ConfigFmacX1buff+0x70>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	797a      	ldrb	r2, [r7, #5]
 8003a18:	0612      	lsls	r2, r2, #24
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <ConfigFmacX1buff+0x70>)
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	6013      	str	r3, [r2, #0]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40021400 	.word	0x40021400

08003a34 <ConfigFmacX2Buff>:

void ConfigFmacX2Buff (uint8_t offset, uint8_t len)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	71fb      	strb	r3, [r7, #7]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71bb      	strb	r3, [r7, #6]
	FMAC	-> X2BUFCFG		&= ~FMAC_X2BUFCFG_X2_BASE;
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a4e:	6053      	str	r3, [r2, #4]
	FMAC	-> X2BUFCFG		&= ~FMAC_X2BUFCFG_X2_BUF_SIZE;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5a:	6053      	str	r3, [r2, #4]

	FMAC	-> X2BUFCFG		|= (offset << FMAC_X2BUFCFG_X2_BASE_Pos);
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	4908      	ldr	r1, [pc, #32]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]
	FMAC	-> X2BUFCFG		|= (len << FMAC_X2BUFCFG_X2_BUF_SIZE_Pos);
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	79ba      	ldrb	r2, [r7, #6]
 8003a6e:	0212      	lsls	r2, r2, #8
 8003a70:	4611      	mov	r1, r2
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <ConfigFmacX2Buff+0x50>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6053      	str	r3, [r2, #4]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40021400 	.word	0x40021400

08003a88 <ConfigFmacYBuff>:

//threshold is required data 2^FULL_WM watermark
void ConfigFmacYBuff(uint8_t offset, uint8_t len, uint8_t threshold)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
 8003a92:	460b      	mov	r3, r1
 8003a94:	71bb      	strb	r3, [r7, #6]
 8003a96:	4613      	mov	r3, r2
 8003a98:	717b      	strb	r3, [r7, #5]
	FMAC	-> YBUFCFG		&= ~FMAC_YBUFCFG_Y_BASE;
 8003a9a:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003aa0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003aa4:	6093      	str	r3, [r2, #8]
	FMAC	-> YBUFCFG		&= ~FMAC_YBUFCFG_Y_BUF_SIZE;
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab0:	6093      	str	r3, [r2, #8]
	FMAC	-> YBUFCFG		&= ~FMAC_YBUFCFG_EMPTY_WM;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4a10      	ldr	r2, [pc, #64]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003ab8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003abc:	6093      	str	r3, [r2, #8]

	FMAC	-> YBUFCFG		|= (offset << FMAC_YBUFCFG_Y_BASE_Pos);
 8003abe:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	490c      	ldr	r1, [pc, #48]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
	FMAC	-> YBUFCFG		|= (len << FMAC_YBUFCFG_Y_BUF_SIZE_Pos);
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	79ba      	ldrb	r2, [r7, #6]
 8003ad0:	0212      	lsls	r2, r2, #8
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	6093      	str	r3, [r2, #8]
	FMAC	-> YBUFCFG		|= (threshold << FMAC_YBUFCFG_EMPTY_WM_Pos);
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	797a      	ldrb	r2, [r7, #5]
 8003ae0:	0612      	lsls	r2, r2, #24
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <ConfigFmacYBuff+0x70>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6093      	str	r3, [r2, #8]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021400 	.word	0x40021400

08003afc <ConfigFmacRQP>:

void ConfigFmacRQP (uint8_t r_param, uint8_t q_param, uint8_t p_param)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
 8003b06:	460b      	mov	r3, r1
 8003b08:	71bb      	strb	r3, [r7, #6]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	717b      	strb	r3, [r7, #5]
	FMAC	-> PARAM		|= (r_param << FMAC_PARAM_R_Pos);
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <ConfigFmacRQP+0x4c>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	79fa      	ldrb	r2, [r7, #7]
 8003b14:	0412      	lsls	r2, r2, #16
 8003b16:	4611      	mov	r1, r2
 8003b18:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <ConfigFmacRQP+0x4c>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	60d3      	str	r3, [r2, #12]
	FMAC	-> PARAM		|= (q_param << FMAC_PARAM_Q_Pos);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <ConfigFmacRQP+0x4c>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	79ba      	ldrb	r2, [r7, #6]
 8003b24:	0212      	lsls	r2, r2, #8
 8003b26:	4611      	mov	r1, r2
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <ConfigFmacRQP+0x4c>)
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	60d3      	str	r3, [r2, #12]
	FMAC	-> PARAM		|= (p_param << FMAC_PARAM_P_Pos);
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <ConfigFmacRQP+0x4c>)
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	797b      	ldrb	r3, [r7, #5]
 8003b34:	4904      	ldr	r1, [pc, #16]	; (8003b48 <ConfigFmacRQP+0x4c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40021400 	.word	0x40021400

08003b4c <ExecuteFmacFunction>:

/**************************************** Execution functions ***************************************/

void ExecuteFmacFunction(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
	FMAC	-> PARAM		|= FMAC_PARAM_START;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <ExecuteFmacFunction+0x1c>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <ExecuteFmacFunction+0x1c>)
 8003b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b5a:	60d3      	str	r3, [r2, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40021400 	.word	0x40021400

08003b6c <WriteFmacData>:
{
	FMAC	-> CR			|= FMAC_CR_RESET;
}

void WriteFmacData(uint16_t data)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	80fb      	strh	r3, [r7, #6]
	FMAC	-> WDATA		|= data;
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <WriteFmacData+0x24>)
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	4904      	ldr	r1, [pc, #16]	; (8003b90 <WriteFmacData+0x24>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	618b      	str	r3, [r1, #24]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021400 	.word	0x40021400

08003b94 <SelectFmacPreloadFmacX2>:
	ExecuteFmacFunction();
}

//X2 preload is obligatory for filter coefficients
void SelectFmacPreloadFmacX2(uint8_t offset, uint8_t n_param, uint8_t m_param)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	71bb      	strb	r3, [r7, #6]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	717b      	strb	r3, [r7, #5]
	ConfigFmacX2Buff(offset, (n_param + m_param));
 8003ba6:	79ba      	ldrb	r2, [r7, #6]
 8003ba8:	797b      	ldrb	r3, [r7, #5]
 8003baa:	4413      	add	r3, r2
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ff3e 	bl	8003a34 <ConfigFmacX2Buff>
	ConfigFmacRQP (0, m_param, n_param);
 8003bb8:	79ba      	ldrb	r2, [r7, #6]
 8003bba:	797b      	ldrb	r3, [r7, #5]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f7ff ff9c 	bl	8003afc <ConfigFmacRQP>

	FMAC	-> PARAM		|= FMAC_PARAM_FUNC_LOAD_X2_BUFFER;
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <SelectFmacPreloadFmacX2+0x48>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <SelectFmacPreloadFmacX2+0x48>)
 8003bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bce:	60d3      	str	r3, [r2, #12]
	ExecuteFmacFunction();
 8003bd0:	f7ff ffbc 	bl	8003b4c <ExecuteFmacFunction>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021400 	.word	0x40021400

08003be0 <SelectFmacIir>:
//Gain is multiplier of normalized coefficients
void SelectFmacIir(	uint8_t in_offset, uint8_t in_len, uint8_t in_threshold,
					uint8_t coeff_offset, uint8_t a_coeff_num, uint8_t b_coeff_num,
					uint8_t out_offset, uint8_t out_len, uint8_t out_threshold,
					uint8_t gain)
{
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	4611      	mov	r1, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	4623      	mov	r3, r4
 8003bf0:	71fb      	strb	r3, [r7, #7]
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71bb      	strb	r3, [r7, #6]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	717b      	strb	r3, [r7, #5]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	713b      	strb	r3, [r7, #4]
	ConfigFmacX1buff(in_offset, in_len, in_threshold);
 8003bfe:	797a      	ldrb	r2, [r7, #5]
 8003c00:	79b9      	ldrb	r1, [r7, #6]
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fedb 	bl	80039c0 <ConfigFmacX1buff>
	ConfigFmacX2Buff(coeff_offset, (a_coeff_num + b_coeff_num));
 8003c0a:	7e3a      	ldrb	r2, [r7, #24]
 8003c0c:	7f3b      	ldrb	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	793b      	ldrb	r3, [r7, #4]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ff0c 	bl	8003a34 <ConfigFmacX2Buff>
	ConfigFmacYBuff(out_offset, out_len, out_threshold);
 8003c1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003c20:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8003c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff2d 	bl	8003a88 <ConfigFmacYBuff>
	ConfigFmacRQP (gain, a_coeff_num, b_coeff_num);
 8003c2e:	7f3a      	ldrb	r2, [r7, #28]
 8003c30:	7e39      	ldrb	r1, [r7, #24]
 8003c32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff ff60 	bl	8003afc <ConfigFmacRQP>

	FMAC	-> PARAM		|= FMAC_PARAM_FUNC_IIR_FILTER;
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <SelectFmacIir+0x74>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <SelectFmacIir+0x74>)
 8003c42:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 8003c46:	60d3      	str	r3, [r2, #12]
	ExecuteFmacFunction();
 8003c48:	f7ff ff80 	bl	8003b4c <ExecuteFmacFunction>
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd90      	pop	{r4, r7, pc}
 8003c54:	40021400 	.word	0x40021400

08003c58 <WriteFmacIirCoefficients>:

/**************************************** Filter functions ***************************************/

void WriteFmacIirCoefficients(uint16_t *iir_coeff_a, uint16_t *iir_coeff_b, uint8_t offset, uint8_t length_a, uint8_t length_b)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	460b      	mov	r3, r1
 8003c68:	71fb      	strb	r3, [r7, #7]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	SelectFmacPreloadFmacX2(offset, length_a, length_b);
 8003c6e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003c72:	79b9      	ldrb	r1, [r7, #6]
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff ff8c 	bl	8003b94 <SelectFmacPreloadFmacX2>

	for (i = 0; i < length_b; i++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	75fb      	strb	r3, [r7, #23]
 8003c80:	e00a      	b.n	8003c98 <WriteFmacIirCoefficients+0x40>
	{
		WriteFmacData(iir_coeff_b[i]);
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4413      	add	r3, r2
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff6d 	bl	8003b6c <WriteFmacData>
	for (i = 0; i < length_b; i++)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	3301      	adds	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
 8003c98:	7dfa      	ldrb	r2, [r7, #23]
 8003c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d3ef      	bcc.n	8003c82 <WriteFmacIirCoefficients+0x2a>
	}

	for (i = 0; i < length_a; i++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]
 8003ca6:	e00a      	b.n	8003cbe <WriteFmacIirCoefficients+0x66>
	{
		WriteFmacData(iir_coeff_a[i]);
 8003ca8:	7dfb      	ldrb	r3, [r7, #23]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff5a 	bl	8003b6c <WriteFmacData>
	for (i = 0; i < length_a; i++)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
 8003cbe:	7dfa      	ldrb	r2, [r7, #23]
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3f0      	bcc.n	8003ca8 <WriteFmacIirCoefficients+0x50>
	}

	while (FMAC	-> PARAM & FMAC_PARAM_START);
 8003cc6:	bf00      	nop
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <WriteFmacIirCoefficients+0x80>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	dbfb      	blt.n	8003cc8 <WriteFmacIirCoefficients+0x70>
}
 8003cd0:	bf00      	nop
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021400 	.word	0x40021400

08003cdc <UtoaBuiltinDiv>:
#include "conversions.h"

char * UtoaBuiltinDiv(uint16_t value, char *buffer)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	6039      	str	r1, [r7, #0]
 8003ce6:	80fb      	strh	r3, [r7, #6]
   buffer += 11;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	330b      	adds	r3, #11
 8003cec:	603b      	str	r3, [r7, #0]
   *--buffer = 0;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
   do
   {
      *--buffer = value % 10 + '0';
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <UtoaBuiltinDiv+0x64>)
 8003cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003d02:	08d9      	lsrs	r1, r3, #3
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	3a01      	subs	r2, #1
 8003d16:	603a      	str	r2, [r7, #0]
 8003d18:	3330      	adds	r3, #48	; 0x30
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	701a      	strb	r2, [r3, #0]
      value /= 10;
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <UtoaBuiltinDiv+0x64>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	08db      	lsrs	r3, r3, #3
 8003d2a:	80fb      	strh	r3, [r7, #6]
   }
   while (value != 0);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e3      	bne.n	8003cfa <UtoaBuiltinDiv+0x1e>
   return buffer;
 8003d32:	683b      	ldr	r3, [r7, #0]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	cccccccd 	.word	0xcccccccd

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4e0d      	ldr	r6, [pc, #52]	; (8003d7c <__libc_init_array+0x38>)
 8003d48:	4c0d      	ldr	r4, [pc, #52]	; (8003d80 <__libc_init_array+0x3c>)
 8003d4a:	1ba4      	subs	r4, r4, r6
 8003d4c:	10a4      	asrs	r4, r4, #2
 8003d4e:	2500      	movs	r5, #0
 8003d50:	42a5      	cmp	r5, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	4e0b      	ldr	r6, [pc, #44]	; (8003d84 <__libc_init_array+0x40>)
 8003d56:	4c0c      	ldr	r4, [pc, #48]	; (8003d88 <__libc_init_array+0x44>)
 8003d58:	f000 f82c 	bl	8003db4 <_init>
 8003d5c:	1ba4      	subs	r4, r4, r6
 8003d5e:	10a4      	asrs	r4, r4, #2
 8003d60:	2500      	movs	r5, #0
 8003d62:	42a5      	cmp	r5, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d6c:	4798      	blx	r3
 8003d6e:	3501      	adds	r5, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d76:	4798      	blx	r3
 8003d78:	3501      	adds	r5, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	08003e80 	.word	0x08003e80
 8003d80:	08003e80 	.word	0x08003e80
 8003d84:	08003e80 	.word	0x08003e80
 8003d88:	08003e84 	.word	0x08003e84

08003d8c <memcpy>:
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	1e43      	subs	r3, r0, #1
 8003d90:	440a      	add	r2, r1
 8003d92:	4291      	cmp	r1, r2
 8003d94:	d100      	bne.n	8003d98 <memcpy+0xc>
 8003d96:	bd10      	pop	{r4, pc}
 8003d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003da0:	e7f7      	b.n	8003d92 <memcpy+0x6>

08003da2 <memset>:
 8003da2:	4402      	add	r2, r0
 8003da4:	4603      	mov	r3, r0
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d100      	bne.n	8003dac <memset+0xa>
 8003daa:	4770      	bx	lr
 8003dac:	f803 1b01 	strb.w	r1, [r3], #1
 8003db0:	e7f9      	b.n	8003da6 <memset+0x4>
	...

08003db4 <_init>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr

08003dc0 <_fini>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr
