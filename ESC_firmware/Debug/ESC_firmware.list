
ESC_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003048  08003048  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003048  08003048  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003048  08003048  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c9e8  20000008  08003058  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c9f0  08003058  0002c9f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009548  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e6  00000000  00000000  00029580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  0002ac68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000568  00000000  00000000  0002b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b69  00000000  00000000  0002b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000643c  00000000  00000000  00042379  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087d71  00000000  00000000  000487b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000175c  00000000  00000000  000d05a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000008 	.word	0x20000008
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002f74 	.word	0x08002f74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000000c 	.word	0x2000000c
 800021c:	08002f74 	.word	0x08002f74

08000220 <InitADC>:

#include "ADC.h"

/********************************************* Used functions ********************************************/

void InitADC (void){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	uint16_t ticks = 0;									//(1us = 168 ticks @ 168MHz)
 8000226:	2300      	movs	r3, #0
 8000228:	80fb      	strh	r3, [r7, #6]

	// Internal voltage reference
	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 800022a:	4b5d      	ldr	r3, [pc, #372]	; (80003a0 <InitADC+0x180>)
 800022c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800022e:	4a5c      	ldr	r2, [pc, #368]	; (80003a0 <InitADC+0x180>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6613      	str	r3, [r2, #96]	; 0x60

	VREFBUF			-> CSR		|= VREFBUF_CSR_VRS_0;	//VREFBUF = 2.5V
 8000236:	4b5b      	ldr	r3, [pc, #364]	; (80003a4 <InitADC+0x184>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a5a      	ldr	r2, [pc, #360]	; (80003a4 <InitADC+0x184>)
 800023c:	f043 0310 	orr.w	r3, r3, #16
 8000240:	6013      	str	r3, [r2, #0]
	while (VREFBUF->CSR & VREFBUF_CSR_VRR);
 8000242:	bf00      	nop
 8000244:	4b57      	ldr	r3, [pc, #348]	; (80003a4 <InitADC+0x184>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f003 0308 	and.w	r3, r3, #8
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1f9      	bne.n	8000244 <InitADC+0x24>
	VREFBUF			-> CSR		|= VREFBUF_CSR_ENVR;
 8000250:	4b54      	ldr	r3, [pc, #336]	; (80003a4 <InitADC+0x184>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <InitADC+0x184>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
	VREFBUF			-> CSR		&= ~VREFBUF_CSR_HIZ;
 800025c:	4b51      	ldr	r3, [pc, #324]	; (80003a4 <InitADC+0x184>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a50      	ldr	r2, [pc, #320]	; (80003a4 <InitADC+0x184>)
 8000262:	f023 0302 	bic.w	r3, r3, #2
 8000266:	6013      	str	r3, [r2, #0]

	//Pin init

	RCC				-> AHB2ENR 	|= RCC_AHB2ENR_ADC12EN;
 8000268:	4b4d      	ldr	r3, [pc, #308]	; (80003a0 <InitADC+0x180>)
 800026a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026c:	4a4c      	ldr	r2, [pc, #304]	; (80003a0 <InitADC+0x180>)
 800026e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000272:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOAEN;
 8000274:	4b4a      	ldr	r3, [pc, #296]	; (80003a0 <InitADC+0x180>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	4a49      	ldr	r2, [pc, #292]	; (80003a0 <InitADC+0x180>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 8000280:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <InitADC+0x180>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000284:	4a46      	ldr	r2, [pc, #280]	; (80003a0 <InitADC+0x180>)
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	64d3      	str	r3, [r2, #76]	; 0x4c

	//GPIOA			-> MODER	|= GPIO_MODER_MODE0;
	GPIOB			-> MODER	|= GPIO_MODER_MODE11;
 800028c:	4b46      	ldr	r3, [pc, #280]	; (80003a8 <InitADC+0x188>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a45      	ldr	r2, [pc, #276]	; (80003a8 <InitADC+0x188>)
 8000292:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8000296:	6013      	str	r3, [r2, #0]

	RCC				-> CCIPR	|= RCC_CCIPR_ADC12SEL_0; 				//adc_ker_ck is PLLP
 8000298:	4b41      	ldr	r3, [pc, #260]	; (80003a0 <InitADC+0x180>)
 800029a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029e:	4a40      	ldr	r2, [pc, #256]	; (80003a0 <InitADC+0x180>)
 80002a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	ADC12_COMMON	-> CCR		&= ~ADC_CCR_CKMODE;						//input ADC clock = adc_ker_ck
 80002a8:	4b40      	ldr	r3, [pc, #256]	; (80003ac <InitADC+0x18c>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	; (80003ac <InitADC+0x18c>)
 80002ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002b2:	6093      	str	r3, [r2, #8]
	ADC12_COMMON	-> CCR		&= ~ADC_CCR_PRESC;						//input ADC clock not divided
 80002b4:	4b3d      	ldr	r3, [pc, #244]	; (80003ac <InitADC+0x18c>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a3c      	ldr	r2, [pc, #240]	; (80003ac <InitADC+0x18c>)
 80002ba:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80002be:	6093      	str	r3, [r2, #8]

	//ADC12_COMMON	-> CCR		|= ADC_CCR_VREFEN;

	//Calibration

	ADC1			->	CR		&= ~ADC_CR_DEEPPWD;						// Deep power down is turned on
 80002c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002ce:	6093      	str	r3, [r2, #8]
	ADC1			->	CR		|= ADC_CR_ADVREGEN;						// ADC1 voltage regulator enable
 80002d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002de:	6093      	str	r3, [r2, #8]

	while (!(ticks = 1680))
 80002e0:	bf00      	nop
 80002e2:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 80002e6:	80fb      	strh	r3, [r7, #6]
		{
			ticks++;
		}

	ADC1			->	CR		&= ~ADC_CR_ADCALDIF;
 80002e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002f6:	6093      	str	r3, [r2, #8]

	ADC1			->	CR		|= ADC_CR_ADCAL;						//start calibration
 80002f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000306:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);									//wait for calibration to be completed
 8000308:	bf00      	nop
 800030a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	2b00      	cmp	r3, #0
 8000312:	dbfa      	blt.n	800030a <InitADC+0xea>

	//Trigger

	ADC1			->	CFGR	&= ~ADC_CFGR_EXTEN;
 8000314:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800031e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000322:	60d3      	str	r3, [r2, #12]
	ADC1			->	CFGR	&= ~ADC_CFGR_CONT;						//0 -- single conversion, 1 -- continuous conversion
 8000324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800032e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000332:	60d3      	str	r3, [r2, #12]
	ADC1			->	SMPR2	|= 0x7UL << ADC_SMPR2_SMP14_Pos;		//601.5 ADC clock cycles
 8000334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800033e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000342:	6193      	str	r3, [r2, #24]
	ADC1			->	SQR1	&= ~ADC_SQR1_SQ1;
 8000344:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800034e:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1			->	SQR1	|= 0xEUL << ADC_SQR1_SQ1_Pos;			//ADC1_IN14 channel select
 8000354:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800035e:	f443 7360 	orr.w	r3, r3, #896	; 0x380
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1			->	SQR1	&= ~ADC_SQR1_L;							//Length of regular ADC channel = 1
 8000364:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800036e:	f023 030f 	bic.w	r3, r3, #15
 8000372:	6313      	str	r3, [r2, #48]	; 0x30

	//enable

	ADC1			->	CR		|= ADC_CR_ADEN;
 8000374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6093      	str	r3, [r2, #8]

	while (!(ADC1->ISR & ADC_ISR_ADRDY));
 8000384:	bf00      	nop
 8000386:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0301 	and.w	r3, r3, #1
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f8      	beq.n	8000386 <InitADC+0x166>
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010030 	.word	0x40010030
 80003a8:	48000400 	.word	0x48000400
 80003ac:	50000300 	.word	0x50000300

080003b0 <StartConvADC>:

uint16_t StartConvADC(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
	ADC1			-> CR		|= ADC_CR_ADSTART;
 80003b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003be:	f043 0304 	orr.w	r3, r3, #4
 80003c2:	6093      	str	r3, [r2, #8]

	while (!(ADC1 -> ISR & ADC_ISR_EOC));
 80003c4:	bf00      	nop
 80003c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d0f8      	beq.n	80003c6 <StartConvADC+0x16>

	return (ADC1 -> DR);
 80003d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003da:	b29b      	uxth	r3, r3
}
 80003dc:	4618      	mov	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
	...

080003e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <SystemInit+0x28>)
 80003ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <SystemInit+0x28>)
 80003f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SystemInit+0x28>)
 80003fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000402:	609a      	str	r2, [r3, #8]
#endif
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f103 0208 	add.w	r2, r3, #8
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f04f 32ff 	mov.w	r2, #4294967295
 800042c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f103 0208 	add.w	r2, r3, #8
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f103 0208 	add.w	r2, r3, #8
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800046e:	b480      	push	{r7}
 8000470:	b085      	sub	sp, #20
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	683a      	ldr	r2, [r7, #0]
 8000492:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	601a      	str	r2, [r3, #0]
}
 80004aa:	bf00      	nop
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80004b6:	b480      	push	{r7}
 80004b8:	b085      	sub	sp, #20
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004cc:	d103      	bne.n	80004d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e00c      	b.n	80004f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3308      	adds	r3, #8
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	e002      	b.n	80004e4 <vListInsert+0x2e>
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d2f6      	bcs.n	80004de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	601a      	str	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	6892      	ldr	r2, [r2, #8]
 800053e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	6852      	ldr	r2, [r2, #4]
 8000548:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	d103      	bne.n	800055c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	1e5a      	subs	r2, r3, #1
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3b04      	subs	r3, #4
 800058c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000594:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3b04      	subs	r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	f023 0201 	bic.w	r2, r3, #1
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3b04      	subs	r3, #4
 80005aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <pxPortInitialiseStack+0x64>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3b14      	subs	r3, #20
 80005b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3b04      	subs	r3, #4
 80005c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f06f 0202 	mvn.w	r2, #2
 80005ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	3b20      	subs	r3, #32
 80005d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	080005e5 	.word	0x080005e5

080005e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <prvTaskExitError+0x50>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f6:	d009      	beq.n	800060c <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e7fe      	b.n	800060a <prvTaskExitError+0x26>
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800061e:	bf00      	nop
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0fc      	beq.n	8000620 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000
	...

08000640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <pxCurrentTCBConst2>)
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	6808      	ldr	r0, [r1, #0]
 8000646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800064a:	f380 8809 	msr	PSP, r0
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	f380 8811 	msr	BASEPRI, r0
 800065a:	4770      	bx	lr
 800065c:	f3af 8000 	nop.w

08000660 <pxCurrentTCBConst2>:
 8000660:	2000002c 	.word	0x2000002c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop

08000668 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000668:	4808      	ldr	r0, [pc, #32]	; (800068c <prvPortStartFirstTask+0x24>)
 800066a:	6800      	ldr	r0, [r0, #0]
 800066c:	6800      	ldr	r0, [r0, #0]
 800066e:	f380 8808 	msr	MSP, r0
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	f380 8814 	msr	CONTROL, r0
 800067a:	b662      	cpsie	i
 800067c:	b661      	cpsie	f
 800067e:	f3bf 8f4f 	dsb	sy
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	df00      	svc	0
 8000688:	bf00      	nop
 800068a:	0000      	.short	0x0000
 800068c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop

08000694 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800069a:	4b44      	ldr	r3, [pc, #272]	; (80007ac <xPortStartScheduler+0x118>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a44      	ldr	r2, [pc, #272]	; (80007b0 <xPortStartScheduler+0x11c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d109      	bne.n	80006b8 <xPortStartScheduler+0x24>
 80006a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a8:	f383 8811 	msr	BASEPRI, r3
 80006ac:	f3bf 8f6f 	isb	sy
 80006b0:	f3bf 8f4f 	dsb	sy
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	e7fe      	b.n	80006b6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80006b8:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <xPortStartScheduler+0x118>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a3d      	ldr	r2, [pc, #244]	; (80007b4 <xPortStartScheduler+0x120>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d109      	bne.n	80006d6 <xPortStartScheduler+0x42>
 80006c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e7fe      	b.n	80006d4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <xPortStartScheduler+0x124>)
 80006d8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	22ff      	movs	r2, #255	; 0xff
 80006e6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <xPortStartScheduler+0x128>)
 80006fc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <xPortStartScheduler+0x12c>)
 8000700:	2207      	movs	r2, #7
 8000702:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000704:	e009      	b.n	800071a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <xPortStartScheduler+0x12c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3b01      	subs	r3, #1
 800070c:	4a2c      	ldr	r2, [pc, #176]	; (80007c0 <xPortStartScheduler+0x12c>)
 800070e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	2b80      	cmp	r3, #128	; 0x80
 8000724:	d0ef      	beq.n	8000706 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <xPortStartScheduler+0x12c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f1c3 0307 	rsb	r3, r3, #7
 800072e:	2b04      	cmp	r3, #4
 8000730:	d009      	beq.n	8000746 <xPortStartScheduler+0xb2>
 8000732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000736:	f383 8811 	msr	BASEPRI, r3
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	e7fe      	b.n	8000744 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <xPortStartScheduler+0x12c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <xPortStartScheduler+0x12c>)
 800074e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <xPortStartScheduler+0x12c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <xPortStartScheduler+0x12c>)
 800075a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <xPortStartScheduler+0x130>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <xPortStartScheduler+0x130>)
 800076a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <xPortStartScheduler+0x130>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <xPortStartScheduler+0x130>)
 8000776:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800077a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800077c:	f000 f8d4 	bl	8000928 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <xPortStartScheduler+0x134>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000786:	f000 f8eb 	bl	8000960 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <xPortStartScheduler+0x138>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <xPortStartScheduler+0x138>)
 8000790:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000794:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000796:	f7ff ff67 	bl	8000668 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800079a:	f001 f933 	bl	8001a04 <vTaskSwitchContext>
    prvTaskExitError();
 800079e:	f7ff ff21 	bl	80005e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	410fc271 	.word	0x410fc271
 80007b4:	410fc270 	.word	0x410fc270
 80007b8:	e000e400 	.word	0xe000e400
 80007bc:	20000024 	.word	0x20000024
 80007c0:	20000028 	.word	0x20000028
 80007c4:	e000ed20 	.word	0xe000ed20
 80007c8:	20000000 	.word	0x20000000
 80007cc:	e000ef34 	.word	0xe000ef34

080007d0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007da:	f383 8811 	msr	BASEPRI, r3
 80007de:	f3bf 8f6f 	isb	sy
 80007e2:	f3bf 8f4f 	dsb	sy
 80007e6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <vPortEnterCritical+0x54>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <vPortEnterCritical+0x54>)
 80007f0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <vPortEnterCritical+0x54>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d10e      	bne.n	8000818 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <vPortEnterCritical+0x58>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d009      	beq.n	8000818 <vPortEnterCritical+0x48>
 8000804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	e7fe      	b.n	8000816 <vPortEnterCritical+0x46>
    }
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	20000000 	.word	0x20000000
 8000828:	e000ed04 	.word	0xe000ed04

0800082c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <vPortExitCritical+0x4c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d109      	bne.n	800084e <vPortExitCritical+0x22>
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	e7fe      	b.n	800084c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <vPortExitCritical+0x4c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <vPortExitCritical+0x4c>)
 8000856:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <vPortExitCritical+0x4c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d104      	bne.n	800086a <vPortExitCritical+0x3e>
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000000 	.word	0x20000000
 800087c:	00000000 	.word	0x00000000

08000880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000880:	f3ef 8009 	mrs	r0, PSP
 8000884:	f3bf 8f6f 	isb	sy
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <pxCurrentTCBConst>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	f01e 0f10 	tst.w	lr, #16
 8000890:	bf08      	it	eq
 8000892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800089a:	6010      	str	r0, [r2, #0]
 800089c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80008a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80008a4:	f380 8811 	msr	BASEPRI, r0
 80008a8:	f3bf 8f4f 	dsb	sy
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f001 f8a8 	bl	8001a04 <vTaskSwitchContext>
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	f380 8811 	msr	BASEPRI, r0
 80008bc:	bc09      	pop	{r0, r3}
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	6808      	ldr	r0, [r1, #0]
 80008c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008c6:	f01e 0f10 	tst.w	lr, #16
 80008ca:	bf08      	it	eq
 80008cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80008d0:	f380 8809 	msr	PSP, r0
 80008d4:	f3bf 8f6f 	isb	sy
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	f3af 8000 	nop.w

080008e0 <pxCurrentTCBConst>:
 80008e0:	2000002c 	.word	0x2000002c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop

080008e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
        __asm volatile
 80008ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008f2:	f383 8811 	msr	BASEPRI, r3
 80008f6:	f3bf 8f6f 	isb	sy
 80008fa:	f3bf 8f4f 	dsb	sy
 80008fe:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000900:	f000 ffc8 	bl	8001894 <xTaskIncrementTick>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SysTick_Handler+0x3c>)
 800090c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	e000ed04 	.word	0xe000ed04

08000928 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <vPortSetupTimerInterrupt+0x28>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <vPortSetupTimerInterrupt+0x2c>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <vPortSetupTimerInterrupt+0x30>)
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <vPortSetupTimerInterrupt+0x34>)
 800093c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <vPortSetupTimerInterrupt+0x28>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e010 	.word	0xe000e010
 8000954:	e000e018 	.word	0xe000e018
 8000958:	e000e014 	.word	0xe000e014
 800095c:	0002903f 	.word	0x0002903f

08000960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000970 <vPortEnableVFP+0x10>
 8000964:	6801      	ldr	r1, [r0, #0]
 8000966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800096a:	6001      	str	r1, [r0, #0]
 800096c:	4770      	bx	lr
 800096e:	0000      	.short	0x0000
 8000970:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop

08000978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800097e:	f3ef 8305 	mrs	r3, IPSR
 8000982:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b0f      	cmp	r3, #15
 8000988:	d913      	bls.n	80009b2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <vPortValidateInterruptPriority+0x6c>)
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <vPortValidateInterruptPriority+0x70>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	7afa      	ldrb	r2, [r7, #11]
 800099a:	429a      	cmp	r2, r3
 800099c:	d209      	bcs.n	80009b2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800099e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a2:	f383 8811 	msr	BASEPRI, r3
 80009a6:	f3bf 8f6f 	isb	sy
 80009aa:	f3bf 8f4f 	dsb	sy
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	e7fe      	b.n	80009b0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <vPortValidateInterruptPriority+0x74>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <vPortValidateInterruptPriority+0x78>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d909      	bls.n	80009d6 <vPortValidateInterruptPriority+0x5e>
 80009c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c6:	f383 8811 	msr	BASEPRI, r3
 80009ca:	f3bf 8f6f 	isb	sy
 80009ce:	f3bf 8f4f 	dsb	sy
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	e7fe      	b.n	80009d4 <vPortValidateInterruptPriority+0x5c>
    }
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000e3f0 	.word	0xe000e3f0
 80009e8:	20000024 	.word	0x20000024
 80009ec:	e000ed0c 	.word	0xe000ed0c
 80009f0:	20000028 	.word	0x20000028

080009f4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d109      	bne.n	8000a1c <xQueueGenericReset+0x28>
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	e7fe      	b.n	8000a1a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8000a1c:	f7ff fed8 	bl	80007d0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a2c:	fb01 f303 	mul.w	r3, r1, r3
 8000a30:	441a      	add	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	68f9      	ldr	r1, [r7, #12]
 8000a50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a52:	fb01 f303 	mul.w	r3, r1, r3
 8000a56:	441a      	add	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d114      	bne.n	8000a9c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d01a      	beq.n	8000ab0 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3310      	adds	r3, #16
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f86a 	bl	8001b58 <xTaskRemoveFromEventList>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d012      	beq.n	8000ab0 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <xQueueGenericReset+0xcc>)
 8000a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	f3bf 8f4f 	dsb	sy
 8000a96:	f3bf 8f6f 	isb	sy
 8000a9a:	e009      	b.n	8000ab0 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3310      	adds	r3, #16
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fcb7 	bl	8000414 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3324      	adds	r3, #36	; 0x24
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fcb2 	bl	8000414 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000ab0:	f7ff febc 	bl	800082c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000ed04 	.word	0xe000ed04

08000ac4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d109      	bne.n	8000aec <xQueueGenericCreate+0x28>
 8000ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000adc:	f383 8811 	msr	BASEPRI, r3
 8000ae0:	f3bf 8f6f 	isb	sy
 8000ae4:	f3bf 8f4f 	dsb	sy
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	e7fe      	b.n	8000aea <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	fb02 f303 	mul.w	r3, r2, r3
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d006      	beq.n	8000b0a <xQueueGenericCreate+0x46>
 8000afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d101      	bne.n	8000b0e <xQueueGenericCreate+0x4a>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <xQueueGenericCreate+0x4c>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <xQueueGenericCreate+0x64>
 8000b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b18:	f383 8811 	msr	BASEPRI, r3
 8000b1c:	f3bf 8f6f 	isb	sy
 8000b20:	f3bf 8f4f 	dsb	sy
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e7fe      	b.n	8000b26 <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	3350      	adds	r3, #80	; 0x50
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fd29 	bl	8002584 <pvPortMalloc>
 8000b32:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00d      	beq.n	8000b56 <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3350      	adds	r3, #80	; 0x50
 8000b42:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	69fa      	ldr	r2, [r7, #28]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f805 	bl	8000b60 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000b56:	6a3b      	ldr	r3, [r7, #32]
    }
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d103      	bne.n	8000b7c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	69ba      	ldr	r2, [r7, #24]
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	e002      	b.n	8000b82 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b8e:	2101      	movs	r1, #1
 8000b90:	69b8      	ldr	r0, [r7, #24]
 8000b92:	f7ff ff2f 	bl	80009f4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	78fa      	ldrb	r2, [r7, #3]
 8000b9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d109      	bne.n	8000bd8 <xQueueGenericSend+0x30>
 8000bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc8:	f383 8811 	msr	BASEPRI, r3
 8000bcc:	f3bf 8f6f 	isb	sy
 8000bd0:	f3bf 8f4f 	dsb	sy
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd6:	e7fe      	b.n	8000bd6 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <xQueueGenericSend+0x3e>
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <xQueueGenericSend+0x42>
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <xQueueGenericSend+0x44>
 8000bea:	2300      	movs	r3, #0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <xQueueGenericSend+0x5c>
 8000bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf4:	f383 8811 	msr	BASEPRI, r3
 8000bf8:	f3bf 8f6f 	isb	sy
 8000bfc:	f3bf 8f4f 	dsb	sy
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
 8000c02:	e7fe      	b.n	8000c02 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d103      	bne.n	8000c12 <xQueueGenericSend+0x6a>
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <xQueueGenericSend+0x6e>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <xQueueGenericSend+0x70>
 8000c16:	2300      	movs	r3, #0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <xQueueGenericSend+0x88>
 8000c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	f3bf 8f6f 	isb	sy
 8000c28:	f3bf 8f4f 	dsb	sy
 8000c2c:	623b      	str	r3, [r7, #32]
 8000c2e:	e7fe      	b.n	8000c2e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c30:	f001 f92a 	bl	8001e88 <xTaskGetSchedulerState>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <xQueueGenericSend+0x98>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <xQueueGenericSend+0x9c>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <xQueueGenericSend+0x9e>
 8000c44:	2300      	movs	r3, #0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d109      	bne.n	8000c5e <xQueueGenericSend+0xb6>
 8000c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4e:	f383 8811 	msr	BASEPRI, r3
 8000c52:	f3bf 8f6f 	isb	sy
 8000c56:	f3bf 8f4f 	dsb	sy
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	e7fe      	b.n	8000c5c <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c5e:	f7ff fdb7 	bl	80007d0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d302      	bcc.n	8000c74 <xQueueGenericSend+0xcc>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d129      	bne.n	8000cc8 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c7a:	f000 fa2e 	bl	80010da <prvCopyDataToQueue>
 8000c7e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d010      	beq.n	8000caa <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	3324      	adds	r3, #36	; 0x24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 ff63 	bl	8001b58 <xTaskRemoveFromEventList>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000c98:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <xQueueGenericSend+0x1f0>)
 8000c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	f3bf 8f4f 	dsb	sy
 8000ca4:	f3bf 8f6f 	isb	sy
 8000ca8:	e00a      	b.n	8000cc0 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000cb0:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <xQueueGenericSend+0x1f0>)
 8000cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	f3bf 8f4f 	dsb	sy
 8000cbc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000cc0:	f7ff fdb4 	bl	800082c <vPortExitCritical>
                return pdPASS;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e063      	b.n	8000d90 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000cce:	f7ff fdad 	bl	800082c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e05c      	b.n	8000d90 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d106      	bne.n	8000cea <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 ff9b 	bl	8001c1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cea:	f7ff fd9f 	bl	800082c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000cee:	f000 fd17 	bl	8001720 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000cf2:	f7ff fd6d 	bl	80007d0 <vPortEnterCritical>
 8000cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d02:	d103      	bne.n	8000d0c <xQueueGenericSend+0x164>
 8000d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d103      	bne.n	8000d22 <xQueueGenericSend+0x17a>
 8000d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d22:	f7ff fd83 	bl	800082c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d26:	1d3a      	adds	r2, r7, #4
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 ff8a 	bl	8001c48 <xTaskCheckForTimeOut>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d124      	bne.n	8000d84 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d3c:	f000 fab7 	bl	80012ae <prvIsQueueFull>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d018      	beq.n	8000d78 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d48:	3310      	adds	r3, #16
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 feb4 	bl	8001abc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d56:	f000 fa42 	bl	80011de <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000d5a:	f000 fcef 	bl	800173c <xTaskResumeAll>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f af7c 	bne.w	8000c5e <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <xQueueGenericSend+0x1f0>)
 8000d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	f3bf 8f4f 	dsb	sy
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	e772      	b.n	8000c5e <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7a:	f000 fa30 	bl	80011de <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d7e:	f000 fcdd 	bl	800173c <xTaskResumeAll>
 8000d82:	e76c      	b.n	8000c5e <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d86:	f000 fa2a 	bl	80011de <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d8a:	f000 fcd7 	bl	800173c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000d8e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	e000ed04 	.word	0xe000ed04

08000d9c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b090      	sub	sp, #64	; 0x40
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d109      	bne.n	8000dc8 <xQueueGenericSendFromISR+0x2c>
 8000db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db8:	f383 8811 	msr	BASEPRI, r3
 8000dbc:	f3bf 8f6f 	isb	sy
 8000dc0:	f3bf 8f4f 	dsb	sy
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc6:	e7fe      	b.n	8000dc6 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <xQueueGenericSendFromISR+0x3a>
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <xQueueGenericSendFromISR+0x3e>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <xQueueGenericSendFromISR+0x40>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d109      	bne.n	8000df4 <xQueueGenericSendFromISR+0x58>
 8000de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de4:	f383 8811 	msr	BASEPRI, r3
 8000de8:	f3bf 8f6f 	isb	sy
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
 8000df2:	e7fe      	b.n	8000df2 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d103      	bne.n	8000e02 <xQueueGenericSendFromISR+0x66>
 8000dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d101      	bne.n	8000e06 <xQueueGenericSendFromISR+0x6a>
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <xQueueGenericSendFromISR+0x6c>
 8000e06:	2300      	movs	r3, #0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d109      	bne.n	8000e20 <xQueueGenericSendFromISR+0x84>
 8000e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e10:	f383 8811 	msr	BASEPRI, r3
 8000e14:	f3bf 8f6f 	isb	sy
 8000e18:	f3bf 8f4f 	dsb	sy
 8000e1c:	623b      	str	r3, [r7, #32]
 8000e1e:	e7fe      	b.n	8000e1e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e20:	f7ff fdaa 	bl	8000978 <vPortValidateInterruptPriority>
        __asm volatile
 8000e24:	f3ef 8211 	mrs	r2, BASEPRI
 8000e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e2c:	f383 8811 	msr	BASEPRI, r3
 8000e30:	f3bf 8f6f 	isb	sy
 8000e34:	f3bf 8f4f 	dsb	sy
 8000e38:	61fa      	str	r2, [r7, #28]
 8000e3a:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8000e3c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d302      	bcc.n	8000e52 <xQueueGenericSendFromISR+0xb6>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d13d      	bne.n	8000ece <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000e68:	f000 f937 	bl	80010da <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000e6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d112      	bne.n	8000e9c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d024      	beq.n	8000ec8 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e80:	3324      	adds	r3, #36	; 0x24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fe68 	bl	8001b58 <xTaskRemoveFromEventList>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d01c      	beq.n	8000ec8 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d019      	beq.n	8000ec8 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	e015      	b.n	8000ec8 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000e9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea2:	d109      	bne.n	8000eb8 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8000ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea8:	f383 8811 	msr	BASEPRI, r3
 8000eac:	f3bf 8f6f 	isb	sy
 8000eb0:	f3bf 8f4f 	dsb	sy
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e7fe      	b.n	8000eb6 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	b25a      	sxtb	r2, r3
 8000ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000ecc:	e001      	b.n	8000ed2 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed4:	613b      	str	r3, [r7, #16]
        __asm volatile
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3740      	adds	r7, #64	; 0x40
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <xQueueReceive+0x2e>
        __asm volatile
 8000f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f06:	f383 8811 	msr	BASEPRI, r3
 8000f0a:	f3bf 8f6f 	isb	sy
 8000f0e:	f3bf 8f4f 	dsb	sy
 8000f12:	623b      	str	r3, [r7, #32]
 8000f14:	e7fe      	b.n	8000f14 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d103      	bne.n	8000f24 <xQueueReceive+0x3c>
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <xQueueReceive+0x40>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <xQueueReceive+0x42>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <xQueueReceive+0x5a>
 8000f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f32:	f383 8811 	msr	BASEPRI, r3
 8000f36:	f3bf 8f6f 	isb	sy
 8000f3a:	f3bf 8f4f 	dsb	sy
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	e7fe      	b.n	8000f40 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f42:	f000 ffa1 	bl	8001e88 <xTaskGetSchedulerState>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <xQueueReceive+0x6a>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <xQueueReceive+0x6e>
 8000f52:	2301      	movs	r3, #1
 8000f54:	e000      	b.n	8000f58 <xQueueReceive+0x70>
 8000f56:	2300      	movs	r3, #0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d109      	bne.n	8000f70 <xQueueReceive+0x88>
 8000f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f60:	f383 8811 	msr	BASEPRI, r3
 8000f64:	f3bf 8f6f 	isb	sy
 8000f68:	f3bf 8f4f 	dsb	sy
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	e7fe      	b.n	8000f6e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000f70:	f7ff fc2e 	bl	80007d0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d01f      	beq.n	8000fc0 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f84:	f000 f905 	bl	8001192 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	1e5a      	subs	r2, r3, #1
 8000f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00f      	beq.n	8000fb8 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fddb 	bl	8001b58 <xTaskRemoveFromEventList>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <xQueueReceive+0x1b4>)
 8000faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	f3bf 8f4f 	dsb	sy
 8000fb4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000fb8:	f7ff fc38 	bl	800082c <vPortExitCritical>
                return pdPASS;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e069      	b.n	8001094 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d103      	bne.n	8000fce <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000fc6:	f7ff fc31 	bl	800082c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e062      	b.n	8001094 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d106      	bne.n	8000fe2 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fe1f 	bl	8001c1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000fe2:	f7ff fc23 	bl	800082c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000fe6:	f000 fb9b 	bl	8001720 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000fea:	f7ff fbf1 	bl	80007d0 <vPortEnterCritical>
 8000fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ff4:	b25b      	sxtb	r3, r3
 8000ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffa:	d103      	bne.n	8001004 <xQueueReceive+0x11c>
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800100a:	b25b      	sxtb	r3, r3
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d103      	bne.n	800101a <xQueueReceive+0x132>
 8001012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800101a:	f7ff fc07 	bl	800082c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800101e:	1d3a      	adds	r2, r7, #4
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fe0e 	bl	8001c48 <xTaskCheckForTimeOut>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d123      	bne.n	800107a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001034:	f000 f925 	bl	8001282 <prvIsQueueEmpty>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d017      	beq.n	800106e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001040:	3324      	adds	r3, #36	; 0x24
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fd38 	bl	8001abc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800104c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800104e:	f000 f8c6 	bl	80011de <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001052:	f000 fb73 	bl	800173c <xTaskResumeAll>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d189      	bne.n	8000f70 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <xQueueReceive+0x1b4>)
 800105e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	f3bf 8f6f 	isb	sy
 800106c:	e780      	b.n	8000f70 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800106e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001070:	f000 f8b5 	bl	80011de <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001074:	f000 fb62 	bl	800173c <xTaskResumeAll>
 8001078:	e77a      	b.n	8000f70 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800107a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800107c:	f000 f8af 	bl	80011de <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001080:	f000 fb5c 	bl	800173c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001086:	f000 f8fc 	bl	8001282 <prvIsQueueEmpty>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f43f af6f 	beq.w	8000f70 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001092:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001094:	4618      	mov	r0, r3
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	e000ed04 	.word	0xe000ed04

080010a0 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d109      	bne.n	80010c2 <uxQueueMessagesWaiting+0x22>
 80010ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b2:	f383 8811 	msr	BASEPRI, r3
 80010b6:	f3bf 8f6f 	isb	sy
 80010ba:	f3bf 8f4f 	dsb	sy
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	e7fe      	b.n	80010c0 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 80010c2:	f7ff fb85 	bl	80007d0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ca:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80010cc:	f7ff fbae 	bl	800082c <vPortExitCritical>

    return uxReturn;
 80010d0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d043      	beq.n	8001180 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d119      	bne.n	8001132 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6858      	ldr	r0, [r3, #4]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	461a      	mov	r2, r3
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	f001 ff1f 	bl	8002f4c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	441a      	add	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	429a      	cmp	r2, r3
 8001126:	d32b      	bcc.n	8001180 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	e026      	b.n	8001180 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	68d8      	ldr	r0, [r3, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	461a      	mov	r2, r3
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	f001 ff05 	bl	8002f4c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	425b      	negs	r3, r3
 800114c:	441a      	add	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d207      	bcs.n	800116e <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	425b      	negs	r3, r3
 8001168:	441a      	add	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d105      	bne.n	8001180 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3b01      	subs	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001188:	693b      	ldr	r3, [r7, #16]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d018      	beq.n	80011d6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	441a      	add	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d303      	bcc.n	80011c6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68d9      	ldr	r1, [r3, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	461a      	mov	r2, r3
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f001 febb 	bl	8002f4c <memcpy>
    }
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80011e6:	f7ff faf3 	bl	80007d0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011f0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80011f2:	e011      	b.n	8001218 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d012      	beq.n	8001222 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3324      	adds	r3, #36	; 0x24
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fca9 	bl	8001b58 <xTaskRemoveFromEventList>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800120c:	f000 fd80 	bl	8001d10 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	3b01      	subs	r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	dce9      	bgt.n	80011f4 <prvUnlockQueue+0x16>
 8001220:	e000      	b.n	8001224 <prvUnlockQueue+0x46>
                        break;
 8001222:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800122c:	f7ff fafe 	bl	800082c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001230:	f7ff face 	bl	80007d0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800123a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800123c:	e011      	b.n	8001262 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d012      	beq.n	800126c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3310      	adds	r3, #16
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fc84 	bl	8001b58 <xTaskRemoveFromEventList>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001256:	f000 fd5b 	bl	8001d10 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	3b01      	subs	r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001266:	2b00      	cmp	r3, #0
 8001268:	dce9      	bgt.n	800123e <prvUnlockQueue+0x60>
 800126a:	e000      	b.n	800126e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800126c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	22ff      	movs	r2, #255	; 0xff
 8001272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001276:	f7ff fad9 	bl	800082c <vPortExitCritical>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800128a:	f7ff faa1 	bl	80007d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001296:	2301      	movs	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e001      	b.n	80012a0 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80012a0:	f7ff fac4 	bl	800082c <vPortExitCritical>

    return xReturn;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80012b6:	f7ff fa8b 	bl	80007d0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d102      	bne.n	80012cc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80012c6:	2301      	movs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	e001      	b.n	80012d0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80012d0:	f7ff faac 	bl	800082c <vPortExitCritical>

    return xReturn;
 80012d4:	68fb      	ldr	r3, [r7, #12]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e014      	b.n	800131a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <vQueueAddToRegistry+0x4c>)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80012fc:	490b      	ldr	r1, [pc, #44]	; (800132c <vQueueAddToRegistry+0x4c>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <vQueueAddToRegistry+0x4c>)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	4413      	add	r3, r2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001312:	e005      	b.n	8001320 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3301      	adds	r3, #1
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d9e7      	bls.n	80012f0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	2000c990 	.word	0x2000c990

08001330 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001340:	f7ff fa46 	bl	80007d0 <vPortEnterCritical>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800134a:	b25b      	sxtb	r3, r3
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d103      	bne.n	800135a <vQueueWaitForMessageRestricted+0x2a>
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001360:	b25b      	sxtb	r3, r3
 8001362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001366:	d103      	bne.n	8001370 <vQueueWaitForMessageRestricted+0x40>
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001370:	f7ff fa5c 	bl	800082c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	2b00      	cmp	r3, #0
 800137a:	d106      	bne.n	800138a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	3324      	adds	r3, #36	; 0x24
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fbbd 	bl	8001b04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff27 	bl	80011de <prvUnlockQueue>
    }
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	; 0x30
 800139c:	af04      	add	r7, sp, #16
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f8e9 	bl	8002584 <pvPortMalloc>
 80013b2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00e      	beq.n	80013d8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80013ba:	2058      	movs	r0, #88	; 0x58
 80013bc:	f001 f8e2 	bl	8002584 <pvPortMalloc>
 80013c0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
 80013ce:	e005      	b.n	80013dc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80013d0:	6978      	ldr	r0, [r7, #20]
 80013d2:	f001 f91d 	bl	8002610 <vPortFree>
 80013d6:	e001      	b.n	80013dc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d013      	beq.n	800140a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	2300      	movs	r3, #0
 80013e6:	9303      	str	r3, [sp, #12]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68b9      	ldr	r1, [r7, #8]
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f80e 	bl	800141a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80013fe:	69f8      	ldr	r0, [r7, #28]
 8001400:	f000 f89e 	bl	8001540 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	e002      	b.n	8001410 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001410:	69bb      	ldr	r3, [r7, #24]
    }
 8001412:	4618      	mov	r0, r3
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b088      	sub	sp, #32
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	461a      	mov	r2, r3
 8001432:	21a5      	movs	r1, #165	; 0xa5
 8001434:	f001 fd95 	bl	8002f62 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001442:	3b01      	subs	r3, #1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f023 0307 	bic.w	r3, r3, #7
 8001450:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	2b00      	cmp	r3, #0
 800145a:	d009      	beq.n	8001470 <prvInitialiseNewTask+0x56>
 800145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001460:	f383 8811 	msr	BASEPRI, r3
 8001464:	f3bf 8f6f 	isb	sy
 8001468:	f3bf 8f4f 	dsb	sy
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e7fe      	b.n	800146e <prvInitialiseNewTask+0x54>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 8001470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01f      	beq.n	80014bc <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	e012      	b.n	80014a8 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	7819      	ldrb	r1, [r3, #0]
 800148a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	3334      	adds	r3, #52	; 0x34
 8001492:	460a      	mov	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	d9e9      	bls.n	8001482 <prvInitialiseNewTask+0x68>
 80014ae:	e000      	b.n	80014b2 <prvInitialiseNewTask+0x98>
            {
                break;
 80014b0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80014b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014ba:	e003      	b.n	80014c4 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d901      	bls.n	80014ce <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80014ca:	2304      	movs	r3, #4
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80014ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80014d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d6:	3304      	adds	r3, #4
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffbb 	bl	8000454 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e0:	3318      	adds	r3, #24
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7fe ffb6 	bl	8000454 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80014e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	f1c3 0205 	rsb	r2, r3, #5
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80014f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80014fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001500:	3350      	adds	r3, #80	; 0x50
 8001502:	2204      	movs	r2, #4
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fd2b 	bl	8002f62 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800150c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150e:	3354      	adds	r3, #84	; 0x54
 8001510:	2201      	movs	r2, #1
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fd24 	bl	8002f62 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	69b8      	ldr	r0, [r7, #24]
 8001520:	f7ff f82c 	bl	800057c <pxPortInitialiseStack>
 8001524:	4602      	mov	r2, r0
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <prvInitialiseNewTask+0x11c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001534:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001548:	f7ff f942 	bl	80007d0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <prvAddNewTaskToReadyList+0xc4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <prvAddNewTaskToReadyList+0xc4>)
 8001554:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <prvAddNewTaskToReadyList+0xc8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800155e:	4a2a      	ldr	r2, [pc, #168]	; (8001608 <prvAddNewTaskToReadyList+0xc8>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <prvAddNewTaskToReadyList+0xc4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d110      	bne.n	800158e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800156c:	f000 fbf4 	bl	8001d58 <prvInitialiseTaskLists>
 8001570:	e00d      	b.n	800158e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <prvAddNewTaskToReadyList+0xcc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d109      	bne.n	800158e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <prvAddNewTaskToReadyList+0xc8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	429a      	cmp	r2, r3
 8001586:	d802      	bhi.n	800158e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001588:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <prvAddNewTaskToReadyList+0xc8>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <prvAddNewTaskToReadyList+0xd0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <prvAddNewTaskToReadyList+0xd0>)
 8001596:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <prvAddNewTaskToReadyList+0xd0>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	649a      	str	r2, [r3, #72]	; 0x48
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <prvAddNewTaskToReadyList+0xd4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d903      	bls.n	80015b4 <prvAddNewTaskToReadyList+0x74>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	4a18      	ldr	r2, [pc, #96]	; (8001614 <prvAddNewTaskToReadyList+0xd4>)
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <prvAddNewTaskToReadyList+0xd8>)
 80015c2:	441a      	add	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3304      	adds	r3, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f7fe ff4f 	bl	800046e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80015d0:	f7ff f92c 	bl	800082c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <prvAddNewTaskToReadyList+0xcc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00e      	beq.n	80015fa <prvAddNewTaskToReadyList+0xba>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <prvAddNewTaskToReadyList+0xc8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d207      	bcs.n	80015fa <prvAddNewTaskToReadyList+0xba>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <prvAddNewTaskToReadyList+0xdc>)
 80015ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f3bf 8f4f 	dsb	sy
 80015f6:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000104 	.word	0x20000104
 8001608:	2000002c 	.word	0x2000002c
 800160c:	20000110 	.word	0x20000110
 8001610:	20000120 	.word	0x20000120
 8001614:	2000010c 	.word	0x2000010c
 8001618:	20000030 	.word	0x20000030
 800161c:	e000ed04 	.word	0xe000ed04

08001620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d016      	beq.n	8001660 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <vTaskDelay+0x60>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <vTaskDelay+0x2e>
 800163a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800163e:	f383 8811 	msr	BASEPRI, r3
 8001642:	f3bf 8f6f 	isb	sy
 8001646:	f3bf 8f4f 	dsb	sy
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	e7fe      	b.n	800164c <vTaskDelay+0x2c>
            vTaskSuspendAll();
 800164e:	f000 f867 	bl	8001720 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001652:	2100      	movs	r1, #0
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fc35 	bl	8001ec4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800165a:	f000 f86f 	bl	800173c <xTaskResumeAll>
 800165e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d107      	bne.n	8001676 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <vTaskDelay+0x64>)
 8001668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f3bf 8f4f 	dsb	sy
 8001672:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000012c 	.word	0x2000012c
 8001684:	e000ed04 	.word	0xe000ed04

08001688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <vTaskStartScheduler+0x80>)
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	2300      	movs	r3, #0
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2300      	movs	r3, #0
 8001698:	2220      	movs	r2, #32
 800169a:	491c      	ldr	r1, [pc, #112]	; (800170c <vTaskStartScheduler+0x84>)
 800169c:	481c      	ldr	r0, [pc, #112]	; (8001710 <vTaskStartScheduler+0x88>)
 800169e:	f7ff fe7b 	bl	8001398 <xTaskCreate>
 80016a2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80016aa:	f000 fc5f 	bl	8001f6c <xTimerCreateTimerTask>
 80016ae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d115      	bne.n	80016e2 <vTaskStartScheduler+0x5a>
 80016b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ba:	f383 8811 	msr	BASEPRI, r3
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <vTaskStartScheduler+0x8c>)
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <vTaskStartScheduler+0x90>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <vTaskStartScheduler+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80016dc:	f7fe ffda 	bl	8000694 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 80016e0:	e00d      	b.n	80016fe <vTaskStartScheduler+0x76>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d109      	bne.n	80016fe <vTaskStartScheduler+0x76>
 80016ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ee:	f383 8811 	msr	BASEPRI, r3
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	f3bf 8f4f 	dsb	sy
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	e7fe      	b.n	80016fc <vTaskStartScheduler+0x74>
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000128 	.word	0x20000128
 800170c:	08002f8c 	.word	0x08002f8c
 8001710:	08001d29 	.word	0x08001d29
 8001714:	20000124 	.word	0x20000124
 8001718:	20000110 	.word	0x20000110
 800171c:	20000108 	.word	0x20000108

08001720 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <vTaskSuspendAll+0x18>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a03      	ldr	r2, [pc, #12]	; (8001738 <vTaskSuspendAll+0x18>)
 800172c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	2000012c 	.word	0x2000012c

0800173c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <xTaskResumeAll+0x114>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <xTaskResumeAll+0x2a>
 8001752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001756:	f383 8811 	msr	BASEPRI, r3
 800175a:	f3bf 8f6f 	isb	sy
 800175e:	f3bf 8f4f 	dsb	sy
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	e7fe      	b.n	8001764 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001766:	f7ff f833 	bl	80007d0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800176a:	4b39      	ldr	r3, [pc, #228]	; (8001850 <xTaskResumeAll+0x114>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3b01      	subs	r3, #1
 8001770:	4a37      	ldr	r2, [pc, #220]	; (8001850 <xTaskResumeAll+0x114>)
 8001772:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <xTaskResumeAll+0x114>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d162      	bne.n	8001842 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <xTaskResumeAll+0x118>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d05e      	beq.n	8001842 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001784:	e02f      	b.n	80017e6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <xTaskResumeAll+0x11c>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3318      	adds	r3, #24
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fec8 	bl	8000528 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3304      	adds	r3, #4
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fec3 	bl	8000528 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <xTaskResumeAll+0x120>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d903      	bls.n	80017b6 <xTaskResumeAll+0x7a>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	4a2a      	ldr	r2, [pc, #168]	; (800185c <xTaskResumeAll+0x120>)
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <xTaskResumeAll+0x124>)
 80017c4:	441a      	add	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3304      	adds	r3, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4610      	mov	r0, r2
 80017ce:	f7fe fe4e 	bl	800046e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <xTaskResumeAll+0x128>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	429a      	cmp	r2, r3
 80017de:	d302      	bcc.n	80017e6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <xTaskResumeAll+0x12c>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <xTaskResumeAll+0x11c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1cb      	bne.n	8001786 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80017f4:	f000 fb2c 	bl	8001e50 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80017f8:	4b1c      	ldr	r3, [pc, #112]	; (800186c <xTaskResumeAll+0x130>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d010      	beq.n	8001826 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001804:	f000 f846 	bl	8001894 <xTaskIncrementTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <xTaskResumeAll+0x12c>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f1      	bne.n	8001804 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <xTaskResumeAll+0x130>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <xTaskResumeAll+0x12c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800182e:	2301      	movs	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <xTaskResumeAll+0x134>)
 8001834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f3bf 8f4f 	dsb	sy
 800183e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001842:	f7fe fff3 	bl	800082c <vPortExitCritical>

    return xAlreadyYielded;
 8001846:	68bb      	ldr	r3, [r7, #8]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000012c 	.word	0x2000012c
 8001854:	20000104 	.word	0x20000104
 8001858:	200000c4 	.word	0x200000c4
 800185c:	2000010c 	.word	0x2000010c
 8001860:	20000030 	.word	0x20000030
 8001864:	2000002c 	.word	0x2000002c
 8001868:	20000118 	.word	0x20000118
 800186c:	20000114 	.word	0x20000114
 8001870:	e000ed04 	.word	0xe000ed04

08001874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <xTaskGetTickCount+0x1c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001880:	687b      	ldr	r3, [r7, #4]
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000108 	.word	0x20000108

08001894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <xTaskIncrementTick+0x144>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 808e 	bne.w	80019c4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80018a8:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <xTaskIncrementTick+0x148>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80018b0:	4a4a      	ldr	r2, [pc, #296]	; (80019dc <xTaskIncrementTick+0x148>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d11f      	bne.n	80018fc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80018bc:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <xTaskIncrementTick+0x14c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <xTaskIncrementTick+0x46>
 80018c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ca:	f383 8811 	msr	BASEPRI, r3
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	e7fe      	b.n	80018d8 <xTaskIncrementTick+0x44>
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <xTaskIncrementTick+0x14c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	4b40      	ldr	r3, [pc, #256]	; (80019e4 <xTaskIncrementTick+0x150>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a3e      	ldr	r2, [pc, #248]	; (80019e0 <xTaskIncrementTick+0x14c>)
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4a3e      	ldr	r2, [pc, #248]	; (80019e4 <xTaskIncrementTick+0x150>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <xTaskIncrementTick+0x154>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <xTaskIncrementTick+0x154>)
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	f000 faaa 	bl	8001e50 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80018fc:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <xTaskIncrementTick+0x158>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	429a      	cmp	r2, r3
 8001904:	d349      	bcc.n	800199a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001906:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <xTaskIncrementTick+0x14c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d104      	bne.n	800191a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001910:	4b36      	ldr	r3, [pc, #216]	; (80019ec <xTaskIncrementTick+0x158>)
 8001912:	f04f 32ff 	mov.w	r2, #4294967295
 8001916:	601a      	str	r2, [r3, #0]
                    break;
 8001918:	e03f      	b.n	800199a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <xTaskIncrementTick+0x14c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	429a      	cmp	r2, r3
 8001930:	d203      	bcs.n	800193a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001932:	4a2e      	ldr	r2, [pc, #184]	; (80019ec <xTaskIncrementTick+0x158>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001938:	e02f      	b.n	800199a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3304      	adds	r3, #4
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fdf2 	bl	8000528 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3318      	adds	r3, #24
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fde9 	bl	8000528 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <xTaskIncrementTick+0x15c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d903      	bls.n	800196a <xTaskIncrementTick+0xd6>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <xTaskIncrementTick+0x15c>)
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <xTaskIncrementTick+0x160>)
 8001978:	441a      	add	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	3304      	adds	r3, #4
 800197e:	4619      	mov	r1, r3
 8001980:	4610      	mov	r0, r2
 8001982:	f7fe fd74 	bl	800046e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <xTaskIncrementTick+0x164>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	429a      	cmp	r2, r3
 8001992:	d3b8      	bcc.n	8001906 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8001994:	2301      	movs	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001998:	e7b5      	b.n	8001906 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <xTaskIncrementTick+0x164>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	4914      	ldr	r1, [pc, #80]	; (80019f4 <xTaskIncrementTick+0x160>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d901      	bls.n	80019b6 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <xTaskIncrementTick+0x168>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 80019be:	2301      	movs	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e004      	b.n	80019ce <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <xTaskIncrementTick+0x16c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <xTaskIncrementTick+0x16c>)
 80019cc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80019ce:	697b      	ldr	r3, [r7, #20]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000012c 	.word	0x2000012c
 80019dc:	20000108 	.word	0x20000108
 80019e0:	200000bc 	.word	0x200000bc
 80019e4:	200000c0 	.word	0x200000c0
 80019e8:	2000011c 	.word	0x2000011c
 80019ec:	20000124 	.word	0x20000124
 80019f0:	2000010c 	.word	0x2000010c
 80019f4:	20000030 	.word	0x20000030
 80019f8:	2000002c 	.word	0x2000002c
 80019fc:	20000118 	.word	0x20000118
 8001a00:	20000114 	.word	0x20000114

08001a04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <vTaskSwitchContext+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <vTaskSwitchContext+0xa8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001a18:	e040      	b.n	8001a9c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <vTaskSwitchContext+0xa8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <vTaskSwitchContext+0xac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e00f      	b.n	8001a48 <vTaskSwitchContext+0x44>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <vTaskSwitchContext+0x3e>
 8001a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a32:	f383 8811 	msr	BASEPRI, r3
 8001a36:	f3bf 8f6f 	isb	sy
 8001a3a:	f3bf 8f4f 	dsb	sy
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	e7fe      	b.n	8001a40 <vTaskSwitchContext+0x3c>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	491a      	ldr	r1, [pc, #104]	; (8001ab4 <vTaskSwitchContext+0xb0>)
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0e5      	beq.n	8001a28 <vTaskSwitchContext+0x24>
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <vTaskSwitchContext+0xb0>)
 8001a68:	4413      	add	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d104      	bne.n	8001a8c <vTaskSwitchContext+0x88>
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <vTaskSwitchContext+0xb4>)
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <vTaskSwitchContext+0xac>)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	2000012c 	.word	0x2000012c
 8001aac:	20000118 	.word	0x20000118
 8001ab0:	2000010c 	.word	0x2000010c
 8001ab4:	20000030 	.word	0x20000030
 8001ab8:	2000002c 	.word	0x2000002c

08001abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <vTaskPlaceOnEventList+0x24>
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e7fe      	b.n	8001ade <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <vTaskPlaceOnEventList+0x44>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3318      	adds	r3, #24
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7fe fce4 	bl	80004b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001aee:	2101      	movs	r1, #1
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f000 f9e7 	bl	8001ec4 <prvAddCurrentTaskToDelayedList>
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000002c 	.word	0x2000002c

08001b04 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d109      	bne.n	8001b2a <vTaskPlaceOnEventListRestricted+0x26>
 8001b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1a:	f383 8811 	msr	BASEPRI, r3
 8001b1e:	f3bf 8f6f 	isb	sy
 8001b22:	f3bf 8f4f 	dsb	sy
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e7fe      	b.n	8001b28 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <vTaskPlaceOnEventListRestricted+0x50>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	4619      	mov	r1, r3
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f7fe fc9b 	bl	800046e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	68b8      	ldr	r0, [r7, #8]
 8001b48:	f000 f9bc 	bl	8001ec4 <prvAddCurrentTaskToDelayedList>
    }
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	2000002c 	.word	0x2000002c

08001b58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <xTaskRemoveFromEventList+0x2a>
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	e7fe      	b.n	8001b80 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	3318      	adds	r3, #24
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcce 	bl	8000528 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <xTaskRemoveFromEventList+0xac>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d11d      	bne.n	8001bd0 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3304      	adds	r3, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcc5 	bl	8000528 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <xTaskRemoveFromEventList+0xb0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d903      	bls.n	8001bb2 <xTaskRemoveFromEventList+0x5a>
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <xTaskRemoveFromEventList+0xb0>)
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <xTaskRemoveFromEventList+0xb4>)
 8001bc0:	441a      	add	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4610      	mov	r0, r2
 8001bca:	f7fe fc50 	bl	800046e <vListInsertEnd>
 8001bce:	e005      	b.n	8001bdc <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	3318      	adds	r3, #24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480e      	ldr	r0, [pc, #56]	; (8001c10 <xTaskRemoveFromEventList+0xb8>)
 8001bd8:	f7fe fc49 	bl	800046e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <xTaskRemoveFromEventList+0xbc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d905      	bls.n	8001bf6 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001bea:	2301      	movs	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <xTaskRemoveFromEventList+0xc0>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e001      	b.n	8001bfa <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001bfa:	697b      	ldr	r3, [r7, #20]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2000012c 	.word	0x2000012c
 8001c08:	2000010c 	.word	0x2000010c
 8001c0c:	20000030 	.word	0x20000030
 8001c10:	200000c4 	.word	0x200000c4
 8001c14:	2000002c 	.word	0x2000002c
 8001c18:	20000118 	.word	0x20000118

08001c1c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <vTaskInternalSetTimeOutState+0x24>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <vTaskInternalSetTimeOutState+0x28>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	605a      	str	r2, [r3, #4]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	2000011c 	.word	0x2000011c
 8001c44:	20000108 	.word	0x20000108

08001c48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <xTaskCheckForTimeOut+0x24>
 8001c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5c:	f383 8811 	msr	BASEPRI, r3
 8001c60:	f3bf 8f6f 	isb	sy
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	e7fe      	b.n	8001c6a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <xTaskCheckForTimeOut+0x3e>
 8001c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	e7fe      	b.n	8001c84 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8001c86:	f7fe fda3 	bl	80007d0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <xTaskCheckForTimeOut+0xc0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d102      	bne.n	8001caa <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	e026      	b.n	8001cf8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <xTaskCheckForTimeOut+0xc4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d00a      	beq.n	8001ccc <xTaskCheckForTimeOut+0x84>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d305      	bcc.n	8001ccc <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e015      	b.n	8001cf8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d20b      	bcs.n	8001cee <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad2      	subs	r2, r2, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ff9a 	bl	8001c1c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	e004      	b.n	8001cf8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001cf8:	f7fe fd98 	bl	800082c <vPortExitCritical>

    return xReturn;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000108 	.word	0x20000108
 8001d0c:	2000011c 	.word	0x2000011c

08001d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <vTaskMissedYield+0x14>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20000118 	.word	0x20000118

08001d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001d30:	f000 f852 	bl	8001dd8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <prvIdleTask+0x28>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d9f9      	bls.n	8001d30 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <prvIdleTask+0x2c>)
 8001d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001d4c:	e7f0      	b.n	8001d30 <prvIdleTask+0x8>
 8001d4e:	bf00      	nop
 8001d50:	20000030 	.word	0x20000030
 8001d54:	e000ed04 	.word	0xe000ed04

08001d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	e00c      	b.n	8001d7e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <prvInitialiseTaskLists+0x60>)
 8001d70:	4413      	add	r3, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb4e 	bl	8000414 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d9ef      	bls.n	8001d64 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <prvInitialiseTaskLists+0x64>)
 8001d86:	f7fe fb45 	bl	8000414 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001d8a:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <prvInitialiseTaskLists+0x68>)
 8001d8c:	f7fe fb42 	bl	8000414 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <prvInitialiseTaskLists+0x6c>)
 8001d92:	f7fe fb3f 	bl	8000414 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001d96:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <prvInitialiseTaskLists+0x70>)
 8001d98:	f7fe fb3c 	bl	8000414 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <prvInitialiseTaskLists+0x74>)
 8001d9e:	f7fe fb39 	bl	8000414 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <prvInitialiseTaskLists+0x78>)
 8001da4:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <prvInitialiseTaskLists+0x64>)
 8001da6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <prvInitialiseTaskLists+0x7c>)
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <prvInitialiseTaskLists+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000030 	.word	0x20000030
 8001dbc:	20000094 	.word	0x20000094
 8001dc0:	200000a8 	.word	0x200000a8
 8001dc4:	200000c4 	.word	0x200000c4
 8001dc8:	200000d8 	.word	0x200000d8
 8001dcc:	200000f0 	.word	0x200000f0
 8001dd0:	200000bc 	.word	0x200000bc
 8001dd4:	200000c0 	.word	0x200000c0

08001dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001dde:	e019      	b.n	8001e14 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001de0:	f7fe fcf6 	bl	80007d0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <prvCheckTasksWaitingTermination+0x4c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb99 	bl	8000528 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <prvCheckTasksWaitingTermination+0x50>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <prvCheckTasksWaitingTermination+0x50>)
 8001dfe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <prvCheckTasksWaitingTermination+0x54>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <prvCheckTasksWaitingTermination+0x54>)
 8001e08:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001e0a:	f7fe fd0f 	bl	800082c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f80e 	bl	8001e30 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <prvCheckTasksWaitingTermination+0x54>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e1      	bne.n	8001de0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200000d8 	.word	0x200000d8
 8001e28:	20000104 	.word	0x20000104
 8001e2c:	200000ec 	.word	0x200000ec

08001e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fbe7 	bl	8002610 <vPortFree>
                vPortFree( pxTCB );
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fbe4 	bl	8002610 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <prvResetNextTaskUnblockTime+0x30>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d104      	bne.n	8001e68 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <prvResetNextTaskUnblockTime+0x34>)
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001e66:	e005      	b.n	8001e74 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <prvResetNextTaskUnblockTime+0x30>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <prvResetNextTaskUnblockTime+0x34>)
 8001e72:	6013      	str	r3, [r2, #0]
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200000bc 	.word	0x200000bc
 8001e84:	20000124 	.word	0x20000124

08001e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <xTaskGetSchedulerState+0x34>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001e96:	2301      	movs	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e008      	b.n	8001eae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <xTaskGetSchedulerState+0x38>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e001      	b.n	8001eae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001eae:	687b      	ldr	r3, [r7, #4]
    }
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000110 	.word	0x20000110
 8001ec0:	2000012c 	.word	0x2000012c

08001ec4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001ece:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <prvAddCurrentTaskToDelayedList+0x90>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb24 	bl	8000528 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d10a      	bne.n	8001efe <prvAddCurrentTaskToDelayedList+0x3a>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <prvAddCurrentTaskToDelayedList+0x98>)
 8001ef8:	f7fe fab9 	bl	800046e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001efc:	e026      	b.n	8001f4c <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d209      	bcs.n	8001f2a <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f7fe fac7 	bl	80004b6 <vListInsert>
}
 8001f28:	e010      	b.n	8001f4c <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <prvAddCurrentTaskToDelayedList+0x94>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f7fe fabd 	bl	80004b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d202      	bcs.n	8001f4c <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000108 	.word	0x20000108
 8001f58:	2000002c 	.word	0x2000002c
 8001f5c:	200000f0 	.word	0x200000f0
 8001f60:	200000c0 	.word	0x200000c0
 8001f64:	200000bc 	.word	0x200000bc
 8001f68:	20000124 	.word	0x20000124

08001f6c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001f76:	f000 facf 	bl	8002518 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <xTimerCreateTimerTask+0x50>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <xTimerCreateTimerTask+0x54>)
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	2303      	movs	r3, #3
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <xTimerCreateTimerTask+0x58>)
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <xTimerCreateTimerTask+0x5c>)
 8001f92:	f7ff fa01 	bl	8001398 <xTaskCreate>
 8001f96:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <xTimerCreateTimerTask+0x46>
 8001f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	e7fe      	b.n	8001fb0 <xTimerCreateTimerTask+0x44>
        return xReturn;
 8001fb2:	687b      	ldr	r3, [r7, #4]
    }
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000160 	.word	0x20000160
 8001fc0:	20000164 	.word	0x20000164
 8001fc4:	08002fa4 	.word	0x08002fa4
 8001fc8:	080020fd 	.word	0x080020fd

08001fcc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <xTimerGenericCommand+0x2c>
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	e7fe      	b.n	8001ff6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <xTimerGenericCommand+0x94>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02a      	beq.n	8002056 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b05      	cmp	r3, #5
 8002010:	dc18      	bgt.n	8002044 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002012:	f7ff ff39 	bl	8001e88 <xTaskGetSchedulerState>
 8002016:	4603      	mov	r3, r0
 8002018:	2b02      	cmp	r3, #2
 800201a:	d109      	bne.n	8002030 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <xTimerGenericCommand+0x94>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	f107 0114 	add.w	r1, r7, #20
 8002024:	2300      	movs	r3, #0
 8002026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002028:	f7fe fdbe 	bl	8000ba8 <xQueueGenericSend>
 800202c:	6278      	str	r0, [r7, #36]	; 0x24
 800202e:	e012      	b.n	8002056 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <xTimerGenericCommand+0x94>)
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	f107 0114 	add.w	r1, r7, #20
 8002038:	2300      	movs	r3, #0
 800203a:	2200      	movs	r2, #0
 800203c:	f7fe fdb4 	bl	8000ba8 <xQueueGenericSend>
 8002040:	6278      	str	r0, [r7, #36]	; 0x24
 8002042:	e008      	b.n	8002056 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <xTimerGenericCommand+0x94>)
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	f107 0114 	add.w	r1, r7, #20
 800204c:	2300      	movs	r3, #0
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	f7fe fea4 	bl	8000d9c <xQueueGenericSendFromISR>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002058:	4618      	mov	r0, r3
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000160 	.word	0x20000160

08002064 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <prvProcessExpiredTimer+0x94>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3304      	adds	r3, #4
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa53 	bl	8000528 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d021      	beq.n	80020d4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	699a      	ldr	r2, [r3, #24]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	18d1      	adds	r1, r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f000 f8d1 	bl	8002244 <prvInsertTimerInActiveList>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01e      	beq.n	80020e6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80020a8:	2300      	movs	r3, #0
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2300      	movs	r3, #0
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	2100      	movs	r1, #0
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f7ff ff8a 	bl	8001fcc <xTimerGenericCommand>
 80020b8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d112      	bne.n	80020e6 <prvProcessExpiredTimer+0x82>
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e7fe      	b.n	80020d2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	4798      	blx	r3
    }
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000158 	.word	0x20000158

080020fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f857 	bl	80021bc <prvGetNextExpireTime>
 800210e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4619      	mov	r1, r3
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f803 	bl	8002120 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800211a:	f000 f8d5 	bl	80022c8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800211e:	e7f1      	b.n	8002104 <prvTimerTask+0x8>

08002120 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800212a:	f7ff faf9 	bl	8001720 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f866 	bl	8002204 <prvSampleTimeNow>
 8002138:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d130      	bne.n	80021a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <prvProcessTimerOrBlockTask+0x3c>
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	429a      	cmp	r2, r3
 800214c:	d806      	bhi.n	800215c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800214e:	f7ff faf5 	bl	800173c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff ff85 	bl	8002064 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800215a:	e024      	b.n	80021a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <prvProcessTimerOrBlockTask+0x90>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <prvProcessTimerOrBlockTask+0x50>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <prvProcessTimerOrBlockTask+0x52>
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <prvProcessTimerOrBlockTask+0x94>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f7ff f8d5 	bl	8001330 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002186:	f7ff fad9 	bl	800173c <xTaskResumeAll>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <prvProcessTimerOrBlockTask+0x98>)
 8002192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	f3bf 8f6f 	isb	sy
    }
 80021a0:	e001      	b.n	80021a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80021a2:	f7ff facb 	bl	800173c <xTaskResumeAll>
    }
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000015c 	.word	0x2000015c
 80021b4:	20000160 	.word	0x20000160
 80021b8:	e000ed04 	.word	0xe000ed04

080021bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80021c4:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <prvGetNextExpireTime+0x44>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <prvGetNextExpireTime+0x16>
 80021ce:	2201      	movs	r2, #1
 80021d0:	e000      	b.n	80021d4 <prvGetNextExpireTime+0x18>
 80021d2:	2200      	movs	r2, #0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <prvGetNextExpireTime+0x44>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e001      	b.n	80021f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80021f0:	68fb      	ldr	r3, [r7, #12]
    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000158 	.word	0x20000158

08002204 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800220c:	f7ff fb32 	bl	8001874 <xTaskGetTickCount>
 8002210:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <prvSampleTimeNow+0x3c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d205      	bcs.n	8002228 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800221c:	f000 f918 	bl	8002450 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e002      	b.n	800222e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <prvSampleTimeNow+0x3c>)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002234:	68fb      	ldr	r3, [r7, #12]
    }
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000168 	.word	0x20000168

08002244 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d812      	bhi.n	8002290 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	429a      	cmp	r2, r3
 8002276:	d302      	bcc.n	800227e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002278:	2301      	movs	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e01b      	b.n	80022b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <prvInsertTimerInActiveList+0x7c>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3304      	adds	r3, #4
 8002286:	4619      	mov	r1, r3
 8002288:	4610      	mov	r0, r2
 800228a:	f7fe f914 	bl	80004b6 <vListInsert>
 800228e:	e012      	b.n	80022b6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d206      	bcs.n	80022a6 <prvInsertTimerInActiveList+0x62>
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d302      	bcc.n	80022a6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80022a0:	2301      	movs	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e007      	b.n	80022b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <prvInsertTimerInActiveList+0x80>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3304      	adds	r3, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	4610      	mov	r0, r2
 80022b2:	f7fe f900 	bl	80004b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000015c 	.word	0x2000015c
 80022c4:	20000158 	.word	0x20000158

080022c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	; 0x30
 80022cc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022ce:	e0ac      	b.n	800242a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f2c0 80a8 	blt.w	8002428 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	3304      	adds	r3, #4
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f91d 	bl	8000528 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff87 	bl	8002204 <prvSampleTimeNow>
 80022f6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b09      	cmp	r3, #9
 80022fc:	f200 8095 	bhi.w	800242a <prvProcessReceivedCommands+0x162>
 8002300:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <prvProcessReceivedCommands+0x40>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	08002331 	.word	0x08002331
 800230c:	08002331 	.word	0x08002331
 8002310:	08002331 	.word	0x08002331
 8002314:	080023a3 	.word	0x080023a3
 8002318:	080023b7 	.word	0x080023b7
 800231c:	080023ff 	.word	0x080023ff
 8002320:	08002331 	.word	0x08002331
 8002324:	08002331 	.word	0x08002331
 8002328:	080023a3 	.word	0x080023a3
 800232c:	080023b7 	.word	0x080023b7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	18d1      	adds	r1, r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002350:	f7ff ff78 	bl	8002244 <prvInsertTimerInActiveList>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d067      	beq.n	800242a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002360:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d05c      	beq.n	800242a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	441a      	add	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2300      	movs	r3, #0
 800237e:	2100      	movs	r1, #0
 8002380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002382:	f7ff fe23 	bl	8001fcc <xTimerGenericCommand>
 8002386:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d14d      	bne.n	800242a <prvProcessReceivedCommands+0x162>
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e7fe      	b.n	80023a0 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80023b4:	e039      	b.n	800242a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <prvProcessReceivedCommands+0x122>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e7fe      	b.n	80023e8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	18d1      	adds	r1, r2, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023f8:	f7ff ff24 	bl	8002244 <prvInsertTimerInActiveList>
                        break;
 80023fc:	e015      	b.n	800242a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 800240c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800240e:	f000 f8ff 	bl	8002610 <vPortFree>
 8002412:	e00a      	b.n	800242a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	b2da      	uxtb	r2, r3
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002426:	e000      	b.n	800242a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002428:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <prvProcessReceivedCommands+0x184>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f107 0108 	add.w	r1, r7, #8
 8002432:	2200      	movs	r2, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fd57 	bl	8000ee8 <xQueueReceive>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	f47f af47 	bne.w	80022d0 <prvProcessReceivedCommands+0x8>
        }
    }
 8002442:	bf00      	nop
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000160 	.word	0x20000160

08002450 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002456:	e047      	b.n	80024e8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <prvSwitchTimerLists+0xc0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <prvSwitchTimerLists+0xc0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3304      	adds	r3, #4
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f859 	bl	8000528 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02d      	beq.n	80024e8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	429a      	cmp	r2, r3
 800249c:	d90e      	bls.n	80024bc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <prvSwitchTimerLists+0xc0>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7fd fffe 	bl	80004b6 <vListInsert>
 80024ba:	e015      	b.n	80024e8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024bc:	2300      	movs	r3, #0
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	2100      	movs	r1, #0
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7ff fd80 	bl	8001fcc <xTimerGenericCommand>
 80024cc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <prvSwitchTimerLists+0x98>
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	e7fe      	b.n	80024e6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <prvSwitchTimerLists+0xc0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1b2      	bne.n	8002458 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <prvSwitchTimerLists+0xc0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <prvSwitchTimerLists+0xc4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <prvSwitchTimerLists+0xc0>)
 80024fe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <prvSwitchTimerLists+0xc4>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	6013      	str	r3, [r2, #0]
    }
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000158 	.word	0x20000158
 8002514:	2000015c 	.word	0x2000015c

08002518 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800251c:	f7fe f958 	bl	80007d0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <prvCheckForValidListAndQueue+0x54>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d11d      	bne.n	8002564 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002528:	4811      	ldr	r0, [pc, #68]	; (8002570 <prvCheckForValidListAndQueue+0x58>)
 800252a:	f7fd ff73 	bl	8000414 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800252e:	4811      	ldr	r0, [pc, #68]	; (8002574 <prvCheckForValidListAndQueue+0x5c>)
 8002530:	f7fd ff70 	bl	8000414 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <prvCheckForValidListAndQueue+0x60>)
 8002536:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <prvCheckForValidListAndQueue+0x58>)
 8002538:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <prvCheckForValidListAndQueue+0x64>)
 800253c:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <prvCheckForValidListAndQueue+0x5c>)
 800253e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002540:	2200      	movs	r2, #0
 8002542:	210c      	movs	r1, #12
 8002544:	2005      	movs	r0, #5
 8002546:	f7fe fabd 	bl	8000ac4 <xQueueGenericCreate>
 800254a:	4602      	mov	r2, r0
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <prvCheckForValidListAndQueue+0x54>)
 800254e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <prvCheckForValidListAndQueue+0x54>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <prvCheckForValidListAndQueue+0x54>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4908      	ldr	r1, [pc, #32]	; (8002580 <prvCheckForValidListAndQueue+0x68>)
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe febe 	bl	80012e0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002564:	f7fe f962 	bl	800082c <vPortExitCritical>
    }
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000160 	.word	0x20000160
 8002570:	20000130 	.word	0x20000130
 8002574:	20000144 	.word	0x20000144
 8002578:	20000158 	.word	0x20000158
 800257c:	2000015c 	.word	0x2000015c
 8002580:	08002fac 	.word	0x08002fac

08002584 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned to the required number of bytes. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <pvPortMalloc+0x20>
            {
                /* Byte alignment required. */
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f023 0307 	bic.w	r3, r3, #7
 80025a0:	3308      	adds	r3, #8
 80025a2:	607b      	str	r3, [r7, #4]
            }
        }
    #endif

    vTaskSuspendAll();
 80025a4:	f7ff f8bc 	bl	8001720 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <pvPortMalloc+0x80>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <pvPortMalloc+0x38>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <pvPortMalloc+0x84>)
 80025b2:	f023 0307 	bic.w	r3, r3, #7
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <pvPortMalloc+0x80>)
 80025ba:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation. */
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <pvPortMalloc+0x88>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4413      	add	r3, r2
 80025c4:	f24c 72f7 	movw	r2, #51191	; 0xc7f7
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d813      	bhi.n	80025f4 <pvPortMalloc+0x70>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <pvPortMalloc+0x88>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	441a      	add	r2, r3
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <pvPortMalloc+0x88>)
 80025d6:	681b      	ldr	r3, [r3, #0]
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80025d8:	429a      	cmp	r2, r3
 80025da:	d90b      	bls.n	80025f4 <pvPortMalloc+0x70>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <pvPortMalloc+0x80>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <pvPortMalloc+0x88>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <pvPortMalloc+0x88>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <pvPortMalloc+0x88>)
 80025f2:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80025f4:	f7ff f8a2 	bl	800173c <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 80025f8:	68fb      	ldr	r3, [r7, #12]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000c970 	.word	0x2000c970
 8002608:	20000174 	.word	0x20000174
 800260c:	2000c96c 	.word	0x2000c96c

08002610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <vPortFree+0x22>
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	e7fe      	b.n	8002630 <vPortFree+0x20>
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002642:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002644:	f7fd fed0 	bl	80003e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002648:	480c      	ldr	r0, [pc, #48]	; (800267c <LoopForever+0x6>)
  ldr r1, =_edata
 800264a:	490d      	ldr	r1, [pc, #52]	; (8002680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <LoopForever+0xe>)
  movs r3, #0
 800264e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002650:	e002      	b.n	8002658 <LoopCopyDataInit>

08002652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002656:	3304      	adds	r3, #4

08002658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800265a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800265c:	d3f9      	bcc.n	8002652 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002660:	4c0a      	ldr	r4, [pc, #40]	; (800268c <LoopForever+0x16>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002664:	e001      	b.n	800266a <LoopFillZerobss>

08002666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002668:	3204      	adds	r2, #4

0800266a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800266a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800266c:	d3fb      	bcc.n	8002666 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800266e:	f000 fc49 	bl	8002f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002672:	f000 f80f 	bl	8002694 <main>

08002676 <LoopForever>:

LoopForever:
    b LoopForever
 8002676:	e7fe      	b.n	8002676 <LoopForever>
  ldr   r0, =_estack
 8002678:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800267c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002680:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002684:	08003050 	.word	0x08003050
  ldr r2, =_sbss
 8002688:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800268c:	2000c9f0 	.word	0x2000c9f0

08002690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC1_2_IRQHandler>
	...

08002694 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af02      	add	r7, sp, #8
	InitRCC();
 800269a:	f000 f92b 	bl	80028f4 <InitRCC>
	InitLedGPIO();
 800269e:	f000 fa21 	bl	8002ae4 <InitLedGPIO>
	InitUSART1();
 80026a2:	f000 fb4f 	bl	8002d44 <InitUSART1>
	InitADC();
 80026a6:	f7fd fdbb 	bl	8000220 <InitADC>

	xTaskCreate(vTaskLED, "LED", 128, 0 , 1, &TaskConvADCHandle);
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <main+0x68>)
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2301      	movs	r3, #1
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2300      	movs	r3, #0
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	4912      	ldr	r1, [pc, #72]	; (8002700 <main+0x6c>)
 80026b8:	4812      	ldr	r0, [pc, #72]	; (8002704 <main+0x70>)
 80026ba:	f7fe fe6d 	bl	8001398 <xTaskCreate>
	xTaskCreate(vTaskSendUSART, "SendUSART", 128, 0 , 1, &TaskSendUSARTHandle);
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <main+0x74>)
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2301      	movs	r3, #1
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	4910      	ldr	r1, [pc, #64]	; (800270c <main+0x78>)
 80026cc:	4810      	ldr	r0, [pc, #64]	; (8002710 <main+0x7c>)
 80026ce:	f7fe fe63 	bl	8001398 <xTaskCreate>
	xTaskCreate(vTaskConvADC, "ADC", 128, 0, 2, &TaskConvADCHandle);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <main+0x68>)
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	2302      	movs	r3, #2
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2300      	movs	r3, #0
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	490d      	ldr	r1, [pc, #52]	; (8002714 <main+0x80>)
 80026e0:	480d      	ldr	r0, [pc, #52]	; (8002718 <main+0x84>)
 80026e2:	f7fe fe59 	bl	8001398 <xTaskCreate>

	SendDataADC = xQueueCreate(ADCQUEUE, sizeof(uint16_t));
 80026e6:	2200      	movs	r2, #0
 80026e8:	2102      	movs	r1, #2
 80026ea:	2005      	movs	r0, #5
 80026ec:	f7fe f9ea 	bl	8000ac4 <xQueueGenericCreate>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <main+0x88>)
 80026f4:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 80026f6:	f7fe ffc7 	bl	8001688 <vTaskStartScheduler>

    while(1)
 80026fa:	e7fe      	b.n	80026fa <main+0x66>
 80026fc:	2000c9e0 	.word	0x2000c9e0
 8002700:	08002fb4 	.word	0x08002fb4
 8002704:	08002721 	.word	0x08002721
 8002708:	2000c9e8 	.word	0x2000c9e8
 800270c:	08002fb8 	.word	0x08002fb8
 8002710:	08002735 	.word	0x08002735
 8002714:	08002fc4 	.word	0x08002fc4
 8002718:	08002885 	.word	0x08002885
 800271c:	2000c9e4 	.word	0x2000c9e4

08002720 <vTaskLED>:
    {

    }
}

void vTaskLED (void *pvParameters){
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlinkLED (GREEN, 100);
 8002728:	2164      	movs	r1, #100	; 0x64
 800272a:	2005      	movs	r0, #5
 800272c:	f000 faf6 	bl	8002d1c <BlinkLED>
 8002730:	e7fa      	b.n	8002728 <vTaskLED+0x8>
	...

08002734 <vTaskSendUSART>:
	}
}

void vTaskSendUSART(void *pvParameters){
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

	uint16_t adcResult;

	portBASE_TYPE xStatus;
	static float adcCoeff = VREF/ADCRES;
	float t0Voltage = 500;
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <vTaskSendUSART+0x110>)
 800273e:	617b      	str	r3, [r7, #20]
	float TempCoeff = 10;
 8002740:	4b41      	ldr	r3, [pc, #260]	; (8002848 <vTaskSendUSART+0x114>)
 8002742:	613b      	str	r3, [r7, #16]
	static char adcResultStr[4],  VoltageStr[4], TemperatureStr[4];

	while(1)
	{

		if (uxQueueMessagesWaiting(SendDataADC) != 0)
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <vTaskSendUSART+0x118>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fca9 	bl	80010a0 <uxQueueMessagesWaiting>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f7      	beq.n	8002744 <vTaskSendUSART+0x10>
		{
			SetLED (RED, OFF);
 8002754:	2100      	movs	r1, #0
 8002756:	200f      	movs	r0, #15
 8002758:	f000 fa1a 	bl	8002b90 <SetLED>

			xStatus = xQueueReceive(SendDataADC, &adcResult, 0);
 800275c:	4b3b      	ldr	r3, [pc, #236]	; (800284c <vTaskSendUSART+0x118>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f107 010a 	add.w	r1, r7, #10
 8002764:	2200      	movs	r2, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fbbe 	bl	8000ee8 <xQueueReceive>
 800276c:	60f8      	str	r0, [r7, #12]
			if (xStatus == pdPASS) {
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d15f      	bne.n	8002834 <vTaskSendUSART+0x100>
				voltage = adcCoeff*((float)(adcResult));
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277e:	4b34      	ldr	r3, [pc, #208]	; (8002850 <vTaskSendUSART+0x11c>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <vTaskSendUSART+0x120>)
 800278a:	edc3 7a00 	vstr	s15, [r3]
				temperature = ((voltage - t0Voltage)/TempCoeff);
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <vTaskSendUSART+0x120>)
 8002790:	ed93 7a00 	vldr	s14, [r3]
 8002794:	edd7 7a05 	vldr	s15, [r7, #20]
 8002798:	ee77 6a67 	vsub.f32	s13, s14, s15
 800279c:	ed97 7a04 	vldr	s14, [r7, #16]
 80027a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a4:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <vTaskSendUSART+0x124>)
 80027a6:	edc3 7a00 	vstr	s15, [r3]
				ToggleLED(YELLOW);
 80027aa:	2009      	movs	r0, #9
 80027ac:	f000 fa7a 	bl	8002ca4 <ToggleLED>
				SendStringUSART1("Raw data: ");
 80027b0:	482a      	ldr	r0, [pc, #168]	; (800285c <vTaskSendUSART+0x128>)
 80027b2:	f000 fb57 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1(UtoaBuiltinDiv(adcResult, adcResultStr));
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	4929      	ldr	r1, [pc, #164]	; (8002860 <vTaskSendUSART+0x12c>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fb6e 	bl	8002e9c <UtoaBuiltinDiv>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fb4e 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1(" Voltage: ");
 80027c8:	4826      	ldr	r0, [pc, #152]	; (8002864 <vTaskSendUSART+0x130>)
 80027ca:	f000 fb4b 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1(UtoaBuiltinDiv((uint16_t)(voltage), VoltageStr));
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <vTaskSendUSART+0x120>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d8:	ee17 3a90 	vmov	r3, s15
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4922      	ldr	r1, [pc, #136]	; (8002868 <vTaskSendUSART+0x134>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fb5b 	bl	8002e9c <UtoaBuiltinDiv>
 80027e6:	4603      	mov	r3, r0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fb3b 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1(" mV");
 80027ee:	481f      	ldr	r0, [pc, #124]	; (800286c <vTaskSendUSART+0x138>)
 80027f0:	f000 fb38 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1(" Temperature: ");
 80027f4:	481e      	ldr	r0, [pc, #120]	; (8002870 <vTaskSendUSART+0x13c>)
 80027f6:	f000 fb35 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1(UtoaBuiltinDiv((uint16_t)(temperature), TemperatureStr));
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <vTaskSendUSART+0x124>)
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002804:	ee17 3a90 	vmov	r3, s15
 8002808:	b29b      	uxth	r3, r3
 800280a:	491a      	ldr	r1, [pc, #104]	; (8002874 <vTaskSendUSART+0x140>)
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fb45 	bl	8002e9c <UtoaBuiltinDiv>
 8002812:	4603      	mov	r3, r0
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fb25 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1(" C");
 800281a:	4817      	ldr	r0, [pc, #92]	; (8002878 <vTaskSendUSART+0x144>)
 800281c:	f000 fb22 	bl	8002e64 <SendStringUSART1>
				SendStringUSART1("\r\n");
 8002820:	4816      	ldr	r0, [pc, #88]	; (800287c <vTaskSendUSART+0x148>)
 8002822:	f000 fb1f 	bl	8002e64 <SendStringUSART1>
				ToggleLED(YELLOW);
 8002826:	2009      	movs	r0, #9
 8002828:	f000 fa3c 	bl	8002ca4 <ToggleLED>
				vTaskDelay(100);
 800282c:	2064      	movs	r0, #100	; 0x64
 800282e:	f7fe fef7 	bl	8001620 <vTaskDelay>
 8002832:	e787      	b.n	8002744 <vTaskSendUSART+0x10>
			}
			else
			{
				SendStringUSART1("Could not receive from the queue.\r\n");
 8002834:	4812      	ldr	r0, [pc, #72]	; (8002880 <vTaskSendUSART+0x14c>)
 8002836:	f000 fb15 	bl	8002e64 <SendStringUSART1>
				SetLED (RED, ON);
 800283a:	2101      	movs	r1, #1
 800283c:	200f      	movs	r0, #15
 800283e:	f000 f9a7 	bl	8002b90 <SetLED>
		if (uxQueueMessagesWaiting(SendDataADC) != 0)
 8002842:	e77f      	b.n	8002744 <vTaskSendUSART+0x10>
 8002844:	43fa0000 	.word	0x43fa0000
 8002848:	41200000 	.word	0x41200000
 800284c:	2000c9e4 	.word	0x2000c9e4
 8002850:	20000004 	.word	0x20000004
 8002854:	2000c974 	.word	0x2000c974
 8002858:	2000c978 	.word	0x2000c978
 800285c:	08002fc8 	.word	0x08002fc8
 8002860:	2000c97c 	.word	0x2000c97c
 8002864:	08002fd4 	.word	0x08002fd4
 8002868:	2000c980 	.word	0x2000c980
 800286c:	08002fe0 	.word	0x08002fe0
 8002870:	08002fe4 	.word	0x08002fe4
 8002874:	2000c984 	.word	0x2000c984
 8002878:	08002ff4 	.word	0x08002ff4
 800287c:	08002ff8 	.word	0x08002ff8
 8002880:	08002ffc 	.word	0x08002ffc

08002884 <vTaskConvADC>:


	}
}

void vTaskConvADC (void *pvParameters){
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

	portBASE_TYPE xStatus;

	while(1)
	{
		adcResult = StartConvADC();
 800288c:	f7fd fd90 	bl	80003b0 <StartConvADC>
 8002890:	4603      	mov	r3, r0
 8002892:	817b      	strh	r3, [r7, #10]

		xStatus = xQueueSend(SendDataADC, &adcResult, 0);
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <vTaskConvADC+0x5c>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	f107 010a 	add.w	r1, r7, #10
 800289c:	2300      	movs	r3, #0
 800289e:	2200      	movs	r2, #0
 80028a0:	f7fe f982 	bl	8000ba8 <xQueueGenericSend>
 80028a4:	60f8      	str	r0, [r7, #12]

		if (xStatus == pdPASS)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d103      	bne.n	80028b4 <vTaskConvADC+0x30>
		{
			SendStringUSART1("Sent.\r\n");
 80028ac:	480d      	ldr	r0, [pc, #52]	; (80028e4 <vTaskConvADC+0x60>)
 80028ae:	f000 fad9 	bl	8002e64 <SendStringUSART1>
 80028b2:	e00e      	b.n	80028d2 <vTaskConvADC+0x4e>
		}
		else
		{
			SendStringUSART1("Could not send to the queue. ");
 80028b4:	480c      	ldr	r0, [pc, #48]	; (80028e8 <vTaskConvADC+0x64>)
 80028b6:	f000 fad5 	bl	8002e64 <SendStringUSART1>
			SendStringUSART1(UtoaBuiltinDiv(adcResult, adcResultStr));
 80028ba:	897b      	ldrh	r3, [r7, #10]
 80028bc:	490b      	ldr	r1, [pc, #44]	; (80028ec <vTaskConvADC+0x68>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 faec 	bl	8002e9c <UtoaBuiltinDiv>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 facc 	bl	8002e64 <SendStringUSART1>
			SendStringUSART1("\r\n");
 80028cc:	4808      	ldr	r0, [pc, #32]	; (80028f0 <vTaskConvADC+0x6c>)
 80028ce:	f000 fac9 	bl	8002e64 <SendStringUSART1>
		}

		ToggleLED(WHITE);
 80028d2:	200d      	movs	r0, #13
 80028d4:	f000 f9e6 	bl	8002ca4 <ToggleLED>
		vTaskDelay(200);
 80028d8:	20c8      	movs	r0, #200	; 0xc8
 80028da:	f7fe fea1 	bl	8001620 <vTaskDelay>
		adcResult = StartConvADC();
 80028de:	e7d5      	b.n	800288c <vTaskConvADC+0x8>
 80028e0:	2000c9e4 	.word	0x2000c9e4
 80028e4:	08003020 	.word	0x08003020
 80028e8:	08003028 	.word	0x08003028
 80028ec:	2000c988 	.word	0x2000c988
 80028f0:	08002ff8 	.word	0x08002ff8

080028f4 <InitRCC>:

#include "sysinit.h"

/********************************************* Used functions ********************************************/

void InitRCC (void){
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
	uint8_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 80028fa:	2300      	movs	r3, #0
 80028fc:	71fb      	strb	r3, [r7, #7]

	PWR		-> CR1			|= PWR_CR1_VOS_0;							// Ensure range 1
 80028fe:	4b6b      	ldr	r3, [pc, #428]	; (8002aac <InitRCC+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a6a      	ldr	r2, [pc, #424]	; (8002aac <InitRCC+0x1b8>)
 8002904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002908:	6013      	str	r3, [r2, #0]
	PWR		-> CR5			&= ~PWR_CR5_R1MODE;							// Range 1 from normal to boost mode
 800290a:	4b68      	ldr	r3, [pc, #416]	; (8002aac <InitRCC+0x1b8>)
 800290c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002910:	4a66      	ldr	r2, [pc, #408]	; (8002aac <InitRCC+0x1b8>)
 8002912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	RCC		->CR			|= ((uint32_t)RCC_CR_HSEON); 				// Enable HSE
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <InitRCC+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <InitRCC+0x1bc>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));									// Ready to start HSE
 8002926:	bf00      	nop
 8002928:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <InitRCC+0x1bc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f9      	beq.n	8002928 <InitRCC+0x34>

	RCC		-> CR			|= RCC_CR_CSSON;
 8002934:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <InitRCC+0x1bc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5d      	ldr	r2, [pc, #372]	; (8002ab0 <InitRCC+0x1bc>)
 800293a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800293e:	6013      	str	r3, [r2, #0]

	FLASH	-> ACR			|= FLASH_ACR_PRFTEN;
 8002940:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <InitRCC+0x1c0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a5b      	ldr	r2, [pc, #364]	; (8002ab4 <InitRCC+0x1c0>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]
	FLASH	-> ACR			|= FLASH_ACR_LATENCY_4WS;					// See table 9
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <InitRCC+0x1c0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <InitRCC+0x1c0>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6013      	str	r3, [r2, #0]

	RCC		-> CFGR			|= RCC_CFGR_HPRE_DIV1;						// AHB = SYSCLK/1
 8002958:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <InitRCC+0x1bc>)
 800295a:	4a55      	ldr	r2, [pc, #340]	; (8002ab0 <InitRCC+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_PPRE1_DIV1;						// APB1 = HCLK/1
 8002960:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <InitRCC+0x1bc>)
 8002962:	4a53      	ldr	r2, [pc, #332]	; (8002ab0 <InitRCC+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_PPRE2_DIV1;						// APB2 = HCLK/1
 8002968:	4b51      	ldr	r3, [pc, #324]	; (8002ab0 <InitRCC+0x1bc>)
 800296a:	4a51      	ldr	r2, [pc, #324]	; (8002ab0 <InitRCC+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	6093      	str	r3, [r2, #8]

	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLPEN;						// clear PLLPEN bits
 8002970:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <InitRCC+0x1bc>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <InitRCC+0x1bc>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLP;						// clear PLLP bits
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <InitRCC+0x1bc>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a4b      	ldr	r2, [pc, #300]	; (8002ab0 <InitRCC+0x1bc>)
 8002982:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002986:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLQEN;						// clear PLLQEN bits
 8002988:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <InitRCC+0x1bc>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a48      	ldr	r2, [pc, #288]	; (8002ab0 <InitRCC+0x1bc>)
 800298e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002992:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLQ;						// clear PLLQ bits
 8002994:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <InitRCC+0x1bc>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a45      	ldr	r2, [pc, #276]	; (8002ab0 <InitRCC+0x1bc>)
 800299a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800299e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLREN;						// clear PLLREN bits
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <InitRCC+0x1bc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a42      	ldr	r2, [pc, #264]	; (8002ab0 <InitRCC+0x1bc>)
 80029a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029aa:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLR;						// clear PLLR bits
 80029ac:	4b40      	ldr	r3, [pc, #256]	; (8002ab0 <InitRCC+0x1bc>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a3f      	ldr	r2, [pc, #252]	; (8002ab0 <InitRCC+0x1bc>)
 80029b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029b6:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLN;						// clear PLLN bits
 80029b8:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <InitRCC+0x1bc>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <InitRCC+0x1bc>)
 80029be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029c2:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLM_0;						// clear PLLM bits
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <InitRCC+0x1bc>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a39      	ldr	r2, [pc, #228]	; (8002ab0 <InitRCC+0x1bc>)
 80029ca:	f023 0310 	bic.w	r3, r3, #16
 80029ce:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLSRC;               		// clear PLLSRC bits
 80029d0:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <InitRCC+0x1bc>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a36      	ldr	r2, [pc, #216]	; (8002ab0 <InitRCC+0x1bc>)
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLSRC_HSE; 					// source HSE = 8MHz
 80029dc:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <InitRCC+0x1bc>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a33      	ldr	r2, [pc, #204]	; (8002ab0 <InitRCC+0x1bc>)
 80029e2:	f043 0303 	orr.w	r3, r3, #3
 80029e6:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLM_0; 					// PLLM = HSE/1 = 8 MHz
 80029e8:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <InitRCC+0x1bc>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <InitRCC+0x1bc>)
 80029ee:	f023 0310 	bic.w	r3, r3, #16
 80029f2:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= 0x29UL << RCC_PLLCFGR_PLLN_Pos; 			// PLLN = PLLM*42 = 336 MHz
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <InitRCC+0x1bc>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a2d      	ldr	r2, [pc, #180]	; (8002ab0 <InitRCC+0x1bc>)
 80029fa:	f443 5324 	orr.w	r3, r3, #10496	; 0x2900
 80029fe:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLR; 						// PLLR = PLLN/2 = 168 MHz
 8002a00:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <InitRCC+0x1bc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <InitRCC+0x1bc>)
 8002a06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a0a:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLREN;
 8002a0c:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <InitRCC+0x1bc>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a27      	ldr	r2, [pc, #156]	; (8002ab0 <InitRCC+0x1bc>)
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLSRC; 						//HSE clock selected as PLL clock entry
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <InitRCC+0x1bc>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <InitRCC+0x1bc>)
 8002a1e:	f043 0303 	orr.w	r3, r3, #3
 8002a22:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= 0x8UL << RCC_PLLCFGR_PLLQ_Pos;			// PLLQ = PLLN/8 = 42 MHz (for FD CAN)
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <InitRCC+0x1bc>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <InitRCC+0x1bc>)
 8002a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLQEN;
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <InitRCC+0x1bc>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <InitRCC+0x1bc>)
 8002a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3a:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= 0x8UL << RCC_PLLCFGR_PLLPDIV_Pos;		// PLLP = PLLN/6 = 56 MHz (for ADC)
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <InitRCC+0x1bc>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <InitRCC+0x1bc>)
 8002a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a46:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLPEN;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <InitRCC+0x1bc>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <InitRCC+0x1bc>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a52:	60d3      	str	r3, [r2, #12]

	RCC		-> CR			|= RCC_CR_PLLON;                      		// enable PLL
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <InitRCC+0x1bc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <InitRCC+0x1bc>)
 8002a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {}     						// wait till PLL is ready
 8002a60:	bf00      	nop
 8002a62:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <InitRCC+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f9      	beq.n	8002a62 <InitRCC+0x16e>

	RCC		-> CFGR			&= ~RCC_CFGR_SW;                   			// clear SW bits
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <InitRCC+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <InitRCC+0x1bc>)
 8002a74:	f023 0303 	bic.w	r3, r3, #3
 8002a78:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_SW_PLL;               			// select source SYSCLK = PLL
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <InitRCC+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <InitRCC+0x1bc>)
 8002a80:	f043 0303 	orr.w	r3, r3, #3
 8002a84:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS) {} 				// wait till PLL is used
 8002a86:	bf00      	nop
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <InitRCC+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d1f9      	bne.n	8002a88 <InitRCC+0x194>

	//waiting for at least 1us
	while (!(ticks = 200))
 8002a94:	bf00      	nop
 8002a96:	23c8      	movs	r3, #200	; 0xc8
 8002a98:	71fb      	strb	r3, [r7, #7]
	{
		ticks++;
	}

	ticks = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	71fb      	strb	r3, [r7, #7]

}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40022000 	.word	0x40022000

08002ab8 <NMI_Handler>:
	FLASH -> CR &= ~FLASH_CR_PG;
}


void NMI_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
	 if (RCC -> CIFR & RCC_CIFR_CSSF)
 8002abc:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <NMI_Handler+0x28>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <NMI_Handler+0x1c>
	 {
		 RCC	->	CICR		|=RCC_CICR_CSSC;						//Clock security system interrupt clear
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <NMI_Handler+0x28>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <NMI_Handler+0x28>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad2:	6213      	str	r3, [r2, #32]
	 }
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <InitLedGPIO>:
#include "LED.h"

/********************************************* Used functions ********************************************/


void InitLedGPIO (void){
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;		// Enable clock port B
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <InitLedGPIO+0xa0>)
 8002aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <InitLedGPIO+0xa0>)
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOCEN;		// Enable clock port C
 8002af4:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <InitLedGPIO+0xa0>)
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <InitLedGPIO+0xa0>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	64d3      	str	r3, [r2, #76]	; 0x4c

	//LED1 -- green
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE5;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b0a:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE5_0;		// Setting GPIO for PP output
 8002b0c:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b16:	6013      	str	r3, [r2, #0]

	//LED2 -- yellow
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE9;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b1e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002b22:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE9_0;		// Setting GPIO for PP output
 8002b24:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <InitLedGPIO+0xa4>)
 8002b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]

	//LED3 -- white
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE13;
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b36:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002b3a:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE13_0;	// Setting GPIO for PP output
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b46:	6013      	str	r3, [r2, #0]

	//LED4 -- blue
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE14;
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b4e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002b52:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE14_0;	// Setting GPIO for PP output
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6013      	str	r3, [r2, #0]

	//LED2 -- yellow
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE15;
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b66:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b6a:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE15_0;	// Setting GPIO for PP output
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <InitLedGPIO+0xa8>)
 8002b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	48000400 	.word	0x48000400
 8002b8c:	48000800 	.word	0x48000800

08002b90 <SetLED>:

//Sets Led state using binary number
void SetLED (LED COLOR, LED STATE)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	460a      	mov	r2, r1
 8002b9a:	71fb      	strb	r3, [r7, #7]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71bb      	strb	r3, [r7, #6]
	if ((COLOR == GREEN) && STATE == ON)
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d108      	bne.n	8002bb8 <SetLED+0x28>
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <SetLED+0x28>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BS5; 		// Enable LED1
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <SetLED+0x10c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <SetLED+0x10c>)
 8002bb2:	f043 0320 	orr.w	r3, r3, #32
 8002bb6:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == GREEN) && STATE == OFF)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d108      	bne.n	8002bd0 <SetLED+0x40>
 8002bbe:	79bb      	ldrb	r3, [r7, #6]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <SetLED+0x40>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BR5; 		// Disable LED1
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <SetLED+0x10c>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a34      	ldr	r2, [pc, #208]	; (8002c9c <SetLED+0x10c>)
 8002bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bce:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == YELLOW) && STATE == ON)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	2b09      	cmp	r3, #9
 8002bd4:	d108      	bne.n	8002be8 <SetLED+0x58>
 8002bd6:	79bb      	ldrb	r3, [r7, #6]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <SetLED+0x58>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BS9; 		// Enable LED2
 8002bdc:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <SetLED+0x10c>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4a2e      	ldr	r2, [pc, #184]	; (8002c9c <SetLED+0x10c>)
 8002be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be6:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == YELLOW) && STATE == OFF)
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	d108      	bne.n	8002c00 <SetLED+0x70>
 8002bee:	79bb      	ldrb	r3, [r7, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <SetLED+0x70>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BR9; 		// Disable LED2
 8002bf4:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <SetLED+0x10c>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	4a28      	ldr	r2, [pc, #160]	; (8002c9c <SetLED+0x10c>)
 8002bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == WHITE) && STATE == ON)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b0d      	cmp	r3, #13
 8002c04:	d108      	bne.n	8002c18 <SetLED+0x88>
 8002c06:	79bb      	ldrb	r3, [r7, #6]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <SetLED+0x88>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS13; 	// Enable LED3
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <SetLED+0x110>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <SetLED+0x110>)
 8002c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c16:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == WHITE) && STATE == OFF)
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	2b0d      	cmp	r3, #13
 8002c1c:	d108      	bne.n	8002c30 <SetLED+0xa0>
 8002c1e:	79bb      	ldrb	r3, [r7, #6]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <SetLED+0xa0>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR13; 	// Disable LED3
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <SetLED+0x110>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <SetLED+0x110>)
 8002c2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c2e:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == BLUE) && STATE == ON)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	2b0e      	cmp	r3, #14
 8002c34:	d108      	bne.n	8002c48 <SetLED+0xb8>
 8002c36:	79bb      	ldrb	r3, [r7, #6]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <SetLED+0xb8>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS14; 	// Enable LED4
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <SetLED+0x110>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <SetLED+0x110>)
 8002c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c46:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == BLUE) && STATE == OFF)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	2b0e      	cmp	r3, #14
 8002c4c:	d108      	bne.n	8002c60 <SetLED+0xd0>
 8002c4e:	79bb      	ldrb	r3, [r7, #6]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <SetLED+0xd0>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR14; 	// Disable LED4
 8002c54:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <SetLED+0x110>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <SetLED+0x110>)
 8002c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c5e:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == RED) && STATE == ON)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b0f      	cmp	r3, #15
 8002c64:	d108      	bne.n	8002c78 <SetLED+0xe8>
 8002c66:	79bb      	ldrb	r3, [r7, #6]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <SetLED+0xe8>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS15; 	// Enable LED5
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <SetLED+0x110>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <SetLED+0x110>)
 8002c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c76:	6193      	str	r3, [r2, #24]
	}
	if ((COLOR == RED) && STATE == OFF)
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	d108      	bne.n	8002c90 <SetLED+0x100>
 8002c7e:	79bb      	ldrb	r3, [r7, #6]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <SetLED+0x100>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR15; 	// Disable LED5
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <SetLED+0x110>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <SetLED+0x110>)
 8002c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c8e:	6193      	str	r3, [r2, #24]
	}
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	48000800 	.word	0x48000800

08002ca4 <ToggleLED>:

void ToggleLED (LED COLOR)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	if (COLOR == GREEN)
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d105      	bne.n	8002cc0 <ToggleLED+0x1c>
	{
		GPIOB	-> ODR ^= GPIO_ODR_OD5; 					// Toggle LED1
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <ToggleLED+0x70>)
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <ToggleLED+0x70>)
 8002cba:	f083 0320 	eor.w	r3, r3, #32
 8002cbe:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == YELLOW)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b09      	cmp	r3, #9
 8002cc4:	d105      	bne.n	8002cd2 <ToggleLED+0x2e>
	{
		GPIOB	-> ODR ^= GPIO_ODR_OD9; 					// Toggle LED2
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <ToggleLED+0x70>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <ToggleLED+0x70>)
 8002ccc:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 8002cd0:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == WHITE)
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b0d      	cmp	r3, #13
 8002cd6:	d105      	bne.n	8002ce4 <ToggleLED+0x40>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD13; 					// Toggle LED3
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <ToggleLED+0x74>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <ToggleLED+0x74>)
 8002cde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ce2:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == BLUE)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2b0e      	cmp	r3, #14
 8002ce8:	d105      	bne.n	8002cf6 <ToggleLED+0x52>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD14; 					// Toggle LED4
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <ToggleLED+0x74>)
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <ToggleLED+0x74>)
 8002cf0:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8002cf4:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == RED)
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	d105      	bne.n	8002d08 <ToggleLED+0x64>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD15; 					// Toggle LED5
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <ToggleLED+0x74>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <ToggleLED+0x74>)
 8002d02:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8002d06:	6153      	str	r3, [r2, #20]
	}
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	48000400 	.word	0x48000400
 8002d18:	48000800 	.word	0x48000800

08002d1c <BlinkLED>:

void BlinkLED (LED COLOR, uint16_t period_ms)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	460a      	mov	r2, r1
 8002d26:	71fb      	strb	r3, [r7, #7]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	80bb      	strh	r3, [r7, #4]
	ToggleLED(COLOR);
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ffb8 	bl	8002ca4 <ToggleLED>
	vTaskDelay(period_ms);
 8002d34:	88bb      	ldrh	r3, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fc72 	bl	8001620 <vTaskDelay>
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <InitUSART1>:

#include "UART.h"

/********************************************* Used functions ********************************************/

void InitUSART1 (void){
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

	RCC		-> APB2ENR	|= RCC_APB2ENR_USART1EN;
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <InitUSART1+0xd8>)
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4c:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <InitUSART1+0xd8>)
 8002d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d52:	6613      	str	r3, [r2, #96]	; 0x60

	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 8002d54:	4b31      	ldr	r3, [pc, #196]	; (8002e1c <InitUSART1+0xd8>)
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d58:	4a30      	ldr	r2, [pc, #192]	; (8002e1c <InitUSART1+0xd8>)
 8002d5a:	f043 0302 	orr.w	r3, r3, #2
 8002d5e:	64d3      	str	r3, [r2, #76]	; 0x4c

	//TX
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE6;
 8002d60:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <InitUSART1+0xdc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <InitUSART1+0xdc>)
 8002d66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d6a:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE6_1;
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <InitUSART1+0xdc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2b      	ldr	r2, [pc, #172]	; (8002e20 <InitUSART1+0xdc>)
 8002d72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d76:	6013      	str	r3, [r2, #0]

	GPIOB	-> OTYPER	&= ~GPIO_OTYPER_OT_6;
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <InitUSART1+0xdc>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <InitUSART1+0xdc>)
 8002d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d82:	6053      	str	r3, [r2, #4]

	GPIOB	-> PUPDR	&= ~GPIO_PUPDR_PUPD6;
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <InitUSART1+0xdc>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <InitUSART1+0xdc>)
 8002d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d8e:	60d3      	str	r3, [r2, #12]
	GPIOB	-> PUPDR	|= GPIO_PUPDR_PUPD9_0;
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <InitUSART1+0xdc>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <InitUSART1+0xdc>)
 8002d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9a:	60d3      	str	r3, [r2, #12]

	GPIOB	-> OSPEEDR	|= GPIO_OSPEEDR_OSPEED8;
 8002d9c:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <InitUSART1+0xdc>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <InitUSART1+0xdc>)
 8002da2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002da6:	6093      	str	r3, [r2, #8]

	GPIOB	-> AFR[0]	|= 0x07 << (4*6);
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <InitUSART1+0xdc>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <InitUSART1+0xdc>)
 8002dae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002db2:	6213      	str	r3, [r2, #32]

	//RX
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE7;
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <InitUSART1+0xdc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <InitUSART1+0xdc>)
 8002dba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dbe:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE7_1;
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <InitUSART1+0xdc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a16      	ldr	r2, [pc, #88]	; (8002e20 <InitUSART1+0xdc>)
 8002dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dca:	6013      	str	r3, [r2, #0]

	GPIOB	-> PUPDR	&= ~GPIO_PUPDR_PUPD7;
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <InitUSART1+0xdc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <InitUSART1+0xdc>)
 8002dd2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002dd6:	60d3      	str	r3, [r2, #12]

	GPIOB	-> AFR[0]	|= 0x07 << (4*7);
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <InitUSART1+0xdc>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <InitUSART1+0xdc>)
 8002dde:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8002de2:	6213      	str	r3, [r2, #32]

	//baudrate = 9600
	USART1	-> BRR		= 0x445C; //BRR = (fck + baudrate /2 ) / baudrate
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <InitUSART1+0xe0>)
 8002de6:	f244 425c 	movw	r2, #17500	; 0x445c
 8002dea:	60da      	str	r2, [r3, #12]

	USART1	-> CR1		|= USART_CR1_TE;
 8002dec:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <InitUSART1+0xe0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <InitUSART1+0xe0>)
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	6013      	str	r3, [r2, #0]
	USART1	-> CR1		|= USART_CR1_RE;
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <InitUSART1+0xe0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <InitUSART1+0xe0>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	6013      	str	r3, [r2, #0]
	USART1	-> CR1 		|= USART_CR1_UE;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <InitUSART1+0xe0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a06      	ldr	r2, [pc, #24]	; (8002e24 <InitUSART1+0xe0>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]

	//USART1	-> CR1		|= USART_CR1_RXNEIE;
	//NVIC_EnableIRQ(USART1_IRQn);
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	48000400 	.word	0x48000400
 8002e24:	40013800 	.word	0x40013800

08002e28 <SendUSART1>:


void SendUSART1 (char chr){
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->ISR & USART_ISR_TC));
 8002e32:	bf00      	nop
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <SendUSART1+0x38>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f9      	beq.n	8002e34 <SendUSART1+0xc>
	USART1	->ISR		&= ~USART_ISR_TC;
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <SendUSART1+0x38>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <SendUSART1+0x38>)
 8002e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4a:	61d3      	str	r3, [r2, #28]

	USART1	->TDR 		= chr;
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <SendUSART1+0x38>)
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40013800 	.word	0x40013800

08002e64 <SendStringUSART1>:

void SendStringUSART1 (char* str){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]

	while(str[i])
 8002e70:	e009      	b.n	8002e86 <SendStringUSART1+0x22>
	{
		SendUSART1 (str[i++]);
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	73fa      	strb	r2, [r7, #15]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ffd1 	bl	8002e28 <SendUSART1>
	while(str[i])
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <SendStringUSART1+0xe>
	}
}
 8002e92:	bf00      	nop
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <UtoaBuiltinDiv>:
#include "conversions.h"

char * UtoaBuiltinDiv(uint16_t value, char *buffer)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	80fb      	strh	r3, [r7, #6]
   buffer += 11;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	330b      	adds	r3, #11
 8002eac:	603b      	str	r3, [r7, #0]
   *--buffer = 0;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
   do
   {
      *--buffer = value % 10 + '0';
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <UtoaBuiltinDiv+0x64>)
 8002ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec2:	08d9      	lsrs	r1, r3, #3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	603a      	str	r2, [r7, #0]
 8002ed8:	3330      	adds	r3, #48	; 0x30
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	701a      	strb	r2, [r3, #0]
      value /= 10;
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <UtoaBuiltinDiv+0x64>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	80fb      	strh	r3, [r7, #6]
   }
   while (value != 0);
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e3      	bne.n	8002eba <UtoaBuiltinDiv+0x1e>
   return buffer;
 8002ef2:	683b      	ldr	r3, [r7, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	cccccccd 	.word	0xcccccccd

08002f04 <__libc_init_array>:
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4e0d      	ldr	r6, [pc, #52]	; (8002f3c <__libc_init_array+0x38>)
 8002f08:	4c0d      	ldr	r4, [pc, #52]	; (8002f40 <__libc_init_array+0x3c>)
 8002f0a:	1ba4      	subs	r4, r4, r6
 8002f0c:	10a4      	asrs	r4, r4, #2
 8002f0e:	2500      	movs	r5, #0
 8002f10:	42a5      	cmp	r5, r4
 8002f12:	d109      	bne.n	8002f28 <__libc_init_array+0x24>
 8002f14:	4e0b      	ldr	r6, [pc, #44]	; (8002f44 <__libc_init_array+0x40>)
 8002f16:	4c0c      	ldr	r4, [pc, #48]	; (8002f48 <__libc_init_array+0x44>)
 8002f18:	f000 f82c 	bl	8002f74 <_init>
 8002f1c:	1ba4      	subs	r4, r4, r6
 8002f1e:	10a4      	asrs	r4, r4, #2
 8002f20:	2500      	movs	r5, #0
 8002f22:	42a5      	cmp	r5, r4
 8002f24:	d105      	bne.n	8002f32 <__libc_init_array+0x2e>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f2c:	4798      	blx	r3
 8002f2e:	3501      	adds	r5, #1
 8002f30:	e7ee      	b.n	8002f10 <__libc_init_array+0xc>
 8002f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f36:	4798      	blx	r3
 8002f38:	3501      	adds	r5, #1
 8002f3a:	e7f2      	b.n	8002f22 <__libc_init_array+0x1e>
 8002f3c:	08003048 	.word	0x08003048
 8002f40:	08003048 	.word	0x08003048
 8002f44:	08003048 	.word	0x08003048
 8002f48:	0800304c 	.word	0x0800304c

08002f4c <memcpy>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	1e43      	subs	r3, r0, #1
 8002f50:	440a      	add	r2, r1
 8002f52:	4291      	cmp	r1, r2
 8002f54:	d100      	bne.n	8002f58 <memcpy+0xc>
 8002f56:	bd10      	pop	{r4, pc}
 8002f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f60:	e7f7      	b.n	8002f52 <memcpy+0x6>

08002f62 <memset>:
 8002f62:	4402      	add	r2, r0
 8002f64:	4603      	mov	r3, r0
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d100      	bne.n	8002f6c <memset+0xa>
 8002f6a:	4770      	bx	lr
 8002f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f70:	e7f9      	b.n	8002f66 <memset+0x4>
	...

08002f74 <_init>:
 8002f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f76:	bf00      	nop
 8002f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7a:	bc08      	pop	{r3}
 8002f7c:	469e      	mov	lr, r3
 8002f7e:	4770      	bx	lr

08002f80 <_fini>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr
