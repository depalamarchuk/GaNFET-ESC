
ESC_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800378c  0800378c  0001378c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003848  08003848  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003848  08003848  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003848  08003848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c9e0  2000000c  0800385c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c9ec  0800385c  0002c9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a4d7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000198b  00000000  00000000  0002a513  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  0002bea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b8  00000000  00000000  0002c550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d13  00000000  00000000  0002cb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ea3  00000000  00000000  0004381b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088431  00000000  00000000  0004a6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2aef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001898  00000000  00000000  000d2b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003774 	.word	0x08003774

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08003774 	.word	0x08003774

08000220 <InitADC12>:

#include "ADC.h"

/********************************************* Used functions ********************************************/

void InitADC12 (void){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
	uint16_t ticks = 0;														//(1us = 168 ticks @ 168MHz)
 8000226:	2300      	movs	r3, #0
 8000228:	80fb      	strh	r3, [r7, #6]

	//Pin init

	RCC				-> AHB2ENR 		|= RCC_AHB2ENR_ADC12EN;
 800022a:	4b4b      	ldr	r3, [pc, #300]	; (8000358 <InitADC12+0x138>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a4a      	ldr	r2, [pc, #296]	; (8000358 <InitADC12+0x138>)
 8000230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
	//RCC				-> AHB2ENR		|= RCC_AHB2ENR_GPIOAEN;
	RCC				-> AHB2ENR		|= RCC_AHB2ENR_GPIOBEN;
 8000236:	4b48      	ldr	r3, [pc, #288]	; (8000358 <InitADC12+0x138>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	4a47      	ldr	r2, [pc, #284]	; (8000358 <InitADC12+0x138>)
 800023c:	f043 0302 	orr.w	r3, r3, #2
 8000240:	64d3      	str	r3, [r2, #76]	; 0x4c
	//GPIOA			-> MODER		|= GPIO_MODER_MODE0;
	//GPIOA			-> MODER		|= GPIO_MODER_MODE2;
	//GPIOA			-> MODER		|= GPIO_MODER_MODE4;
	//GPIOA			-> MODER		|= GPIO_MODER_MODE6;
	//GPIOB			-> MODER		|= GPIO_MODER_MODE1;
	GPIOB			-> MODER		|= GPIO_MODER_MODE11;
 8000242:	4b46      	ldr	r3, [pc, #280]	; (800035c <InitADC12+0x13c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a45      	ldr	r2, [pc, #276]	; (800035c <InitADC12+0x13c>)
 8000248:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800024c:	6013      	str	r3, [r2, #0]
	//GPIOB			-> MODER		|= GPIO_MODER_MODE12;

	//Clock
	RCC				-> CCIPR		|= RCC_CCIPR_ADC12SEL_0; 				//adc_ker_ck is PLLP
 800024e:	4b42      	ldr	r3, [pc, #264]	; (8000358 <InitADC12+0x138>)
 8000250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000254:	4a40      	ldr	r2, [pc, #256]	; (8000358 <InitADC12+0x138>)
 8000256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800025a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	ADC12_COMMON	-> CCR			&= ~ADC_CCR_CKMODE;						//input ADC clock = adc_ker_ck
 800025e:	4b40      	ldr	r3, [pc, #256]	; (8000360 <InitADC12+0x140>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	4a3f      	ldr	r2, [pc, #252]	; (8000360 <InitADC12+0x140>)
 8000264:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000268:	6093      	str	r3, [r2, #8]
	ADC12_COMMON	-> CCR			&= ~ADC_CCR_PRESC;						//input ADC clock not divided
 800026a:	4b3d      	ldr	r3, [pc, #244]	; (8000360 <InitADC12+0x140>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	4a3c      	ldr	r2, [pc, #240]	; (8000360 <InitADC12+0x140>)
 8000270:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000274:	6093      	str	r3, [r2, #8]

	//Calibration
	ADC1			->	CR			&= ~ADC_CR_DEEPPWD;						// Deep power down is enabled on reset
 8000276:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000280:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000284:	6093      	str	r3, [r2, #8]
	ADC1			->	CR			|= ADC_CR_ADVREGEN;					// ADC1 voltage regulator enable
 8000286:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000294:	6093      	str	r3, [r2, #8]

	//ADC2			->	CR			&= ~ADC_CR_DEEPPWD;
	//ADC2			->	CR			|= ADC_CR_ADVREGEN;

	while (!(ticks = 1680))
 8000296:	bf00      	nop
 8000298:	f44f 63d2 	mov.w	r3, #1680	; 0x690
 800029c:	80fb      	strh	r3, [r7, #6]
		{
			ticks++;
		}

	ADC1			->	CR			&= ~ADC_CR_ADCALDIF;
 800029e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002ac:	6093      	str	r3, [r2, #8]

	ADC1			->	CR			|= ADC_CR_ADCAL;						//start calibration
 80002ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002bc:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);										//wait for calibration to be completed
 80002be:	bf00      	nop
 80002c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002c4:	689b      	ldr	r3, [r3, #8]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	dbfa      	blt.n	80002c0 <InitADC12+0xa0>
	TIM6			->	PSC			= 1-1;
	TIM6			->	ARR			= 84000000;								//Recalculate 1MS per second
	TIM6			->	CR2			|= TIM_CR2_MMS_1;						// Enable generation TRGO for ADC
	TIM6			->	CR1			|= TIM_CR1_CEN;
*/
	ADC1			->	SMPR2		|= 0x7UL << ADC_SMPR2_SMP14_Pos;		//601.5 ADC clock cycles
 80002ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002d4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80002d8:	6193      	str	r3, [r2, #24]

	//ADC1			->	CFGR		|= ADC_CFGR_DMAEN;
	//ADC1			->	CFGR		&= ~ADC_CFGR_DMACFG;					//0: DMA One Shot mode selected
	ADC1			->	CFGR		|= ADC_CFGR_JQDIS;						//Injected Queue disabled
 80002da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002e8:	60d3      	str	r3, [r2, #12]

	ADC1			->	JSQR		&= ~ADC_JSQR_JL;						//00: 1 conversion
 80002ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f4:	f023 0303 	bic.w	r3, r3, #3
 80002f8:	64d3      	str	r3, [r2, #76]	; 0x4c
	//ADC1			->	JSQR		|= 0xDUL << ADC_JSQR_JEXTSEL_Pos;		//01101: Event 13
	//ADC1			->	JSQR		|= ADC_JSQR_JEXTEN_0;					//01: Hardware trigger detection on the rising edge
	ADC1			->	JSQR		&= ~ADC_JSQR_JEXTSEL;					//00000: Event 0
 80002fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80002fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000304:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC1			->	JSQR		&= ~ADC_JSQR_JEXTEN;					//00: If JQDIS=1 (queue disabled), Hardware trigger detection disabled (conversions can be launched by software)
 800030a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800030e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000310:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000314:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8000318:	64d3      	str	r3, [r2, #76]	; 0x4c
	ADC1			->	JSQR		|= 0xEUL << ADC_JSQR_JSQ1_Pos;			//JSQ1 = ADC1_IN14 channel
 800031a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800031e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000324:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
	//ADC1			->IER			|= ADC_IER_JEOSIE;
	//ADC2			->IER			|= ADC_IER_JEOSIE;
	//NVIC_EnableIRQ(ADC1_2_IRQn);

	//Enable
	ADC1			->	CR			|= ADC_CR_ADEN;
 800032a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY));
 800033a:	bf00      	nop
 800033c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f8      	beq.n	800033c <InitADC12+0x11c>
	//ADC2			->	CR			|= ADC_CR_ADEN;
	//while (!(ADC2->ISR & ADC_ISR_ADRDY));
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	48000400 	.word	0x48000400
 8000360:	50000300 	.word	0x50000300

08000364 <StartConvADC>:


uint16_t StartConvADC(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	ADC1			-> CR			|= ADC_CR_JADSTART;
 8000368:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6093      	str	r3, [r2, #8]

	while (!(ADC1 -> ISR & ADC_ISR_JEOC));
 8000378:	bf00      	nop
 800037a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f8      	beq.n	800037a <StartConvADC+0x16>

	return (ADC1 -> JDR1);
 8000388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800038c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000390:	b29b      	uxth	r3, r3
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <InitOpamp1>:

#include "opamp.h"

/********************************************* Used functions ********************************************/

void InitOpamp1 (void){
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0

	uint32_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 80003a2:	2300      	movs	r3, #0
 80003a4:	603b      	str	r3, [r7, #0]
	uint8_t trim = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	71fb      	strb	r3, [r7, #7]

	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 80003aa:	4b82      	ldr	r3, [pc, #520]	; (80005b4 <InitOpamp1+0x218>)
 80003ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ae:	4a81      	ldr	r2, [pc, #516]	; (80005b4 <InitOpamp1+0x218>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6613      	str	r3, [r2, #96]	; 0x60

	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOAEN;
 80003b6:	4b7f      	ldr	r3, [pc, #508]	; (80005b4 <InitOpamp1+0x218>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	4a7e      	ldr	r2, [pc, #504]	; (80005b4 <InitOpamp1+0x218>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 80003c2:	4b7c      	ldr	r3, [pc, #496]	; (80005b4 <InitOpamp1+0x218>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4a7b      	ldr	r2, [pc, #492]	; (80005b4 <InitOpamp1+0x218>)
 80003c8:	f043 0302 	orr.w	r3, r3, #2
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c

/************************************************* Opamp 1 ************************************************/

	GPIOA			-> MODER	|= GPIO_MODER_MODE1;
 80003ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d8:	f043 030c 	orr.w	r3, r3, #12
 80003dc:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE2;
 80003de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80003ec:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE3;
 80003ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80003fc:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_VPSEL;					//PA1 = OPAMP1_VINP0
 80003fe:	4b6e      	ldr	r3, [pc, #440]	; (80005b8 <InitOpamp1+0x21c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a6d      	ldr	r2, [pc, #436]	; (80005b8 <InitOpamp1+0x21c>)
 8000404:	f023 030c 	bic.w	r3, r3, #12
 8000408:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= OPAMP_CSR_VMSEL_1;					//Feedback resistor is connected to OPAMP VINM input (PGA mode)
 800040a:	4b6b      	ldr	r3, [pc, #428]	; (80005b8 <InitOpamp1+0x21c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a6a      	ldr	r2, [pc, #424]	; (80005b8 <InitOpamp1+0x21c>)
 8000410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000414:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		&= ~OPAMP_CSR_OPAMPINTEN;				//PA2 = OPAMP1_VOUT = ADC1_IN3
 8000416:	4b68      	ldr	r3, [pc, #416]	; (80005b8 <InitOpamp1+0x21c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a67      	ldr	r2, [pc, #412]	; (80005b8 <InitOpamp1+0x21c>)
 800041c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000420:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		|= OPAMP_CSR_CALON;
 8000422:	4b65      	ldr	r3, [pc, #404]	; (80005b8 <InitOpamp1+0x21c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a64      	ldr	r2, [pc, #400]	; (80005b8 <InitOpamp1+0x21c>)
 8000428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800042c:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		|= OPAMP_CSR_OPAMPxEN;
 800042e:	4b62      	ldr	r3, [pc, #392]	; (80005b8 <InitOpamp1+0x21c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a61      	ldr	r2, [pc, #388]	; (80005b8 <InitOpamp1+0x21c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= OPAMP_CSR_USERTRIM;
 800043a:	4b5f      	ldr	r3, [pc, #380]	; (80005b8 <InitOpamp1+0x21c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a5e      	ldr	r2, [pc, #376]	; (80005b8 <InitOpamp1+0x21c>)
 8000440:	f043 0310 	orr.w	r3, r3, #16
 8000444:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 8000446:	4b5c      	ldr	r3, [pc, #368]	; (80005b8 <InitOpamp1+0x21c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a5b      	ldr	r2, [pc, #364]	; (80005b8 <InitOpamp1+0x21c>)
 800044c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000450:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 8000452:	4b59      	ldr	r3, [pc, #356]	; (80005b8 <InitOpamp1+0x21c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a58      	ldr	r2, [pc, #352]	; (80005b8 <InitOpamp1+0x21c>)
 8000458:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800045c:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 800045e:	4b56      	ldr	r3, [pc, #344]	; (80005b8 <InitOpamp1+0x21c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	79fa      	ldrb	r2, [r7, #7]
 8000464:	0612      	lsls	r2, r2, #24
 8000466:	4611      	mov	r1, r2
 8000468:	4a53      	ldr	r2, [pc, #332]	; (80005b8 <InitOpamp1+0x21c>)
 800046a:	430b      	orrs	r3, r1
 800046c:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 800046e:	bf00      	nop
 8000470:	4b52      	ldr	r3, [pc, #328]	; (80005bc <InitOpamp1+0x220>)
 8000472:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	603b      	str	r3, [r7, #0]
		trim++;
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	3301      	adds	r3, #1
 800047c:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 800047e:	4b4e      	ldr	r3, [pc, #312]	; (80005b8 <InitOpamp1+0x21c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1e9      	bne.n	800045e <InitOpamp1+0xc2>

	ticks = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
	trim = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	71fb      	strb	r3, [r7, #7]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 8000492:	4b49      	ldr	r3, [pc, #292]	; (80005b8 <InitOpamp1+0x21c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a48      	ldr	r2, [pc, #288]	; (80005b8 <InitOpamp1+0x21c>)
 8000498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800049c:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 800049e:	4b46      	ldr	r3, [pc, #280]	; (80005b8 <InitOpamp1+0x21c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a45      	ldr	r2, [pc, #276]	; (80005b8 <InitOpamp1+0x21c>)
 80004a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004a8:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 80004aa:	4b43      	ldr	r3, [pc, #268]	; (80005b8 <InitOpamp1+0x21c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	79fa      	ldrb	r2, [r7, #7]
 80004b0:	04d2      	lsls	r2, r2, #19
 80004b2:	4611      	mov	r1, r2
 80004b4:	4a40      	ldr	r2, [pc, #256]	; (80005b8 <InitOpamp1+0x21c>)
 80004b6:	430b      	orrs	r3, r1
 80004b8:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 80004ba:	bf00      	nop
 80004bc:	4b3f      	ldr	r3, [pc, #252]	; (80005bc <InitOpamp1+0x220>)
 80004be:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	603b      	str	r3, [r7, #0]
		trim++;
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	3301      	adds	r3, #1
 80004c8:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <InitOpamp1+0x21c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1e9      	bne.n	80004aa <InitOpamp1+0x10e>

	ticks = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
	trim = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	71fb      	strb	r3, [r7, #7]

	OPAMP1			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 80004de:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <InitOpamp1+0x21c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a35      	ldr	r2, [pc, #212]	; (80005b8 <InitOpamp1+0x21c>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e8:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 80004ea:	4b33      	ldr	r3, [pc, #204]	; (80005b8 <InitOpamp1+0x21c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a32      	ldr	r2, [pc, #200]	; (80005b8 <InitOpamp1+0x21c>)
 80004f0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80004f4:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 80004f6:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <InitOpamp1+0x21c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	79fa      	ldrb	r2, [r7, #7]
 80004fc:	0612      	lsls	r2, r2, #24
 80004fe:	4611      	mov	r1, r2
 8000500:	4a2d      	ldr	r2, [pc, #180]	; (80005b8 <InitOpamp1+0x21c>)
 8000502:	430b      	orrs	r3, r1
 8000504:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 8000506:	bf00      	nop
 8000508:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <InitOpamp1+0x220>)
 800050a:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	603b      	str	r3, [r7, #0]
		trim++;
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	3301      	adds	r3, #1
 8000514:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000516:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <InitOpamp1+0x21c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1e9      	bne.n	80004f6 <InitOpamp1+0x15a>

	ticks = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
	trim = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	71fb      	strb	r3, [r7, #7]

	OPAMP1			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <InitOpamp1+0x21c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <InitOpamp1+0x21c>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <InitOpamp1+0x21c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <InitOpamp1+0x21c>)
 800053c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000540:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP1		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <InitOpamp1+0x21c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	79fa      	ldrb	r2, [r7, #7]
 8000548:	04d2      	lsls	r2, r2, #19
 800054a:	4611      	mov	r1, r2
 800054c:	4a1a      	ldr	r2, [pc, #104]	; (80005b8 <InitOpamp1+0x21c>)
 800054e:	430b      	orrs	r3, r1
 8000550:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 8000552:	bf00      	nop
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <InitOpamp1+0x220>)
 8000556:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	603b      	str	r3, [r7, #0]
		trim++;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3301      	adds	r3, #1
 8000560:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP1 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <InitOpamp1+0x21c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1e9      	bne.n	8000542 <InitOpamp1+0x1a6>

	ticks = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
	trim = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	71fb      	strb	r3, [r7, #7]

	OPAMP1			-> CSR		&= ~OPAMP_CSR_CALON;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <InitOpamp1+0x21c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <InitOpamp1+0x21c>)
 800057c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000580:	6013      	str	r3, [r2, #0]

	OPAMP1			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <InitOpamp1+0x21c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <InitOpamp1+0x21c>)
 8000588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058c:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		&= ~OPAMP_CSR_PGGAIN;
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <InitOpamp1+0x21c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <InitOpamp1+0x21c>)
 8000594:	f423 23f8 	bic.w	r3, r3, #507904	; 0x7c000
 8000598:	6013      	str	r3, [r2, #0]
	OPAMP1			-> CSR		|= 0b00010UL << OPAMP_CSR_PGGAIN_Pos;	//Non inverting internal gain =8
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <InitOpamp1+0x21c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <InitOpamp1+0x21c>)
 80005a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a4:	6013      	str	r3, [r2, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010300 	.word	0x40010300
 80005bc:	00029040 	.word	0x00029040

080005c0 <InitOpamp2>:

void InitOpamp2 (void){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0

	uint32_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
	uint8_t trim = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]

	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 80005ce:	4b82      	ldr	r3, [pc, #520]	; (80007d8 <InitOpamp2+0x218>)
 80005d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d2:	4a81      	ldr	r2, [pc, #516]	; (80007d8 <InitOpamp2+0x218>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6613      	str	r3, [r2, #96]	; 0x60

	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOAEN;
 80005da:	4b7f      	ldr	r3, [pc, #508]	; (80007d8 <InitOpamp2+0x218>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a7e      	ldr	r2, [pc, #504]	; (80007d8 <InitOpamp2+0x218>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 80005e6:	4b7c      	ldr	r3, [pc, #496]	; (80007d8 <InitOpamp2+0x218>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a7b      	ldr	r2, [pc, #492]	; (80007d8 <InitOpamp2+0x218>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c

/************************************************* Opamp 1 ************************************************/

	GPIOA			-> MODER	|= GPIO_MODER_MODE5;
 80005f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000600:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE6;
 8000602:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000610:	6013      	str	r3, [r2, #0]
	GPIOA			-> MODER	|= GPIO_MODER_MODE7;
 8000612:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000620:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_VPSEL;					//PA5 = OPAMP2_VINP0
 8000622:	4b6e      	ldr	r3, [pc, #440]	; (80007dc <InitOpamp2+0x21c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a6d      	ldr	r2, [pc, #436]	; (80007dc <InitOpamp2+0x21c>)
 8000628:	f023 030c 	bic.w	r3, r3, #12
 800062c:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= OPAMP_CSR_VMSEL_1;					//Feedback resistor is connected to OPAMP VINM input (PGA mode)
 800062e:	4b6b      	ldr	r3, [pc, #428]	; (80007dc <InitOpamp2+0x21c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a6a      	ldr	r2, [pc, #424]	; (80007dc <InitOpamp2+0x21c>)
 8000634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000638:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		&= ~OPAMP_CSR_OPAMPINTEN;				//PA6 = OPAMP2_VOUT = ADC2_IN3
 800063a:	4b68      	ldr	r3, [pc, #416]	; (80007dc <InitOpamp2+0x21c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a67      	ldr	r2, [pc, #412]	; (80007dc <InitOpamp2+0x21c>)
 8000640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000644:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		|= OPAMP_CSR_CALON;
 8000646:	4b65      	ldr	r3, [pc, #404]	; (80007dc <InitOpamp2+0x21c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a64      	ldr	r2, [pc, #400]	; (80007dc <InitOpamp2+0x21c>)
 800064c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000650:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		|= OPAMP_CSR_OPAMPxEN;
 8000652:	4b62      	ldr	r3, [pc, #392]	; (80007dc <InitOpamp2+0x21c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a61      	ldr	r2, [pc, #388]	; (80007dc <InitOpamp2+0x21c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= OPAMP_CSR_USERTRIM;
 800065e:	4b5f      	ldr	r3, [pc, #380]	; (80007dc <InitOpamp2+0x21c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a5e      	ldr	r2, [pc, #376]	; (80007dc <InitOpamp2+0x21c>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 800066a:	4b5c      	ldr	r3, [pc, #368]	; (80007dc <InitOpamp2+0x21c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a5b      	ldr	r2, [pc, #364]	; (80007dc <InitOpamp2+0x21c>)
 8000670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000674:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 8000676:	4b59      	ldr	r3, [pc, #356]	; (80007dc <InitOpamp2+0x21c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a58      	ldr	r2, [pc, #352]	; (80007dc <InitOpamp2+0x21c>)
 800067c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000680:	6013      	str	r3, [r2, #0]


	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 8000682:	4b56      	ldr	r3, [pc, #344]	; (80007dc <InitOpamp2+0x21c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	79fa      	ldrb	r2, [r7, #7]
 8000688:	0612      	lsls	r2, r2, #24
 800068a:	4611      	mov	r1, r2
 800068c:	4a53      	ldr	r2, [pc, #332]	; (80007dc <InitOpamp2+0x21c>)
 800068e:	430b      	orrs	r3, r1
 8000690:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 8000692:	bf00      	nop
 8000694:	4b52      	ldr	r3, [pc, #328]	; (80007e0 <InitOpamp2+0x220>)
 8000696:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
		trim++;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3301      	adds	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 80006a2:	4b4e      	ldr	r3, [pc, #312]	; (80007dc <InitOpamp2+0x21c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1e9      	bne.n	8000682 <InitOpamp2+0xc2>

	ticks = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
	trim = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 80006b6:	4b49      	ldr	r3, [pc, #292]	; (80007dc <InitOpamp2+0x21c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a48      	ldr	r2, [pc, #288]	; (80007dc <InitOpamp2+0x21c>)
 80006bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006c0:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 80006c2:	4b46      	ldr	r3, [pc, #280]	; (80007dc <InitOpamp2+0x21c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a45      	ldr	r2, [pc, #276]	; (80007dc <InitOpamp2+0x21c>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006cc:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 80006ce:	4b43      	ldr	r3, [pc, #268]	; (80007dc <InitOpamp2+0x21c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	79fa      	ldrb	r2, [r7, #7]
 80006d4:	04d2      	lsls	r2, r2, #19
 80006d6:	4611      	mov	r1, r2
 80006d8:	4a40      	ldr	r2, [pc, #256]	; (80007dc <InitOpamp2+0x21c>)
 80006da:	430b      	orrs	r3, r1
 80006dc:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 80006de:	bf00      	nop
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <InitOpamp2+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
		trim++;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3301      	adds	r3, #1
 80006ec:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 80006ee:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <InitOpamp2+0x21c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1e9      	bne.n	80006ce <InitOpamp2+0x10e>

	ticks = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
	trim = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]

	OPAMP2			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <InitOpamp2+0x21c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a35      	ldr	r2, [pc, #212]	; (80007dc <InitOpamp2+0x21c>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 800070e:	4b33      	ldr	r3, [pc, #204]	; (80007dc <InitOpamp2+0x21c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a32      	ldr	r2, [pc, #200]	; (80007dc <InitOpamp2+0x21c>)
 8000714:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000718:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 800071a:	4b30      	ldr	r3, [pc, #192]	; (80007dc <InitOpamp2+0x21c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	0612      	lsls	r2, r2, #24
 8000722:	4611      	mov	r1, r2
 8000724:	4a2d      	ldr	r2, [pc, #180]	; (80007dc <InitOpamp2+0x21c>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 800072a:	bf00      	nop
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <InitOpamp2+0x220>)
 800072e:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
		trim++;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	3301      	adds	r3, #1
 8000738:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <InitOpamp2+0x21c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1e9      	bne.n	800071a <InitOpamp2+0x15a>

	ticks = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
	trim = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	71fb      	strb	r3, [r7, #7]

	OPAMP2			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <InitOpamp2+0x21c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a22      	ldr	r2, [pc, #136]	; (80007dc <InitOpamp2+0x21c>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <InitOpamp2+0x21c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <InitOpamp2+0x21c>)
 8000760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000764:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP2		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <InitOpamp2+0x21c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	04d2      	lsls	r2, r2, #19
 800076e:	4611      	mov	r1, r2
 8000770:	4a1a      	ldr	r2, [pc, #104]	; (80007dc <InitOpamp2+0x21c>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 8000776:	bf00      	nop
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <InitOpamp2+0x220>)
 800077a:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
		trim++;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	3301      	adds	r3, #1
 8000784:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP2 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <InitOpamp2+0x21c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1e9      	bne.n	8000766 <InitOpamp2+0x1a6>

	ticks = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
	trim = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]

	OPAMP2			-> CSR		&= ~OPAMP_CSR_CALON;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <InitOpamp2+0x21c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <InitOpamp2+0x21c>)
 80007a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007a4:	6013      	str	r3, [r2, #0]

	OPAMP2			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <InitOpamp2+0x21c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <InitOpamp2+0x21c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		&= ~OPAMP_CSR_PGGAIN;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <InitOpamp2+0x21c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <InitOpamp2+0x21c>)
 80007b8:	f423 23f8 	bic.w	r3, r3, #507904	; 0x7c000
 80007bc:	6013      	str	r3, [r2, #0]
	OPAMP2			-> CSR		|= 0b00010UL << OPAMP_CSR_PGGAIN_Pos;	//Non inverting internal gain =8
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <InitOpamp2+0x21c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a06      	ldr	r2, [pc, #24]	; (80007dc <InitOpamp2+0x21c>)
 80007c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c8:	6013      	str	r3, [r2, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010304 	.word	0x40010304
 80007e0:	00029040 	.word	0x00029040

080007e4 <InitOpamp3>:

void InitOpamp3 (void){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0

	uint32_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
	uint8_t trim = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	71fb      	strb	r3, [r7, #7]

	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 80007f2:	4b7f      	ldr	r3, [pc, #508]	; (80009f0 <InitOpamp3+0x20c>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a7e      	ldr	r2, [pc, #504]	; (80009f0 <InitOpamp3+0x20c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60

	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOAEN;
 80007fe:	4b7c      	ldr	r3, [pc, #496]	; (80009f0 <InitOpamp3+0x20c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a7b      	ldr	r2, [pc, #492]	; (80009f0 <InitOpamp3+0x20c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC				-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 800080a:	4b79      	ldr	r3, [pc, #484]	; (80009f0 <InitOpamp3+0x20c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a78      	ldr	r2, [pc, #480]	; (80009f0 <InitOpamp3+0x20c>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB			-> MODER	|= GPIO_MODER_MODE0;
 8000816:	4b77      	ldr	r3, [pc, #476]	; (80009f4 <InitOpamp3+0x210>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a76      	ldr	r2, [pc, #472]	; (80009f4 <InitOpamp3+0x210>)
 800081c:	f043 0303 	orr.w	r3, r3, #3
 8000820:	6013      	str	r3, [r2, #0]
	GPIOB			-> MODER	|= GPIO_MODER_MODE1;
 8000822:	4b74      	ldr	r3, [pc, #464]	; (80009f4 <InitOpamp3+0x210>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a73      	ldr	r2, [pc, #460]	; (80009f4 <InitOpamp3+0x210>)
 8000828:	f043 030c 	orr.w	r3, r3, #12
 800082c:	6013      	str	r3, [r2, #0]
	GPIOB			-> MODER	|= GPIO_MODER_MODE2;
 800082e:	4b71      	ldr	r3, [pc, #452]	; (80009f4 <InitOpamp3+0x210>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a70      	ldr	r2, [pc, #448]	; (80009f4 <InitOpamp3+0x210>)
 8000834:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000838:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_VPSEL;					//PB0 = OPAMP3_VINP0
 800083a:	4b6f      	ldr	r3, [pc, #444]	; (80009f8 <InitOpamp3+0x214>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a6e      	ldr	r2, [pc, #440]	; (80009f8 <InitOpamp3+0x214>)
 8000840:	f023 030c 	bic.w	r3, r3, #12
 8000844:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= OPAMP_CSR_VMSEL_1;					//Feedback resistor is connected to OPAMP VINM input (PGA mode)
 8000846:	4b6c      	ldr	r3, [pc, #432]	; (80009f8 <InitOpamp3+0x214>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a6b      	ldr	r2, [pc, #428]	; (80009f8 <InitOpamp3+0x214>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		&= ~OPAMP_CSR_OPAMPINTEN;				//PB1 = OPAMP3_VOUT = ADC1_IN12
 8000852:	4b69      	ldr	r3, [pc, #420]	; (80009f8 <InitOpamp3+0x214>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a68      	ldr	r2, [pc, #416]	; (80009f8 <InitOpamp3+0x214>)
 8000858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800085c:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		|= OPAMP_CSR_CALON;
 800085e:	4b66      	ldr	r3, [pc, #408]	; (80009f8 <InitOpamp3+0x214>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a65      	ldr	r2, [pc, #404]	; (80009f8 <InitOpamp3+0x214>)
 8000864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000868:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		|= OPAMP_CSR_OPAMPxEN;
 800086a:	4b63      	ldr	r3, [pc, #396]	; (80009f8 <InitOpamp3+0x214>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a62      	ldr	r2, [pc, #392]	; (80009f8 <InitOpamp3+0x214>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= OPAMP_CSR_USERTRIM;
 8000876:	4b60      	ldr	r3, [pc, #384]	; (80009f8 <InitOpamp3+0x214>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a5f      	ldr	r2, [pc, #380]	; (80009f8 <InitOpamp3+0x214>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 8000882:	4b5d      	ldr	r3, [pc, #372]	; (80009f8 <InitOpamp3+0x214>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a5c      	ldr	r2, [pc, #368]	; (80009f8 <InitOpamp3+0x214>)
 8000888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800088c:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 800088e:	4b5a      	ldr	r3, [pc, #360]	; (80009f8 <InitOpamp3+0x214>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a59      	ldr	r2, [pc, #356]	; (80009f8 <InitOpamp3+0x214>)
 8000894:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000898:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 800089a:	4b57      	ldr	r3, [pc, #348]	; (80009f8 <InitOpamp3+0x214>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	79fa      	ldrb	r2, [r7, #7]
 80008a0:	0612      	lsls	r2, r2, #24
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a54      	ldr	r2, [pc, #336]	; (80009f8 <InitOpamp3+0x214>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 80008aa:	bf00      	nop
 80008ac:	4b53      	ldr	r3, [pc, #332]	; (80009fc <InitOpamp3+0x218>)
 80008ae:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	603b      	str	r3, [r7, #0]
		trim++;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	3301      	adds	r3, #1
 80008b8:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 80008ba:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <InitOpamp3+0x214>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1e9      	bne.n	800089a <InitOpamp3+0xb6>

	ticks = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
	trim = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	71fb      	strb	r3, [r7, #7]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_HIGHSPEEDEN;				//Normal operating mode
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <InitOpamp3+0x214>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <InitOpamp3+0x214>)
 80008d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80008d8:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <InitOpamp3+0x214>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a46      	ldr	r2, [pc, #280]	; (80009f8 <InitOpamp3+0x214>)
 80008e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e4:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <InitOpamp3+0x214>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	79fa      	ldrb	r2, [r7, #7]
 80008ec:	04d2      	lsls	r2, r2, #19
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a41      	ldr	r2, [pc, #260]	; (80009f8 <InitOpamp3+0x214>)
 80008f2:	430b      	orrs	r3, r1
 80008f4:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 80008f6:	bf00      	nop
 80008f8:	4b40      	ldr	r3, [pc, #256]	; (80009fc <InitOpamp3+0x218>)
 80008fa:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	603b      	str	r3, [r7, #0]
		trim++;
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	3301      	adds	r3, #1
 8000904:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000906:	4b3c      	ldr	r3, [pc, #240]	; (80009f8 <InitOpamp3+0x214>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1e9      	bne.n	80008e6 <InitOpamp3+0x102>

	ticks = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
	trim = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	71fb      	strb	r3, [r7, #7]

	OPAMP3			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 800091a:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <InitOpamp3+0x214>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a36      	ldr	r2, [pc, #216]	; (80009f8 <InitOpamp3+0x214>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x3UL << OPAMP_CSR_CALSEL_Pos;		//0.9*VDDA applied on OPAMP inputs (for NMOS calibration)
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <InitOpamp3+0x214>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <InitOpamp3+0x214>)
 800092c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000930:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETN_Pos);
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <InitOpamp3+0x214>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	0612      	lsls	r2, r2, #24
 800093a:	4611      	mov	r1, r2
 800093c:	4a2e      	ldr	r2, [pc, #184]	; (80009f8 <InitOpamp3+0x214>)
 800093e:	430b      	orrs	r3, r1
 8000940:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 8000942:	bf00      	nop
 8000944:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <InitOpamp3+0x218>)
 8000946:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
		trim++;
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	3301      	adds	r3, #1
 8000950:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <InitOpamp3+0x214>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1e9      	bne.n	8000932 <InitOpamp3+0x14e>

	ticks = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
	trim = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	71fb      	strb	r3, [r7, #7]

	OPAMP3			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;				//Operational amplifier in high-speed mode
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <InitOpamp3+0x214>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <InitOpamp3+0x214>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0x1UL << OPAMP_CSR_CALSEL_Pos;		//0.1*VDDA applied on OPAMP inputs (for PMOS calibration)
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <InitOpamp3+0x214>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <InitOpamp3+0x214>)
 8000978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800097c:	6013      	str	r3, [r2, #0]

	do
	{
		OPAMP3		-> CSR		|= (trim << OPAMP_CSR_TRIMOFFSETP_Pos);
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <InitOpamp3+0x214>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	04d2      	lsls	r2, r2, #19
 8000986:	4611      	mov	r1, r2
 8000988:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <InitOpamp3+0x214>)
 800098a:	430b      	orrs	r3, r1
 800098c:	6013      	str	r3, [r2, #0]

		while (!(ticks = 168000))
 800098e:	bf00      	nop
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <InitOpamp3+0x218>)
 8000992:	603b      	str	r3, [r7, #0]
		{
			ticks++;
		}

		ticks = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
		trim++;
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3301      	adds	r3, #1
 800099c:	71fb      	strb	r3, [r7, #7]
	} while((OPAMP3 -> CSR & OPAMP_CSR_OUTCAL)!=0);
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <InitOpamp3+0x214>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e9      	bne.n	800097e <InitOpamp3+0x19a>

	ticks = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
	trim = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	71fb      	strb	r3, [r7, #7]

	OPAMP3			-> CSR		&= ~OPAMP_CSR_CALON;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <InitOpamp3+0x214>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <InitOpamp3+0x214>)
 80009b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009bc:	6013      	str	r3, [r2, #0]

	OPAMP3			-> CSR		|= OPAMP_CSR_HIGHSPEEDEN;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <InitOpamp3+0x214>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <InitOpamp3+0x214>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		&= ~OPAMP_CSR_PGGAIN;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <InitOpamp3+0x214>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <InitOpamp3+0x214>)
 80009d0:	f423 23f8 	bic.w	r3, r3, #507904	; 0x7c000
 80009d4:	6013      	str	r3, [r2, #0]
	OPAMP3			-> CSR		|= 0b00010UL << OPAMP_CSR_PGGAIN_Pos;	//Non inverting internal gain =8
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <InitOpamp3+0x214>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <InitOpamp3+0x214>)
 80009dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009e0:	6013      	str	r3, [r2, #0]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	48000400 	.word	0x48000400
 80009f8:	40010308 	.word	0x40010308
 80009fc:	00029040 	.word	0x00029040

08000a00 <InitVrefbuf>:
#include "vrefbuf.h"

/********************************************* Used functions ********************************************/

void InitVrefbuf (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	RCC				-> APB2ENR	|= RCC_APB2ENR_SYSCFGEN;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <InitVrefbuf+0x4c>)
 8000a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a08:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <InitVrefbuf+0x4c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6613      	str	r3, [r2, #96]	; 0x60

	VREFBUF			-> CSR		|= VREFBUF_CSR_VRS_0;					//VREFBUF = 2.5V
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <InitVrefbuf+0x50>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <InitVrefbuf+0x50>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6013      	str	r3, [r2, #0]
	while (VREFBUF->CSR & VREFBUF_CSR_VRR);
 8000a1c:	bf00      	nop
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <InitVrefbuf+0x50>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f9      	bne.n	8000a1e <InitVrefbuf+0x1e>
	VREFBUF			-> CSR		|= VREFBUF_CSR_ENVR;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <InitVrefbuf+0x50>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <InitVrefbuf+0x50>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6013      	str	r3, [r2, #0]
	VREFBUF			-> CSR		&= ~VREFBUF_CSR_HIZ;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <InitVrefbuf+0x50>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <InitVrefbuf+0x50>)
 8000a3c:	f023 0302 	bic.w	r3, r3, #2
 8000a40:	6013      	str	r3, [r2, #0]
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010030 	.word	0x40010030

08000a54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <SystemInit+0x28>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a07      	ldr	r2, [pc, #28]	; (8000a7c <SystemInit+0x28>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SystemInit+0x28>)
 8000a6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f103 0208 	add.w	r2, r3, #8
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f103 0208 	add.w	r2, r3, #8
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f103 0208 	add.w	r2, r3, #8
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	683a      	ldr	r2, [r7, #0]
 8000b04:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b38:	d103      	bne.n	8000b42 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e00c      	b.n	8000b5c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3308      	adds	r3, #8
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	e002      	b.n	8000b50 <vListInsert+0x2e>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d2f6      	bcs.n	8000b4a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	6892      	ldr	r2, [r2, #8]
 8000baa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	6852      	ldr	r2, [r2, #4]
 8000bb4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d103      	bne.n	8000bc8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	1e5a      	subs	r2, r3, #1
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3b04      	subs	r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f023 0201 	bic.w	r2, r3, #1
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3b04      	subs	r3, #4
 8000c16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <pxPortInitialiseStack+0x64>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3b14      	subs	r3, #20
 8000c22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	3b04      	subs	r3, #4
 8000c2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f06f 0202 	mvn.w	r2, #2
 8000c36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3b20      	subs	r3, #32
 8000c3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	08000c51 	.word	0x08000c51

08000c50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <prvTaskExitError+0x50>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c62:	d009      	beq.n	8000c78 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	f383 8811 	msr	BASEPRI, r3
 8000c6c:	f3bf 8f6f 	isb	sy
 8000c70:	f3bf 8f4f 	dsb	sy
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e7fe      	b.n	8000c76 <prvTaskExitError+0x26>
 8000c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c7c:	f383 8811 	msr	BASEPRI, r3
 8000c80:	f3bf 8f6f 	isb	sy
 8000c84:	f3bf 8f4f 	dsb	sy
 8000c88:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000c8a:	bf00      	nop
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0fc      	beq.n	8000c8c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000000 	.word	0x20000000
	...

08000cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <pxCurrentTCBConst2>)
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	6808      	ldr	r0, [r1, #0]
 8000cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cba:	f380 8809 	msr	PSP, r0
 8000cbe:	f3bf 8f6f 	isb	sy
 8000cc2:	f04f 0000 	mov.w	r0, #0
 8000cc6:	f380 8811 	msr	BASEPRI, r0
 8000cca:	4770      	bx	lr
 8000ccc:	f3af 8000 	nop.w

08000cd0 <pxCurrentTCBConst2>:
 8000cd0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop

08000cd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <prvPortStartFirstTask+0x24>)
 8000cda:	6800      	ldr	r0, [r0, #0]
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	f380 8808 	msr	MSP, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	f380 8814 	msr	CONTROL, r0
 8000cea:	b662      	cpsie	i
 8000cec:	b661      	cpsie	f
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	f3bf 8f6f 	isb	sy
 8000cf6:	df00      	svc	0
 8000cf8:	bf00      	nop
 8000cfa:	0000      	.short	0x0000
 8000cfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop

08000d04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <xPortStartScheduler+0x118>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a44      	ldr	r2, [pc, #272]	; (8000e20 <xPortStartScheduler+0x11c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d109      	bne.n	8000d28 <xPortStartScheduler+0x24>
 8000d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	e7fe      	b.n	8000d26 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <xPortStartScheduler+0x118>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a3d      	ldr	r2, [pc, #244]	; (8000e24 <xPortStartScheduler+0x120>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d109      	bne.n	8000d46 <xPortStartScheduler+0x42>
 8000d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d36:	f383 8811 	msr	BASEPRI, r3
 8000d3a:	f3bf 8f6f 	isb	sy
 8000d3e:	f3bf 8f4f 	dsb	sy
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e7fe      	b.n	8000d44 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000d46:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <xPortStartScheduler+0x124>)
 8000d48:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <xPortStartScheduler+0x128>)
 8000d6c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d74:	e009      	b.n	8000d8a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000d76:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000d7e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	2b80      	cmp	r3, #128	; 0x80
 8000d94:	d0ef      	beq.n	8000d76 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d009      	beq.n	8000db6 <xPortStartScheduler+0xb2>
 8000da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da6:	f383 8811 	msr	BASEPRI, r3
 8000daa:	f3bf 8f6f 	isb	sy
 8000dae:	f3bf 8f4f 	dsb	sy
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	e7fe      	b.n	8000db4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000dbe:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <xPortStartScheduler+0x12c>)
 8000dca:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <xPortStartScheduler+0x130>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <xPortStartScheduler+0x130>)
 8000dda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dde:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <xPortStartScheduler+0x130>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <xPortStartScheduler+0x130>)
 8000de6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000dea:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000dec:	f000 f8d4 	bl	8000f98 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <xPortStartScheduler+0x134>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000df6:	f000 f8eb 	bl	8000fd0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <xPortStartScheduler+0x138>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <xPortStartScheduler+0x138>)
 8000e00:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000e04:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000e06:	f7ff ff67 	bl	8000cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000e0a:	f001 f933 	bl	8002074 <vTaskSwitchContext>
    prvTaskExitError();
 8000e0e:	f7ff ff1f 	bl	8000c50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	410fc271 	.word	0x410fc271
 8000e24:	410fc270 	.word	0x410fc270
 8000e28:	e000e400 	.word	0xe000e400
 8000e2c:	20000028 	.word	0x20000028
 8000e30:	2000002c 	.word	0x2000002c
 8000e34:	e000ed20 	.word	0xe000ed20
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	e000ef34 	.word	0xe000ef34

08000e40 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e4a:	f383 8811 	msr	BASEPRI, r3
 8000e4e:	f3bf 8f6f 	isb	sy
 8000e52:	f3bf 8f4f 	dsb	sy
 8000e56:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <vPortEnterCritical+0x54>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <vPortEnterCritical+0x54>)
 8000e60:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <vPortEnterCritical+0x54>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d10e      	bne.n	8000e88 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <vPortEnterCritical+0x58>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d009      	beq.n	8000e88 <vPortEnterCritical+0x48>
 8000e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e78:	f383 8811 	msr	BASEPRI, r3
 8000e7c:	f3bf 8f6f 	isb	sy
 8000e80:	f3bf 8f4f 	dsb	sy
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	e7fe      	b.n	8000e86 <vPortEnterCritical+0x46>
    }
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20000000 	.word	0x20000000
 8000e98:	e000ed04 	.word	0xe000ed04

08000e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <vPortExitCritical+0x4c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d109      	bne.n	8000ebe <vPortExitCritical+0x22>
 8000eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eae:	f383 8811 	msr	BASEPRI, r3
 8000eb2:	f3bf 8f6f 	isb	sy
 8000eb6:	f3bf 8f4f 	dsb	sy
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	e7fe      	b.n	8000ebc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <vPortExitCritical+0x4c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <vPortExitCritical+0x4c>)
 8000ec6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <vPortExitCritical+0x4c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d104      	bne.n	8000eda <vPortExitCritical+0x3e>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	00000000 	.word	0x00000000

08000ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000ef0:	f3ef 8009 	mrs	r0, PSP
 8000ef4:	f3bf 8f6f 	isb	sy
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <pxCurrentTCBConst>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	f01e 0f10 	tst.w	lr, #16
 8000f00:	bf08      	it	eq
 8000f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f0a:	6010      	str	r0, [r2, #0]
 8000f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000f10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000f14:	f380 8811 	msr	BASEPRI, r0
 8000f18:	f3bf 8f4f 	dsb	sy
 8000f1c:	f3bf 8f6f 	isb	sy
 8000f20:	f001 f8a8 	bl	8002074 <vTaskSwitchContext>
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	f380 8811 	msr	BASEPRI, r0
 8000f2c:	bc09      	pop	{r0, r3}
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	6808      	ldr	r0, [r1, #0]
 8000f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f36:	f01e 0f10 	tst.w	lr, #16
 8000f3a:	bf08      	it	eq
 8000f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000f40:	f380 8809 	msr	PSP, r0
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	f3af 8000 	nop.w

08000f50 <pxCurrentTCBConst>:
 8000f50:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop

08000f58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
        __asm volatile
 8000f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f62:	f383 8811 	msr	BASEPRI, r3
 8000f66:	f3bf 8f6f 	isb	sy
 8000f6a:	f3bf 8f4f 	dsb	sy
 8000f6e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000f70:	f000 ffc8 	bl	8001f04 <xTaskIncrementTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SysTick_Handler+0x3c>)
 8000f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	e000ed04 	.word	0xe000ed04

08000f98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <vPortSetupTimerInterrupt+0x28>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <vPortSetupTimerInterrupt+0x2c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <vPortSetupTimerInterrupt+0x30>)
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <vPortSetupTimerInterrupt+0x34>)
 8000fac:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <vPortSetupTimerInterrupt+0x28>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010
 8000fc4:	e000e018 	.word	0xe000e018
 8000fc8:	e000e014 	.word	0xe000e014
 8000fcc:	0002903f 	.word	0x0002903f

08000fd0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000fd0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000fe0 <vPortEnableVFP+0x10>
 8000fd4:	6801      	ldr	r1, [r0, #0]
 8000fd6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000fda:	6001      	str	r1, [r0, #0]
 8000fdc:	4770      	bx	lr
 8000fde:	0000      	.short	0x0000
 8000fe0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop

08000fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000fee:	f3ef 8305 	mrs	r3, IPSR
 8000ff2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	d913      	bls.n	8001022 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <vPortValidateInterruptPriority+0x6c>)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <vPortValidateInterruptPriority+0x70>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	7afa      	ldrb	r2, [r7, #11]
 800100a:	429a      	cmp	r2, r3
 800100c:	d209      	bcs.n	8001022 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800100e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001012:	f383 8811 	msr	BASEPRI, r3
 8001016:	f3bf 8f6f 	isb	sy
 800101a:	f3bf 8f4f 	dsb	sy
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	e7fe      	b.n	8001020 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <vPortValidateInterruptPriority+0x74>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <vPortValidateInterruptPriority+0x78>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d909      	bls.n	8001046 <vPortValidateInterruptPriority+0x5e>
 8001032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	f3bf 8f4f 	dsb	sy
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	e7fe      	b.n	8001044 <vPortValidateInterruptPriority+0x5c>
    }
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e3f0 	.word	0xe000e3f0
 8001058:	20000028 	.word	0x20000028
 800105c:	e000ed0c 	.word	0xe000ed0c
 8001060:	2000002c 	.word	0x2000002c

08001064 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <xQueueGenericReset+0x28>
 8001078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	e7fe      	b.n	800108a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 800108c:	f7ff fed8 	bl	8000e40 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001098:	68f9      	ldr	r1, [r7, #12]
 800109a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	441a      	add	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010bc:	3b01      	subs	r3, #1
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010c2:	fb01 f303 	mul.w	r3, r1, r3
 80010c6:	441a      	add	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d114      	bne.n	800110c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d01a      	beq.n	8001120 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3310      	adds	r3, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 f86a 	bl	80021c8 <xTaskRemoveFromEventList>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d012      	beq.n	8001120 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <xQueueGenericReset+0xcc>)
 80010fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	f3bf 8f4f 	dsb	sy
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	e009      	b.n	8001120 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3310      	adds	r3, #16
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fcb5 	bl	8000a80 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3324      	adds	r3, #36	; 0x24
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fcb0 	bl	8000a80 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001120:	f7ff febc 	bl	8000e9c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001124:	2301      	movs	r3, #1
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000ed04 	.word	0xe000ed04

08001134 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d109      	bne.n	800115c <xQueueGenericCreate+0x28>
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	e7fe      	b.n	800115a <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <xQueueGenericCreate+0x46>
 800116c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	fbb2 f3f3 	udiv	r3, r2, r3
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	429a      	cmp	r2, r3
 8001178:	d101      	bne.n	800117e <xQueueGenericCreate+0x4a>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <xQueueGenericCreate+0x4c>
 800117e:	2300      	movs	r3, #0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d109      	bne.n	8001198 <xQueueGenericCreate+0x64>
 8001184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001188:	f383 8811 	msr	BASEPRI, r3
 800118c:	f3bf 8f6f 	isb	sy
 8001190:	f3bf 8f4f 	dsb	sy
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e7fe      	b.n	8001196 <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	3350      	adds	r3, #80	; 0x50
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fd29 	bl	8002bf4 <pvPortMalloc>
 80011a2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00d      	beq.n	80011c6 <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3350      	adds	r3, #80	; 0x50
 80011b2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80011b4:	79fa      	ldrb	r2, [r7, #7]
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	4613      	mov	r3, r2
 80011bc:	69fa      	ldr	r2, [r7, #28]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f000 f805 	bl	80011d0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80011c6:	6a3b      	ldr	r3, [r7, #32]
    }
 80011c8:	4618      	mov	r0, r3
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e002      	b.n	80011f2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80011fe:	2101      	movs	r1, #1
 8001200:	69b8      	ldr	r0, [r7, #24]
 8001202:	f7ff ff2f 	bl	8001064 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	78fa      	ldrb	r2, [r7, #3]
 800120a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	; 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001226:	2300      	movs	r3, #0
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	2b00      	cmp	r3, #0
 8001232:	d109      	bne.n	8001248 <xQueueGenericSend+0x30>
 8001234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
 8001246:	e7fe      	b.n	8001246 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <xQueueGenericSend+0x3e>
 800124e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <xQueueGenericSend+0x42>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <xQueueGenericSend+0x44>
 800125a:	2300      	movs	r3, #0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d109      	bne.n	8001274 <xQueueGenericSend+0x5c>
 8001260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001264:	f383 8811 	msr	BASEPRI, r3
 8001268:	f3bf 8f6f 	isb	sy
 800126c:	f3bf 8f4f 	dsb	sy
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
 8001272:	e7fe      	b.n	8001272 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d103      	bne.n	8001282 <xQueueGenericSend+0x6a>
 800127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <xQueueGenericSend+0x6e>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <xQueueGenericSend+0x70>
 8001286:	2300      	movs	r3, #0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d109      	bne.n	80012a0 <xQueueGenericSend+0x88>
 800128c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001290:	f383 8811 	msr	BASEPRI, r3
 8001294:	f3bf 8f6f 	isb	sy
 8001298:	f3bf 8f4f 	dsb	sy
 800129c:	623b      	str	r3, [r7, #32]
 800129e:	e7fe      	b.n	800129e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012a0:	f001 f92a 	bl	80024f8 <xTaskGetSchedulerState>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <xQueueGenericSend+0x98>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <xQueueGenericSend+0x9c>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <xQueueGenericSend+0x9e>
 80012b4:	2300      	movs	r3, #0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <xQueueGenericSend+0xb6>
 80012ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012be:	f383 8811 	msr	BASEPRI, r3
 80012c2:	f3bf 8f6f 	isb	sy
 80012c6:	f3bf 8f4f 	dsb	sy
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	e7fe      	b.n	80012cc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80012ce:	f7ff fdb7 	bl	8000e40 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80012d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d302      	bcc.n	80012e4 <xQueueGenericSend+0xcc>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d129      	bne.n	8001338 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012ea:	f000 fa2e 	bl	800174a <prvCopyDataToQueue>
 80012ee:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d010      	beq.n	800131a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	3324      	adds	r3, #36	; 0x24
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 ff63 	bl	80021c8 <xTaskRemoveFromEventList>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d013      	beq.n	8001330 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001308:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <xQueueGenericSend+0x1f0>)
 800130a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	f3bf 8f4f 	dsb	sy
 8001314:	f3bf 8f6f 	isb	sy
 8001318:	e00a      	b.n	8001330 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800131a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <xQueueGenericSend+0x1f0>)
 8001322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	f3bf 8f4f 	dsb	sy
 800132c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001330:	f7ff fdb4 	bl	8000e9c <vPortExitCritical>
                return pdPASS;
 8001334:	2301      	movs	r3, #1
 8001336:	e063      	b.n	8001400 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800133e:	f7ff fdad 	bl	8000e9c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001342:	2300      	movs	r3, #0
 8001344:	e05c      	b.n	8001400 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001348:	2b00      	cmp	r3, #0
 800134a:	d106      	bne.n	800135a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4618      	mov	r0, r3
 8001352:	f000 ff9b 	bl	800228c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001356:	2301      	movs	r3, #1
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800135a:	f7ff fd9f 	bl	8000e9c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800135e:	f000 fd17 	bl	8001d90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001362:	f7ff fd6d 	bl	8000e40 <vPortEnterCritical>
 8001366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800136c:	b25b      	sxtb	r3, r3
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001372:	d103      	bne.n	800137c <xQueueGenericSend+0x164>
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001382:	b25b      	sxtb	r3, r3
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d103      	bne.n	8001392 <xQueueGenericSend+0x17a>
 800138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001392:	f7ff fd83 	bl	8000e9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001396:	1d3a      	adds	r2, r7, #4
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 ff8a 	bl	80022b8 <xTaskCheckForTimeOut>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d124      	bne.n	80013f4 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ac:	f000 fab7 	bl	800191e <prvIsQueueFull>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d018      	beq.n	80013e8 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	3310      	adds	r3, #16
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 feb4 	bl	800212c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80013c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013c6:	f000 fa42 	bl	800184e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80013ca:	f000 fcef 	bl	8001dac <xTaskResumeAll>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f47f af7c 	bne.w	80012ce <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <xQueueGenericSend+0x1f0>)
 80013d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	f3bf 8f6f 	isb	sy
 80013e6:	e772      	b.n	80012ce <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80013e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ea:	f000 fa30 	bl	800184e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80013ee:	f000 fcdd 	bl	8001dac <xTaskResumeAll>
 80013f2:	e76c      	b.n	80012ce <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80013f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013f6:	f000 fa2a 	bl	800184e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80013fa:	f000 fcd7 	bl	8001dac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80013fe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001400:	4618      	mov	r0, r3
 8001402:	3738      	adds	r7, #56	; 0x38
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	e000ed04 	.word	0xe000ed04

0800140c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b090      	sub	sp, #64	; 0x40
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800141e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <xQueueGenericSendFromISR+0x2c>
 8001424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
 8001436:	e7fe      	b.n	8001436 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <xQueueGenericSendFromISR+0x3a>
 800143e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <xQueueGenericSendFromISR+0x3e>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <xQueueGenericSendFromISR+0x40>
 800144a:	2300      	movs	r3, #0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d109      	bne.n	8001464 <xQueueGenericSendFromISR+0x58>
 8001450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001454:	f383 8811 	msr	BASEPRI, r3
 8001458:	f3bf 8f6f 	isb	sy
 800145c:	f3bf 8f4f 	dsb	sy
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	e7fe      	b.n	8001462 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d103      	bne.n	8001472 <xQueueGenericSendFromISR+0x66>
 800146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <xQueueGenericSendFromISR+0x6a>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <xQueueGenericSendFromISR+0x6c>
 8001476:	2300      	movs	r3, #0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d109      	bne.n	8001490 <xQueueGenericSendFromISR+0x84>
 800147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001480:	f383 8811 	msr	BASEPRI, r3
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	f3bf 8f4f 	dsb	sy
 800148c:	623b      	str	r3, [r7, #32]
 800148e:	e7fe      	b.n	800148e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001490:	f7ff fdaa 	bl	8000fe8 <vPortValidateInterruptPriority>
        __asm volatile
 8001494:	f3ef 8211 	mrs	r2, BASEPRI
 8001498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149c:	f383 8811 	msr	BASEPRI, r3
 80014a0:	f3bf 8f6f 	isb	sy
 80014a4:	f3bf 8f4f 	dsb	sy
 80014a8:	61fa      	str	r2, [r7, #28]
 80014aa:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80014ac:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d302      	bcc.n	80014c2 <xQueueGenericSendFromISR+0xb6>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d13d      	bne.n	800153e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80014c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014d8:	f000 f937 	bl	800174a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80014dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d112      	bne.n	800150c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d024      	beq.n	8001538 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f0:	3324      	adds	r3, #36	; 0x24
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fe68 	bl	80021c8 <xTaskRemoveFromEventList>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01c      	beq.n	8001538 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d019      	beq.n	8001538 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e015      	b.n	8001538 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800150c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001510:	2b7f      	cmp	r3, #127	; 0x7f
 8001512:	d109      	bne.n	8001528 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8001514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001518:	f383 8811 	msr	BASEPRI, r3
 800151c:	f3bf 8f6f 	isb	sy
 8001520:	f3bf 8f4f 	dsb	sy
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e7fe      	b.n	8001526 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800152c:	3301      	adds	r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	b25a      	sxtb	r2, r3
 8001532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001538:	2301      	movs	r3, #1
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800153c:	e001      	b.n	8001542 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800153e:	2300      	movs	r3, #0
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001544:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800154c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800154e:	4618      	mov	r0, r3
 8001550:	3740      	adds	r7, #64	; 0x40
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <xQueueReceive+0x2e>
        __asm volatile
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	623b      	str	r3, [r7, #32]
 8001584:	e7fe      	b.n	8001584 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d103      	bne.n	8001594 <xQueueReceive+0x3c>
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <xQueueReceive+0x40>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <xQueueReceive+0x42>
 8001598:	2300      	movs	r3, #0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <xQueueReceive+0x5a>
 800159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a2:	f383 8811 	msr	BASEPRI, r3
 80015a6:	f3bf 8f6f 	isb	sy
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	e7fe      	b.n	80015b0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015b2:	f000 ffa1 	bl	80024f8 <xTaskGetSchedulerState>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <xQueueReceive+0x6a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <xQueueReceive+0x6e>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <xQueueReceive+0x70>
 80015c6:	2300      	movs	r3, #0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <xQueueReceive+0x88>
 80015cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d0:	f383 8811 	msr	BASEPRI, r3
 80015d4:	f3bf 8f6f 	isb	sy
 80015d8:	f3bf 8f4f 	dsb	sy
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	e7fe      	b.n	80015de <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015e0:	f7ff fc2e 	bl	8000e40 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d01f      	beq.n	8001630 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015f4:	f000 f905 	bl	8001802 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00f      	beq.n	8001628 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	3310      	adds	r3, #16
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fddb 	bl	80021c8 <xTaskRemoveFromEventList>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d007      	beq.n	8001628 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001618:	4b3c      	ldr	r3, [pc, #240]	; (800170c <xQueueReceive+0x1b4>)
 800161a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	f3bf 8f4f 	dsb	sy
 8001624:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001628:	f7ff fc38 	bl	8000e9c <vPortExitCritical>
                return pdPASS;
 800162c:	2301      	movs	r3, #1
 800162e:	e069      	b.n	8001704 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001636:	f7ff fc31 	bl	8000e9c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800163a:	2300      	movs	r3, #0
 800163c:	e062      	b.n	8001704 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d106      	bne.n	8001652 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fe1f 	bl	800228c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800164e:	2301      	movs	r3, #1
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001652:	f7ff fc23 	bl	8000e9c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001656:	f000 fb9b 	bl	8001d90 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800165a:	f7ff fbf1 	bl	8000e40 <vPortEnterCritical>
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001664:	b25b      	sxtb	r3, r3
 8001666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166a:	d103      	bne.n	8001674 <xQueueReceive+0x11c>
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800167a:	b25b      	sxtb	r3, r3
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d103      	bne.n	800168a <xQueueReceive+0x132>
 8001682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800168a:	f7ff fc07 	bl	8000e9c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800168e:	1d3a      	adds	r2, r7, #4
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fe0e 	bl	80022b8 <xTaskCheckForTimeOut>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d123      	bne.n	80016ea <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016a4:	f000 f925 	bl	80018f2 <prvIsQueueEmpty>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d017      	beq.n	80016de <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b0:	3324      	adds	r3, #36	; 0x24
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fd38 	bl	800212c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80016bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016be:	f000 f8c6 	bl	800184e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80016c2:	f000 fb73 	bl	8001dac <xTaskResumeAll>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d189      	bne.n	80015e0 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <xQueueReceive+0x1b4>)
 80016ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f3bf 8f4f 	dsb	sy
 80016d8:	f3bf 8f6f 	isb	sy
 80016dc:	e780      	b.n	80015e0 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80016de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016e0:	f000 f8b5 	bl	800184e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016e4:	f000 fb62 	bl	8001dac <xTaskResumeAll>
 80016e8:	e77a      	b.n	80015e0 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80016ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016ec:	f000 f8af 	bl	800184e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016f0:	f000 fb5c 	bl	8001dac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016f6:	f000 f8fc 	bl	80018f2 <prvIsQueueEmpty>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f43f af6f 	beq.w	80015e0 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001702:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001704:	4618      	mov	r0, r3
 8001706:	3730      	adds	r7, #48	; 0x30
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	e000ed04 	.word	0xe000ed04

08001710 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <uxQueueMessagesWaiting+0x22>
 800171e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001722:	f383 8811 	msr	BASEPRI, r3
 8001726:	f3bf 8f6f 	isb	sy
 800172a:	f3bf 8f4f 	dsb	sy
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	e7fe      	b.n	8001730 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 8001732:	f7ff fb85 	bl	8000e40 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800173c:	f7ff fbae 	bl	8000e9c <vPortExitCritical>

    return uxReturn;
 8001740:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175e:	617b      	str	r3, [r7, #20]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	2b00      	cmp	r3, #0
 8001766:	d043      	beq.n	80017f0 <prvCopyDataToQueue+0xa6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <prvCopyDataToQueue+0x58>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6858      	ldr	r0, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	461a      	mov	r2, r3
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	f001 ffe7 	bl	800374c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	441a      	add	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d32b      	bcc.n	80017f0 <prvCopyDataToQueue+0xa6>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	e026      	b.n	80017f0 <prvCopyDataToQueue+0xa6>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	68d8      	ldr	r0, [r3, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	461a      	mov	r2, r3
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	f001 ffcd 	bl	800374c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	425b      	negs	r3, r3
 80017bc:	441a      	add	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d207      	bcs.n	80017de <prvCopyDataToQueue+0x94>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	425b      	negs	r3, r3
 80017d8:	441a      	add	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d105      	bne.n	80017f0 <prvCopyDataToQueue+0xa6>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <prvCopyDataToQueue+0xa6>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80017f8:	693b      	ldr	r3, [r7, #16]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2b00      	cmp	r3, #0
 8001812:	d018      	beq.n	8001846 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	441a      	add	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	429a      	cmp	r2, r3
 800182c:	d303      	bcc.n	8001836 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	461a      	mov	r2, r3
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f001 ff83 	bl	800374c <memcpy>
    }
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001856:	f7ff faf3 	bl	8000e40 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001860:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001862:	e011      	b.n	8001888 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	2b00      	cmp	r3, #0
 800186a:	d012      	beq.n	8001892 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3324      	adds	r3, #36	; 0x24
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fca9 	bl	80021c8 <xTaskRemoveFromEventList>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800187c:	f000 fd80 	bl	8002380 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3b01      	subs	r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dce9      	bgt.n	8001864 <prvUnlockQueue+0x16>
 8001890:	e000      	b.n	8001894 <prvUnlockQueue+0x46>
                        break;
 8001892:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	22ff      	movs	r2, #255	; 0xff
 8001898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800189c:	f7ff fafe 	bl	8000e9c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80018a0:	f7ff face 	bl	8000e40 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018aa:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018ac:	e011      	b.n	80018d2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d012      	beq.n	80018dc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3310      	adds	r3, #16
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fc84 	bl	80021c8 <xTaskRemoveFromEventList>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80018c6:	f000 fd5b 	bl	8002380 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80018d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dce9      	bgt.n	80018ae <prvUnlockQueue+0x60>
 80018da:	e000      	b.n	80018de <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80018dc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	22ff      	movs	r2, #255	; 0xff
 80018e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80018e6:	f7ff fad9 	bl	8000e9c <vPortExitCritical>
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80018fa:	f7ff faa1 	bl	8000e40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001906:	2301      	movs	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e001      	b.n	8001910 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001910:	f7ff fac4 	bl	8000e9c <vPortExitCritical>

    return xReturn;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001926:	f7ff fa8b 	bl	8000e40 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	429a      	cmp	r2, r3
 8001934:	d102      	bne.n	800193c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001936:	2301      	movs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e001      	b.n	8001940 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001940:	f7ff faac 	bl	8000e9c <vPortExitCritical>

    return xReturn;
 8001944:	68fb      	ldr	r3, [r7, #12]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e014      	b.n	800198a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <vQueueAddToRegistry+0x4c>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10b      	bne.n	8001984 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800196c:	490b      	ldr	r1, [pc, #44]	; (800199c <vQueueAddToRegistry+0x4c>)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <vQueueAddToRegistry+0x4c>)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001982:	e005      	b.n	8001990 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3301      	adds	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d9e7      	bls.n	8001960 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	2000c98c 	.word	0x2000c98c

080019a0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80019b0:	f7ff fa46 	bl	8000e40 <vPortEnterCritical>
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d103      	bne.n	80019ca <vQueueWaitForMessageRestricted+0x2a>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019d0:	b25b      	sxtb	r3, r3
 80019d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d6:	d103      	bne.n	80019e0 <vQueueWaitForMessageRestricted+0x40>
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019e0:	f7ff fa5c 	bl	8000e9c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d106      	bne.n	80019fa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3324      	adds	r3, #36	; 0x24
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fbbd 	bl	8002174 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff27 	bl	800184e <prvUnlockQueue>
    }
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af04      	add	r7, sp, #16
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 f8e9 	bl	8002bf4 <pvPortMalloc>
 8001a22:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00e      	beq.n	8001a48 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001a2a:	2058      	movs	r0, #88	; 0x58
 8001a2c:	f001 f8e2 	bl	8002bf4 <pvPortMalloc>
 8001a30:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a3e:	e005      	b.n	8001a4c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001a40:	6978      	ldr	r0, [r7, #20]
 8001a42:	f001 f91d 	bl	8002c80 <vPortFree>
 8001a46:	e001      	b.n	8001a4c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d013      	beq.n	8001a7a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a52:	88fa      	ldrh	r2, [r7, #6]
 8001a54:	2300      	movs	r3, #0
 8001a56:	9303      	str	r3, [sp, #12]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f80e 	bl	8001a8a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001a6e:	69f8      	ldr	r0, [r7, #28]
 8001a70:	f000 f89e 	bl	8001bb0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001a74:	2301      	movs	r3, #1
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	e002      	b.n	8001a80 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001a80:	69bb      	ldr	r3, [r7, #24]
    }
 8001a82:	4618      	mov	r0, r3
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b088      	sub	sp, #32
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	21a5      	movs	r1, #165	; 0xa5
 8001aa4:	f001 fe5d 	bl	8003762 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	f023 0307 	bic.w	r3, r3, #7
 8001ac0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <prvInitialiseNewTask+0x56>
 8001acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad0:	f383 8811 	msr	BASEPRI, r3
 8001ad4:	f3bf 8f6f 	isb	sy
 8001ad8:	f3bf 8f4f 	dsb	sy
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e7fe      	b.n	8001ade <prvInitialiseNewTask+0x54>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01f      	beq.n	8001b2c <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e012      	b.n	8001b18 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	3334      	adds	r3, #52	; 0x34
 8001b02:	460a      	mov	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3301      	adds	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	d9e9      	bls.n	8001af2 <prvInitialiseNewTask+0x68>
 8001b1e:	e000      	b.n	8001b22 <prvInitialiseNewTask+0x98>
            {
                break;
 8001b20:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b2a:	e003      	b.n	8001b34 <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d901      	bls.n	8001b3e <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
            pxNewTCB->uxMutexesHeld = 0;
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	3304      	adds	r3, #4
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe ffb9 	bl	8000ac0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	3318      	adds	r3, #24
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe ffb4 	bl	8000ac0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b5c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b60:	f1c3 0205 	rsb	r2, r3, #5
 8001b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b66:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b70:	3350      	adds	r3, #80	; 0x50
 8001b72:	2204      	movs	r2, #4
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 fdf3 	bl	8003762 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7e:	3354      	adds	r3, #84	; 0x54
 8001b80:	2201      	movs	r2, #1
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fdec 	bl	8003762 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	69b8      	ldr	r0, [r7, #24]
 8001b90:	f7ff f82a 	bl	8000be8 <pxPortInitialiseStack>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <prvInitialiseNewTask+0x11c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ba4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ba6:	bf00      	nop
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001bb8:	f7ff f942 	bl	8000e40 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <prvAddNewTaskToReadyList+0xc4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a2c      	ldr	r2, [pc, #176]	; (8001c74 <prvAddNewTaskToReadyList+0xc4>)
 8001bc4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <prvAddNewTaskToReadyList+0xc8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001bce:	4a2a      	ldr	r2, [pc, #168]	; (8001c78 <prvAddNewTaskToReadyList+0xc8>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <prvAddNewTaskToReadyList+0xc4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d110      	bne.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001bdc:	f000 fbf4 	bl	80023c8 <prvInitialiseTaskLists>
 8001be0:	e00d      	b.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <prvAddNewTaskToReadyList+0xcc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <prvAddNewTaskToReadyList+0xc8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d802      	bhi.n	8001bfe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <prvAddNewTaskToReadyList+0xc8>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <prvAddNewTaskToReadyList+0xd0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <prvAddNewTaskToReadyList+0xd0>)
 8001c06:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <prvAddNewTaskToReadyList+0xd0>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	649a      	str	r2, [r3, #72]	; 0x48
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <prvAddNewTaskToReadyList+0xd4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d903      	bls.n	8001c24 <prvAddNewTaskToReadyList+0x74>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	4a18      	ldr	r2, [pc, #96]	; (8001c84 <prvAddNewTaskToReadyList+0xd4>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <prvAddNewTaskToReadyList+0xd8>)
 8001c32:	441a      	add	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f7fe ff4d 	bl	8000ada <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c40:	f7ff f92c 	bl	8000e9c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <prvAddNewTaskToReadyList+0xcc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00e      	beq.n	8001c6a <prvAddNewTaskToReadyList+0xba>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <prvAddNewTaskToReadyList+0xc8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d207      	bcs.n	8001c6a <prvAddNewTaskToReadyList+0xba>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <prvAddNewTaskToReadyList+0xdc>)
 8001c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000108 	.word	0x20000108
 8001c78:	20000030 	.word	0x20000030
 8001c7c:	20000114 	.word	0x20000114
 8001c80:	20000124 	.word	0x20000124
 8001c84:	20000110 	.word	0x20000110
 8001c88:	20000034 	.word	0x20000034
 8001c8c:	e000ed04 	.word	0xe000ed04

08001c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <vTaskDelay+0x60>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <vTaskDelay+0x2e>
 8001caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cae:	f383 8811 	msr	BASEPRI, r3
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	f3bf 8f4f 	dsb	sy
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	e7fe      	b.n	8001cbc <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001cbe:	f000 f867 	bl	8001d90 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fc35 	bl	8002534 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001cca:	f000 f86f 	bl	8001dac <xTaskResumeAll>
 8001cce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <vTaskDelay+0x64>)
 8001cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000130 	.word	0x20000130
 8001cf4:	e000ed04 	.word	0xe000ed04

08001cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <vTaskStartScheduler+0x80>)
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2300      	movs	r3, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	2220      	movs	r2, #32
 8001d0a:	491c      	ldr	r1, [pc, #112]	; (8001d7c <vTaskStartScheduler+0x84>)
 8001d0c:	481c      	ldr	r0, [pc, #112]	; (8001d80 <vTaskStartScheduler+0x88>)
 8001d0e:	f7ff fe7b 	bl	8001a08 <xTaskCreate>
 8001d12:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001d1a:	f000 fc5f 	bl	80025dc <xTimerCreateTimerTask>
 8001d1e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d115      	bne.n	8001d52 <vTaskStartScheduler+0x5a>
 8001d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2a:	f383 8811 	msr	BASEPRI, r3
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	f3bf 8f4f 	dsb	sy
 8001d36:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <vTaskStartScheduler+0x8c>)
 8001d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <vTaskStartScheduler+0x90>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <vTaskStartScheduler+0x94>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001d4c:	f7fe ffda 	bl	8000d04 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8001d50:	e00d      	b.n	8001d6e <vTaskStartScheduler+0x76>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d109      	bne.n	8001d6e <vTaskStartScheduler+0x76>
 8001d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d5e:	f383 8811 	msr	BASEPRI, r3
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	e7fe      	b.n	8001d6c <vTaskStartScheduler+0x74>
}
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000012c 	.word	0x2000012c
 8001d7c:	0800378c 	.word	0x0800378c
 8001d80:	08002399 	.word	0x08002399
 8001d84:	20000128 	.word	0x20000128
 8001d88:	20000114 	.word	0x20000114
 8001d8c:	2000010c 	.word	0x2000010c

08001d90 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <vTaskSuspendAll+0x18>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <vTaskSuspendAll+0x18>)
 8001d9c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000130 	.word	0x20000130

08001dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <xTaskResumeAll+0x114>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <xTaskResumeAll+0x2a>
 8001dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	e7fe      	b.n	8001dd4 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001dd6:	f7ff f833 	bl	8000e40 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001dda:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <xTaskResumeAll+0x114>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <xTaskResumeAll+0x114>)
 8001de2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001de4:	4b36      	ldr	r3, [pc, #216]	; (8001ec0 <xTaskResumeAll+0x114>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d162      	bne.n	8001eb2 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001dec:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <xTaskResumeAll+0x118>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d05e      	beq.n	8001eb2 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001df4:	e02f      	b.n	8001e56 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <xTaskResumeAll+0x11c>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3318      	adds	r3, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fec6 	bl	8000b94 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fec1 	bl	8000b94 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <xTaskResumeAll+0x120>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d903      	bls.n	8001e26 <xTaskResumeAll+0x7a>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <xTaskResumeAll+0x120>)
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <xTaskResumeAll+0x124>)
 8001e34:	441a      	add	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f7fe fe4c 	bl	8000ada <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <xTaskResumeAll+0x128>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <xTaskResumeAll+0x12c>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <xTaskResumeAll+0x11c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1cb      	bne.n	8001df6 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001e64:	f000 fb2c 	bl	80024c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <xTaskResumeAll+0x130>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d010      	beq.n	8001e96 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001e74:	f000 f846 	bl	8001f04 <xTaskIncrementTick>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <xTaskResumeAll+0x12c>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f1      	bne.n	8001e74 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <xTaskResumeAll+0x130>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <xTaskResumeAll+0x12c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <xTaskResumeAll+0x134>)
 8001ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001eb2:	f7fe fff3 	bl	8000e9c <vPortExitCritical>

    return xAlreadyYielded;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000130 	.word	0x20000130
 8001ec4:	20000108 	.word	0x20000108
 8001ec8:	200000c8 	.word	0x200000c8
 8001ecc:	20000110 	.word	0x20000110
 8001ed0:	20000034 	.word	0x20000034
 8001ed4:	20000030 	.word	0x20000030
 8001ed8:	2000011c 	.word	0x2000011c
 8001edc:	20000118 	.word	0x20000118
 8001ee0:	e000ed04 	.word	0xe000ed04

08001ee4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <xTaskGetTickCount+0x1c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000010c 	.word	0x2000010c

08001f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <xTaskIncrementTick+0x144>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 808e 	bne.w	8002034 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <xTaskIncrementTick+0x148>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <xTaskIncrementTick+0x148>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11f      	bne.n	8001f6c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001f2c:	4b48      	ldr	r3, [pc, #288]	; (8002050 <xTaskIncrementTick+0x14c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <xTaskIncrementTick+0x46>
 8001f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	e7fe      	b.n	8001f48 <xTaskIncrementTick+0x44>
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <xTaskIncrementTick+0x14c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4b40      	ldr	r3, [pc, #256]	; (8002054 <xTaskIncrementTick+0x150>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <xTaskIncrementTick+0x14c>)
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <xTaskIncrementTick+0x150>)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <xTaskIncrementTick+0x154>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a3c      	ldr	r2, [pc, #240]	; (8002058 <xTaskIncrementTick+0x154>)
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	f000 faaa 	bl	80024c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <xTaskIncrementTick+0x158>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d349      	bcc.n	800200a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <xTaskIncrementTick+0x14c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d104      	bne.n	8001f8a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <xTaskIncrementTick+0x158>)
 8001f82:	f04f 32ff 	mov.w	r2, #4294967295
 8001f86:	601a      	str	r2, [r3, #0]
                    break;
 8001f88:	e03f      	b.n	800200a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f8a:	4b31      	ldr	r3, [pc, #196]	; (8002050 <xTaskIncrementTick+0x14c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d203      	bcs.n	8001faa <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001fa2:	4a2e      	ldr	r2, [pc, #184]	; (800205c <xTaskIncrementTick+0x158>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001fa8:	e02f      	b.n	800200a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fdf0 	bl	8000b94 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fde7 	bl	8000b94 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <xTaskIncrementTick+0x15c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d903      	bls.n	8001fda <xTaskIncrementTick+0xd6>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <xTaskIncrementTick+0x15c>)
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <xTaskIncrementTick+0x160>)
 8001fe8:	441a      	add	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3304      	adds	r3, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f7fe fd72 	bl	8000ada <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <xTaskIncrementTick+0x164>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	429a      	cmp	r2, r3
 8002002:	d3b8      	bcc.n	8001f76 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002004:	2301      	movs	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002008:	e7b5      	b.n	8001f76 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <xTaskIncrementTick+0x164>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002010:	4914      	ldr	r1, [pc, #80]	; (8002064 <xTaskIncrementTick+0x160>)
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d901      	bls.n	8002026 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8002022:	2301      	movs	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <xTaskIncrementTick+0x168>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800202e:	2301      	movs	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e004      	b.n	800203e <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <xTaskIncrementTick+0x16c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <xTaskIncrementTick+0x16c>)
 800203c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800203e:	697b      	ldr	r3, [r7, #20]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000130 	.word	0x20000130
 800204c:	2000010c 	.word	0x2000010c
 8002050:	200000c0 	.word	0x200000c0
 8002054:	200000c4 	.word	0x200000c4
 8002058:	20000120 	.word	0x20000120
 800205c:	20000128 	.word	0x20000128
 8002060:	20000110 	.word	0x20000110
 8002064:	20000034 	.word	0x20000034
 8002068:	20000030 	.word	0x20000030
 800206c:	2000011c 	.word	0x2000011c
 8002070:	20000118 	.word	0x20000118

08002074 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800207a:	4b27      	ldr	r3, [pc, #156]	; (8002118 <vTaskSwitchContext+0xa4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <vTaskSwitchContext+0xa8>)
 8002084:	2201      	movs	r2, #1
 8002086:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002088:	e040      	b.n	800210c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <vTaskSwitchContext+0xa8>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <vTaskSwitchContext+0xac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e00f      	b.n	80020b8 <vTaskSwitchContext+0x44>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <vTaskSwitchContext+0x3e>
 800209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a2:	f383 8811 	msr	BASEPRI, r3
 80020a6:	f3bf 8f6f 	isb	sy
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	e7fe      	b.n	80020b0 <vTaskSwitchContext+0x3c>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	491a      	ldr	r1, [pc, #104]	; (8002124 <vTaskSwitchContext+0xb0>)
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0e5      	beq.n	8002098 <vTaskSwitchContext+0x24>
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <vTaskSwitchContext+0xb0>)
 80020d8:	4413      	add	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3308      	adds	r3, #8
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d104      	bne.n	80020fc <vTaskSwitchContext+0x88>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <vTaskSwitchContext+0xb4>)
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4a06      	ldr	r2, [pc, #24]	; (8002120 <vTaskSwitchContext+0xac>)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20000130 	.word	0x20000130
 800211c:	2000011c 	.word	0x2000011c
 8002120:	20000110 	.word	0x20000110
 8002124:	20000034 	.word	0x20000034
 8002128:	20000030 	.word	0x20000030

0800212c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <vTaskPlaceOnEventList+0x24>
 800213c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002140:	f383 8811 	msr	BASEPRI, r3
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	f3bf 8f4f 	dsb	sy
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e7fe      	b.n	800214e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <vTaskPlaceOnEventList+0x44>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3318      	adds	r3, #24
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe fce2 	bl	8000b22 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800215e:	2101      	movs	r1, #1
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f000 f9e7 	bl	8002534 <prvAddCurrentTaskToDelayedList>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000030 	.word	0x20000030

08002174 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <vTaskPlaceOnEventListRestricted+0x26>
 8002186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218a:	f383 8811 	msr	BASEPRI, r3
 800218e:	f3bf 8f6f 	isb	sy
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e7fe      	b.n	8002198 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <vTaskPlaceOnEventListRestricted+0x50>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3318      	adds	r3, #24
 80021a0:	4619      	mov	r1, r3
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7fe fc99 	bl	8000ada <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	68b8      	ldr	r0, [r7, #8]
 80021b8:	f000 f9bc 	bl	8002534 <prvAddCurrentTaskToDelayedList>
    }
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000030 	.word	0x20000030

080021c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <xTaskRemoveFromEventList+0x2a>
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e7fe      	b.n	80021f0 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	3318      	adds	r3, #24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fccc 	bl	8000b94 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <xTaskRemoveFromEventList+0xac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d11d      	bne.n	8002240 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3304      	adds	r3, #4
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fcc3 	bl	8000b94 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <xTaskRemoveFromEventList+0xb0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d903      	bls.n	8002222 <xTaskRemoveFromEventList+0x5a>
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	4a16      	ldr	r2, [pc, #88]	; (8002278 <xTaskRemoveFromEventList+0xb0>)
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <xTaskRemoveFromEventList+0xb4>)
 8002230:	441a      	add	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3304      	adds	r3, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f7fe fc4e 	bl	8000ada <vListInsertEnd>
 800223e:	e005      	b.n	800224c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	3318      	adds	r3, #24
 8002244:	4619      	mov	r1, r3
 8002246:	480e      	ldr	r0, [pc, #56]	; (8002280 <xTaskRemoveFromEventList+0xb8>)
 8002248:	f7fe fc47 	bl	8000ada <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <xTaskRemoveFromEventList+0xbc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	429a      	cmp	r2, r3
 8002258:	d905      	bls.n	8002266 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800225a:	2301      	movs	r3, #1
 800225c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <xTaskRemoveFromEventList+0xc0>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e001      	b.n	800226a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800226a:	697b      	ldr	r3, [r7, #20]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000130 	.word	0x20000130
 8002278:	20000110 	.word	0x20000110
 800227c:	20000034 	.word	0x20000034
 8002280:	200000c8 	.word	0x200000c8
 8002284:	20000030 	.word	0x20000030
 8002288:	2000011c 	.word	0x2000011c

0800228c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <vTaskInternalSetTimeOutState+0x24>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <vTaskInternalSetTimeOutState+0x28>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	605a      	str	r2, [r3, #4]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	20000120 	.word	0x20000120
 80022b4:	2000010c 	.word	0x2000010c

080022b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <xTaskCheckForTimeOut+0x24>
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e7fe      	b.n	80022da <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <xTaskCheckForTimeOut+0x3e>
 80022e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e7fe      	b.n	80022f4 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80022f6:	f7fe fda3 	bl	8000e40 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <xTaskCheckForTimeOut+0xc0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d102      	bne.n	800231a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e026      	b.n	8002368 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <xTaskCheckForTimeOut+0xc4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d00a      	beq.n	800233c <xTaskCheckForTimeOut+0x84>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	429a      	cmp	r2, r3
 800232e:	d305      	bcc.n	800233c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002330:	2301      	movs	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e015      	b.n	8002368 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20b      	bcs.n	800235e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	1ad2      	subs	r2, r2, r3
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ff9a 	bl	800228c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	e004      	b.n	8002368 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002368:	f7fe fd98 	bl	8000e9c <vPortExitCritical>

    return xReturn;
 800236c:	69fb      	ldr	r3, [r7, #28]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000010c 	.word	0x2000010c
 800237c:	20000120 	.word	0x20000120

08002380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <vTaskMissedYield+0x14>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	2000011c 	.word	0x2000011c

08002398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80023a0:	f000 f852 	bl	8002448 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <prvIdleTask+0x28>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d9f9      	bls.n	80023a0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <prvIdleTask+0x2c>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80023bc:	e7f0      	b.n	80023a0 <prvIdleTask+0x8>
 80023be:	bf00      	nop
 80023c0:	20000034 	.word	0x20000034
 80023c4:	e000ed04 	.word	0xe000ed04

080023c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	e00c      	b.n	80023ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4a12      	ldr	r2, [pc, #72]	; (8002428 <prvInitialiseTaskLists+0x60>)
 80023e0:	4413      	add	r3, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fb4c 	bl	8000a80 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3301      	adds	r3, #1
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d9ef      	bls.n	80023d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <prvInitialiseTaskLists+0x64>)
 80023f6:	f7fe fb43 	bl	8000a80 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80023fa:	480d      	ldr	r0, [pc, #52]	; (8002430 <prvInitialiseTaskLists+0x68>)
 80023fc:	f7fe fb40 	bl	8000a80 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <prvInitialiseTaskLists+0x6c>)
 8002402:	f7fe fb3d 	bl	8000a80 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <prvInitialiseTaskLists+0x70>)
 8002408:	f7fe fb3a 	bl	8000a80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <prvInitialiseTaskLists+0x74>)
 800240e:	f7fe fb37 	bl	8000a80 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <prvInitialiseTaskLists+0x78>)
 8002414:	4a05      	ldr	r2, [pc, #20]	; (800242c <prvInitialiseTaskLists+0x64>)
 8002416:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <prvInitialiseTaskLists+0x7c>)
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <prvInitialiseTaskLists+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000034 	.word	0x20000034
 800242c:	20000098 	.word	0x20000098
 8002430:	200000ac 	.word	0x200000ac
 8002434:	200000c8 	.word	0x200000c8
 8002438:	200000dc 	.word	0x200000dc
 800243c:	200000f4 	.word	0x200000f4
 8002440:	200000c0 	.word	0x200000c0
 8002444:	200000c4 	.word	0x200000c4

08002448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800244e:	e019      	b.n	8002484 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002450:	f7fe fcf6 	bl	8000e40 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <prvCheckTasksWaitingTermination+0x4c>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fb97 	bl	8000b94 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <prvCheckTasksWaitingTermination+0x50>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <prvCheckTasksWaitingTermination+0x50>)
 800246e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <prvCheckTasksWaitingTermination+0x54>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <prvCheckTasksWaitingTermination+0x54>)
 8002478:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800247a:	f7fe fd0f 	bl	8000e9c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f80e 	bl	80024a0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <prvCheckTasksWaitingTermination+0x54>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1e1      	bne.n	8002450 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200000dc 	.word	0x200000dc
 8002498:	20000108 	.word	0x20000108
 800249c:	200000f0 	.word	0x200000f0

080024a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fbe7 	bl	8002c80 <vPortFree>
                vPortFree( pxTCB );
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fbe4 	bl	8002c80 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <prvResetNextTaskUnblockTime+0x30>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d104      	bne.n	80024d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <prvResetNextTaskUnblockTime+0x34>)
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80024d6:	e005      	b.n	80024e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <prvResetNextTaskUnblockTime+0x30>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <prvResetNextTaskUnblockTime+0x34>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200000c0 	.word	0x200000c0
 80024f4:	20000128 	.word	0x20000128

080024f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <xTaskGetSchedulerState+0x34>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002506:	2301      	movs	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	e008      	b.n	800251e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <xTaskGetSchedulerState+0x38>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002514:	2302      	movs	r3, #2
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	e001      	b.n	800251e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800251e:	687b      	ldr	r3, [r7, #4]
    }
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	20000114 	.word	0x20000114
 8002530:	20000130 	.word	0x20000130

08002534 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800253e:	4b21      	ldr	r3, [pc, #132]	; (80025c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3304      	adds	r3, #4
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fb22 	bl	8000b94 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d10a      	bne.n	800256e <prvAddCurrentTaskToDelayedList+0x3a>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4819      	ldr	r0, [pc, #100]	; (80025cc <prvAddCurrentTaskToDelayedList+0x98>)
 8002568:	f7fe fab7 	bl	8000ada <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800256c:	e026      	b.n	80025bc <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	429a      	cmp	r2, r3
 8002584:	d209      	bcs.n	800259a <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f7fe fac5 	bl	8000b22 <vListInsert>
}
 8002598:	e010      	b.n	80025bc <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3304      	adds	r3, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7fe fabb 	bl	8000b22 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d202      	bcs.n	80025bc <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 80025b6:	4a08      	ldr	r2, [pc, #32]	; (80025d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000010c 	.word	0x2000010c
 80025c8:	20000030 	.word	0x20000030
 80025cc:	200000f4 	.word	0x200000f4
 80025d0:	200000c4 	.word	0x200000c4
 80025d4:	200000c0 	.word	0x200000c0
 80025d8:	20000128 	.word	0x20000128

080025dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80025e6:	f000 facf 	bl	8002b88 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <xTimerCreateTimerTask+0x50>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00a      	beq.n	8002608 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <xTimerCreateTimerTask+0x54>)
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2303      	movs	r3, #3
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	2220      	movs	r2, #32
 80025fe:	490d      	ldr	r1, [pc, #52]	; (8002634 <xTimerCreateTimerTask+0x58>)
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <xTimerCreateTimerTask+0x5c>)
 8002602:	f7ff fa01 	bl	8001a08 <xTaskCreate>
 8002606:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <xTimerCreateTimerTask+0x46>
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	e7fe      	b.n	8002620 <xTimerCreateTimerTask+0x44>
        return xReturn;
 8002622:	687b      	ldr	r3, [r7, #4]
    }
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000164 	.word	0x20000164
 8002630:	20000168 	.word	0x20000168
 8002634:	080037a4 	.word	0x080037a4
 8002638:	0800276d 	.word	0x0800276d

0800263c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <xTimerGenericCommand+0x2c>
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	e7fe      	b.n	8002666 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <xTimerGenericCommand+0x94>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d02a      	beq.n	80026c6 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b05      	cmp	r3, #5
 8002680:	dc18      	bgt.n	80026b4 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002682:	f7ff ff39 	bl	80024f8 <xTaskGetSchedulerState>
 8002686:	4603      	mov	r3, r0
 8002688:	2b02      	cmp	r3, #2
 800268a:	d109      	bne.n	80026a0 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800268c:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <xTimerGenericCommand+0x94>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	f107 0114 	add.w	r1, r7, #20
 8002694:	2300      	movs	r3, #0
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	f7fe fdbe 	bl	8001218 <xQueueGenericSend>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24
 800269e:	e012      	b.n	80026c6 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <xTimerGenericCommand+0x94>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	f107 0114 	add.w	r1, r7, #20
 80026a8:	2300      	movs	r3, #0
 80026aa:	2200      	movs	r2, #0
 80026ac:	f7fe fdb4 	bl	8001218 <xQueueGenericSend>
 80026b0:	6278      	str	r0, [r7, #36]	; 0x24
 80026b2:	e008      	b.n	80026c6 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <xTimerGenericCommand+0x94>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	f107 0114 	add.w	r1, r7, #20
 80026bc:	2300      	movs	r3, #0
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	f7fe fea4 	bl	800140c <xQueueGenericSendFromISR>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80026c8:	4618      	mov	r0, r3
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20000164 	.word	0x20000164

080026d4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <prvProcessExpiredTimer+0x94>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe fa51 	bl	8000b94 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d021      	beq.n	8002744 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	18d1      	adds	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f000 f8d1 	bl	80028b4 <prvInsertTimerInActiveList>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01e      	beq.n	8002756 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002718:	2300      	movs	r3, #0
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2300      	movs	r3, #0
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	2100      	movs	r1, #0
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8a 	bl	800263c <xTimerGenericCommand>
 8002728:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d112      	bne.n	8002756 <prvProcessExpiredTimer+0x82>
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e7fe      	b.n	8002742 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	4798      	blx	r3
    }
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000015c 	.word	0x2000015c

0800276c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f857 	bl	800282c <prvGetNextExpireTime>
 800277e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	4619      	mov	r1, r3
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f803 	bl	8002790 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800278a:	f000 f8d5 	bl	8002938 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800278e:	e7f1      	b.n	8002774 <prvTimerTask+0x8>

08002790 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800279a:	f7ff faf9 	bl	8001d90 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f866 	bl	8002874 <prvSampleTimeNow>
 80027a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d130      	bne.n	8002812 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <prvProcessTimerOrBlockTask+0x3c>
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d806      	bhi.n	80027cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80027be:	f7ff faf5 	bl	8001dac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff85 	bl	80026d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80027ca:	e024      	b.n	8002816 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <prvProcessTimerOrBlockTask+0x90>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <prvProcessTimerOrBlockTask+0x50>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <prvProcessTimerOrBlockTask+0x52>
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <prvProcessTimerOrBlockTask+0x94>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7ff f8d5 	bl	80019a0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80027f6:	f7ff fad9 	bl	8001dac <xTaskResumeAll>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <prvProcessTimerOrBlockTask+0x98>)
 8002802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	f3bf 8f6f 	isb	sy
    }
 8002810:	e001      	b.n	8002816 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002812:	f7ff facb 	bl	8001dac <xTaskResumeAll>
    }
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000160 	.word	0x20000160
 8002824:	20000164 	.word	0x20000164
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <prvGetNextExpireTime+0x44>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <prvGetNextExpireTime+0x16>
 800283e:	2201      	movs	r2, #1
 8002840:	e000      	b.n	8002844 <prvGetNextExpireTime+0x18>
 8002842:	2200      	movs	r2, #0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <prvGetNextExpireTime+0x44>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	e001      	b.n	8002860 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002860:	68fb      	ldr	r3, [r7, #12]
    }
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	2000015c 	.word	0x2000015c

08002874 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800287c:	f7ff fb32 	bl	8001ee4 <xTaskGetTickCount>
 8002880:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <prvSampleTimeNow+0x3c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d205      	bcs.n	8002898 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800288c:	f000 f918 	bl	8002ac0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e002      	b.n	800289e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800289e:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <prvSampleTimeNow+0x3c>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80028a4:	68fb      	ldr	r3, [r7, #12]
    }
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000016c 	.word	0x2000016c

080028b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d812      	bhi.n	8002900 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e01b      	b.n	8002926 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <prvInsertTimerInActiveList+0x7c>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3304      	adds	r3, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f7fe f912 	bl	8000b22 <vListInsert>
 80028fe:	e012      	b.n	8002926 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d206      	bcs.n	8002916 <prvInsertTimerInActiveList+0x62>
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d302      	bcc.n	8002916 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e007      	b.n	8002926 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <prvInsertTimerInActiveList+0x80>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7fe f8fe 	bl	8000b22 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002926:	697b      	ldr	r3, [r7, #20]
    }
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000160 	.word	0x20000160
 8002934:	2000015c 	.word	0x2000015c

08002938 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800293e:	e0ac      	b.n	8002a9a <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f2c0 80a8 	blt.w	8002a98 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3304      	adds	r3, #4
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f91b 	bl	8000b94 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff87 	bl	8002874 <prvSampleTimeNow>
 8002966:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b09      	cmp	r3, #9
 800296c:	f200 8095 	bhi.w	8002a9a <prvProcessReceivedCommands+0x162>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <prvProcessReceivedCommands+0x40>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	080029a1 	.word	0x080029a1
 800297c:	080029a1 	.word	0x080029a1
 8002980:	080029a1 	.word	0x080029a1
 8002984:	08002a13 	.word	0x08002a13
 8002988:	08002a27 	.word	0x08002a27
 800298c:	08002a6f 	.word	0x08002a6f
 8002990:	080029a1 	.word	0x080029a1
 8002994:	080029a1 	.word	0x080029a1
 8002998:	08002a13 	.word	0x08002a13
 800299c:	08002a27 	.word	0x08002a27
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	18d1      	adds	r1, r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a3a      	ldr	r2, [r7, #32]
 80029be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c0:	f7ff ff78 	bl	80028b4 <prvInsertTimerInActiveList>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d067      	beq.n	8002a9a <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029d0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d05c      	beq.n	8002a9a <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	441a      	add	r2, r3
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2300      	movs	r3, #0
 80029ee:	2100      	movs	r1, #0
 80029f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029f2:	f7ff fe23 	bl	800263c <xTimerGenericCommand>
 80029f6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d14d      	bne.n	8002a9a <prvProcessReceivedCommands+0x162>
 80029fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	e7fe      	b.n	8002a10 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002a24:	e039      	b.n	8002a9a <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <prvProcessReceivedCommands+0x122>
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e7fe      	b.n	8002a58 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	18d1      	adds	r1, r2, r3
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a68:	f7ff ff24 	bl	80028b4 <prvInsertTimerInActiveList>
                        break;
 8002a6c:	e015      	b.n	8002a9a <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a7e:	f000 f8ff 	bl	8002c80 <vPortFree>
 8002a82:	e00a      	b.n	8002a9a <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002a96:	e000      	b.n	8002a9a <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002a98:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <prvProcessReceivedCommands+0x184>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f107 0108 	add.w	r1, r7, #8
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fd57 	bl	8001558 <xQueueReceive>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f47f af47 	bne.w	8002940 <prvProcessReceivedCommands+0x8>
        }
    }
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000164 	.word	0x20000164

08002ac0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ac6:	e047      	b.n	8002b58 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <prvSwitchTimerLists+0xc0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad2:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <prvSwitchTimerLists+0xc0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe f857 	bl	8000b94 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02d      	beq.n	8002b58 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d90e      	bls.n	8002b2c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <prvSwitchTimerLists+0xc0>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3304      	adds	r3, #4
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	f7fd fffc 	bl	8000b22 <vListInsert>
 8002b2a:	e015      	b.n	8002b58 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2300      	movs	r3, #0
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	2100      	movs	r1, #0
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff fd80 	bl	800263c <xTimerGenericCommand>
 8002b3c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <prvSwitchTimerLists+0x98>
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	e7fe      	b.n	8002b56 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <prvSwitchTimerLists+0xc0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1b2      	bne.n	8002ac8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <prvSwitchTimerLists+0xc0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <prvSwitchTimerLists+0xc4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <prvSwitchTimerLists+0xc0>)
 8002b6e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002b70:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <prvSwitchTimerLists+0xc4>)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6013      	str	r3, [r2, #0]
    }
 8002b76:	bf00      	nop
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000015c 	.word	0x2000015c
 8002b84:	20000160 	.word	0x20000160

08002b88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b8c:	f7fe f958 	bl	8000e40 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <prvCheckForValidListAndQueue+0x54>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11d      	bne.n	8002bd4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b98:	4811      	ldr	r0, [pc, #68]	; (8002be0 <prvCheckForValidListAndQueue+0x58>)
 8002b9a:	f7fd ff71 	bl	8000a80 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b9e:	4811      	ldr	r0, [pc, #68]	; (8002be4 <prvCheckForValidListAndQueue+0x5c>)
 8002ba0:	f7fd ff6e 	bl	8000a80 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <prvCheckForValidListAndQueue+0x60>)
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <prvCheckForValidListAndQueue+0x58>)
 8002ba8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <prvCheckForValidListAndQueue+0x64>)
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <prvCheckForValidListAndQueue+0x5c>)
 8002bae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	210c      	movs	r1, #12
 8002bb4:	2005      	movs	r0, #5
 8002bb6:	f7fe fabd 	bl	8001134 <xQueueGenericCreate>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <prvCheckForValidListAndQueue+0x54>)
 8002bbe:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <prvCheckForValidListAndQueue+0x54>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <prvCheckForValidListAndQueue+0x54>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <prvCheckForValidListAndQueue+0x68>)
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe febe 	bl	8001950 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002bd4:	f7fe f962 	bl	8000e9c <vPortExitCritical>
    }
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000164 	.word	0x20000164
 8002be0:	20000134 	.word	0x20000134
 8002be4:	20000148 	.word	0x20000148
 8002be8:	2000015c 	.word	0x2000015c
 8002bec:	20000160 	.word	0x20000160
 8002bf0:	080037ac 	.word	0x080037ac

08002bf4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned to the required number of bytes. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <pvPortMalloc+0x20>
            {
                /* Byte alignment required. */
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f023 0307 	bic.w	r3, r3, #7
 8002c10:	3308      	adds	r3, #8
 8002c12:	607b      	str	r3, [r7, #4]
            }
        }
    #endif

    vTaskSuspendAll();
 8002c14:	f7ff f8bc 	bl	8001d90 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <pvPortMalloc+0x80>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <pvPortMalloc+0x38>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <pvPortMalloc+0x84>)
 8002c22:	f023 0307 	bic.w	r3, r3, #7
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <pvPortMalloc+0x80>)
 8002c2a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation. */
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002c2c:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <pvPortMalloc+0x88>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	f24c 72f7 	movw	r2, #51191	; 0xc7f7
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d813      	bhi.n	8002c64 <pvPortMalloc+0x70>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <pvPortMalloc+0x88>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	441a      	add	r2, r3
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <pvPortMalloc+0x88>)
 8002c46:	681b      	ldr	r3, [r3, #0]
        if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d90b      	bls.n	8002c64 <pvPortMalloc+0x70>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <pvPortMalloc+0x80>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <pvPortMalloc+0x88>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <pvPortMalloc+0x88>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	4a06      	ldr	r2, [pc, #24]	; (8002c7c <pvPortMalloc+0x88>)
 8002c62:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002c64:	f7ff f8a2 	bl	8001dac <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 8002c68:	68fb      	ldr	r3, [r7, #12]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	2000c974 	.word	0x2000c974
 8002c78:	20000178 	.word	0x20000178
 8002c7c:	2000c970 	.word	0x2000c970

08002c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <vPortFree+0x22>
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e7fe      	b.n	8002ca0 <vPortFree+0x20>
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cb4:	f7fd fece 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb8:	480c      	ldr	r0, [pc, #48]	; (8002cec <LoopForever+0x6>)
  ldr r1, =_edata
 8002cba:	490d      	ldr	r1, [pc, #52]	; (8002cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <LoopForever+0xe>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cd0:	4c0a      	ldr	r4, [pc, #40]	; (8002cfc <LoopForever+0x16>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cde:	f000 fd11 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce2:	f000 f80f 	bl	8002d04 <main>

08002ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ce6:	e7fe      	b.n	8002ce6 <LoopForever>
  ldr   r0, =_estack
 8002ce8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002cf4:	08003850 	.word	0x08003850
  ldr r2, =_sbss
 8002cf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002cfc:	2000c9ec 	.word	0x2000c9ec

08002d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d00:	e7fe      	b.n	8002d00 <ADC1_2_IRQHandler>
	...

08002d04 <main>:
#endif

char buffer[] = "Test\r\n";

int main(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af02      	add	r7, sp, #8
	InitRCC();
 8002d0a:	f000 f9b9 	bl	8003080 <InitRCC>
	InitLedGPIO();
 8002d0e:	f000 faaf 	bl	8003270 <InitLedGPIO>
	InitUSART1();
 8002d12:	f000 fbfb 	bl	800350c <InitUSART1>
	InitOpamp1();
 8002d16:	f7fd fb41 	bl	800039c <InitOpamp1>
	InitOpamp2();
 8002d1a:	f7fd fc51 	bl	80005c0 <InitOpamp2>
	InitOpamp3();
 8002d1e:	f7fd fd61 	bl	80007e4 <InitOpamp3>
	InitVrefbuf();
 8002d22:	f7fd fe6d 	bl	8000a00 <InitVrefbuf>
	InitADC12();
 8002d26:	f7fd fa7b 	bl	8000220 <InitADC12>
	InitDMAusart1();
 8002d2a:	f000 f91f 	bl	8002f6c <InitDMAusart1>

	xTaskCreate(vTaskLED, "LED", 128, 0 , 1, &TaskConvADCHandle);
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <main+0x7c>)
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2301      	movs	r3, #1
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	4912      	ldr	r1, [pc, #72]	; (8002d84 <main+0x80>)
 8002d3c:	4812      	ldr	r0, [pc, #72]	; (8002d88 <main+0x84>)
 8002d3e:	f7fe fe63 	bl	8001a08 <xTaskCreate>
	xTaskCreate(vTaskSendUSART, "SendUSART", 128, 0 , 1, &TaskSendUSARTHandle);
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <main+0x88>)
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2301      	movs	r3, #1
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	4910      	ldr	r1, [pc, #64]	; (8002d90 <main+0x8c>)
 8002d50:	4810      	ldr	r0, [pc, #64]	; (8002d94 <main+0x90>)
 8002d52:	f7fe fe59 	bl	8001a08 <xTaskCreate>
	xTaskCreate(vTaskConvADC, "ADC", 128, 0, 2, &TaskConvADCHandle);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <main+0x7c>)
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	490d      	ldr	r1, [pc, #52]	; (8002d98 <main+0x94>)
 8002d64:	480d      	ldr	r0, [pc, #52]	; (8002d9c <main+0x98>)
 8002d66:	f7fe fe4f 	bl	8001a08 <xTaskCreate>

	SendDataADC = xQueueCreate(ADCQUEUE, sizeof(uint16_t));
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	2005      	movs	r0, #5
 8002d70:	f7fe f9e0 	bl	8001134 <xQueueGenericCreate>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <main+0x9c>)
 8002d78:	601a      	str	r2, [r3, #0]

	vTaskStartScheduler();
 8002d7a:	f7fe ffbd 	bl	8001cf8 <vTaskStartScheduler>

    while(1)
 8002d7e:	e7fe      	b.n	8002d7e <main+0x7a>
 8002d80:	2000c9dc 	.word	0x2000c9dc
 8002d84:	080037b4 	.word	0x080037b4
 8002d88:	08002da5 	.word	0x08002da5
 8002d8c:	2000c9e4 	.word	0x2000c9e4
 8002d90:	080037b8 	.word	0x080037b8
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	080037c4 	.word	0x080037c4
 8002d9c:	08002efd 	.word	0x08002efd
 8002da0:	2000c9e0 	.word	0x2000c9e0

08002da4 <vTaskLED>:
    {

    }
}

void vTaskLED (void *pvParameters){
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		BlinkLED (GREEN, 100);
 8002dac:	2164      	movs	r1, #100	; 0x64
 8002dae:	2005      	movs	r0, #5
 8002db0:	f000 fb7a 	bl	80034a8 <BlinkLED>
 8002db4:	e7fa      	b.n	8002dac <vTaskLED+0x8>
	...

08002db8 <vTaskSendUSART>:
	}
}

void vTaskSendUSART(void *pvParameters){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

	uint16_t adcResult;

	portBASE_TYPE xStatus;
	float adcCoeff = VREF/ADCRES;
 8002dc0:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <vTaskSendUSART+0x10c>)
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
	float t0Voltage = 500;
 8002dc4:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <vTaskSendUSART+0x110>)
 8002dc6:	623b      	str	r3, [r7, #32]
	float TempCoeff = 10;
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <vTaskSendUSART+0x114>)
 8002dca:	61fb      	str	r3, [r7, #28]
	static char adcResultStr[4],  VoltageStr[4], TemperatureStr[4];

	while(1)
	{

		if (uxQueueMessagesWaiting(SendDataADC) != 0)
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <vTaskSendUSART+0x118>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fc9d 	bl	8001710 <uxQueueMessagesWaiting>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f7      	beq.n	8002dcc <vTaskSendUSART+0x14>
		{
			SetLED (RED, OFF);
 8002ddc:	2100      	movs	r1, #0
 8002dde:	200f      	movs	r0, #15
 8002de0:	f000 fa9c 	bl	800331c <SetLED>

			xStatus = xQueueReceive(SendDataADC, &adcResult, 0);
 8002de4:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <vTaskSendUSART+0x118>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f107 010e 	add.w	r1, r7, #14
 8002dec:	2200      	movs	r2, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe fbb2 	bl	8001558 <xQueueReceive>
 8002df4:	61b8      	str	r0, [r7, #24]
			if (xStatus == pdPASS) {
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d15b      	bne.n	8002eb4 <vTaskSendUSART+0xfc>
				voltage = adcCoeff*((float)(adcResult));
 8002dfc:	89fb      	ldrh	r3, [r7, #14]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	edc7 7a05 	vstr	s15, [r7, #20]
				temperature = ((voltage - t0Voltage)/TempCoeff);
 8002e12:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e16:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002e1e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e26:	edc7 7a04 	vstr	s15, [r7, #16]
				ToggleLED(YELLOW);
 8002e2a:	2009      	movs	r0, #9
 8002e2c:	f000 fb00 	bl	8003430 <ToggleLED>
				SendStringUSART1("Raw data: ");
 8002e30:	4828      	ldr	r0, [pc, #160]	; (8002ed4 <vTaskSendUSART+0x11c>)
 8002e32:	f000 fc01 	bl	8003638 <SendStringUSART1>
				SendStringUSART1(UtoaBuiltinDiv(adcResult, adcResultStr));
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	4927      	ldr	r1, [pc, #156]	; (8002ed8 <vTaskSendUSART+0x120>)
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fc2e 	bl	800369c <UtoaBuiltinDiv>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fbf8 	bl	8003638 <SendStringUSART1>
				SendStringUSART1(" Voltage: ");
 8002e48:	4824      	ldr	r0, [pc, #144]	; (8002edc <vTaskSendUSART+0x124>)
 8002e4a:	f000 fbf5 	bl	8003638 <SendStringUSART1>
				SendStringUSART1(UtoaBuiltinDiv((uint16_t)(voltage), VoltageStr));
 8002e4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e56:	ee17 3a90 	vmov	r3, s15
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4920      	ldr	r1, [pc, #128]	; (8002ee0 <vTaskSendUSART+0x128>)
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc1c 	bl	800369c <UtoaBuiltinDiv>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fbe6 	bl	8003638 <SendStringUSART1>
				SendStringUSART1(" mV");
 8002e6c:	481d      	ldr	r0, [pc, #116]	; (8002ee4 <vTaskSendUSART+0x12c>)
 8002e6e:	f000 fbe3 	bl	8003638 <SendStringUSART1>
				SendStringUSART1(" Temperature: ");
 8002e72:	481d      	ldr	r0, [pc, #116]	; (8002ee8 <vTaskSendUSART+0x130>)
 8002e74:	f000 fbe0 	bl	8003638 <SendStringUSART1>
				SendStringUSART1(UtoaBuiltinDiv((uint16_t)(temperature), TemperatureStr));
 8002e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e80:	ee17 3a90 	vmov	r3, s15
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4919      	ldr	r1, [pc, #100]	; (8002eec <vTaskSendUSART+0x134>)
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fc07 	bl	800369c <UtoaBuiltinDiv>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fbd1 	bl	8003638 <SendStringUSART1>
				SendStringUSART1(" C");
 8002e96:	4816      	ldr	r0, [pc, #88]	; (8002ef0 <vTaskSendUSART+0x138>)
 8002e98:	f000 fbce 	bl	8003638 <SendStringUSART1>
				SendStringUSART1("\r\n");
 8002e9c:	4815      	ldr	r0, [pc, #84]	; (8002ef4 <vTaskSendUSART+0x13c>)
 8002e9e:	f000 fbcb 	bl	8003638 <SendStringUSART1>
				ToggleLED(YELLOW);
 8002ea2:	2009      	movs	r0, #9
 8002ea4:	f000 fac4 	bl	8003430 <ToggleLED>
				vTaskDelay(100);
 8002ea8:	2064      	movs	r0, #100	; 0x64
 8002eaa:	f7fe fef1 	bl	8001c90 <vTaskDelay>
				WriteDMAuart1();
 8002eae:	f000 f8c7 	bl	8003040 <WriteDMAuart1>
 8002eb2:	e78b      	b.n	8002dcc <vTaskSendUSART+0x14>
			}
			else
			{
				SendStringUSART1("Could not receive from the queue.\r\n");
 8002eb4:	4810      	ldr	r0, [pc, #64]	; (8002ef8 <vTaskSendUSART+0x140>)
 8002eb6:	f000 fbbf 	bl	8003638 <SendStringUSART1>
				SetLED (RED, ON);
 8002eba:	2101      	movs	r1, #1
 8002ebc:	200f      	movs	r0, #15
 8002ebe:	f000 fa2d 	bl	800331c <SetLED>
		if (uxQueueMessagesWaiting(SendDataADC) != 0)
 8002ec2:	e783      	b.n	8002dcc <vTaskSendUSART+0x14>
 8002ec4:	3f1c4000 	.word	0x3f1c4000
 8002ec8:	43fa0000 	.word	0x43fa0000
 8002ecc:	41200000 	.word	0x41200000
 8002ed0:	2000c9e0 	.word	0x2000c9e0
 8002ed4:	080037c8 	.word	0x080037c8
 8002ed8:	2000c978 	.word	0x2000c978
 8002edc:	080037d4 	.word	0x080037d4
 8002ee0:	2000c97c 	.word	0x2000c97c
 8002ee4:	080037e0 	.word	0x080037e0
 8002ee8:	080037e4 	.word	0x080037e4
 8002eec:	2000c980 	.word	0x2000c980
 8002ef0:	080037f4 	.word	0x080037f4
 8002ef4:	080037f8 	.word	0x080037f8
 8002ef8:	080037fc 	.word	0x080037fc

08002efc <vTaskConvADC>:


	}
}

void vTaskConvADC (void *pvParameters){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

	portBASE_TYPE xStatus;

	while(1)
	{
		adcResult = StartConvADC();
 8002f04:	f7fd fa2e 	bl	8000364 <StartConvADC>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	817b      	strh	r3, [r7, #10]

		xStatus = xQueueSend(SendDataADC, &adcResult, 0);
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <vTaskConvADC+0x5c>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f107 010a 	add.w	r1, r7, #10
 8002f14:	2300      	movs	r3, #0
 8002f16:	2200      	movs	r2, #0
 8002f18:	f7fe f97e 	bl	8001218 <xQueueGenericSend>
 8002f1c:	60f8      	str	r0, [r7, #12]

		if (xStatus == pdPASS)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d103      	bne.n	8002f2c <vTaskConvADC+0x30>
		{
			SendStringUSART1("Sent.\r\n");
 8002f24:	480d      	ldr	r0, [pc, #52]	; (8002f5c <vTaskConvADC+0x60>)
 8002f26:	f000 fb87 	bl	8003638 <SendStringUSART1>
 8002f2a:	e00e      	b.n	8002f4a <vTaskConvADC+0x4e>
		}
		else
		{
			SendStringUSART1("Could not send to the queue. ");
 8002f2c:	480c      	ldr	r0, [pc, #48]	; (8002f60 <vTaskConvADC+0x64>)
 8002f2e:	f000 fb83 	bl	8003638 <SendStringUSART1>
			SendStringUSART1(UtoaBuiltinDiv(adcResult, adcResultStr));
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	490b      	ldr	r1, [pc, #44]	; (8002f64 <vTaskConvADC+0x68>)
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fbb0 	bl	800369c <UtoaBuiltinDiv>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb7a 	bl	8003638 <SendStringUSART1>
			SendStringUSART1("\r\n");
 8002f44:	4808      	ldr	r0, [pc, #32]	; (8002f68 <vTaskConvADC+0x6c>)
 8002f46:	f000 fb77 	bl	8003638 <SendStringUSART1>
		}

		ToggleLED(WHITE);
 8002f4a:	200d      	movs	r0, #13
 8002f4c:	f000 fa70 	bl	8003430 <ToggleLED>
		vTaskDelay(200);
 8002f50:	20c8      	movs	r0, #200	; 0xc8
 8002f52:	f7fe fe9d 	bl	8001c90 <vTaskDelay>
		adcResult = StartConvADC();
 8002f56:	e7d5      	b.n	8002f04 <vTaskConvADC+0x8>
 8002f58:	2000c9e0 	.word	0x2000c9e0
 8002f5c:	08003820 	.word	0x08003820
 8002f60:	08003828 	.word	0x08003828
 8002f64:	2000c984 	.word	0x2000c984
 8002f68:	080037f8 	.word	0x080037f8

08002f6c <InitDMAusart1>:
	}
}

void InitDMAusart1 (void){
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
	RCC					-> AHB1ENR	|= RCC_AHB1ENR_DMA1EN;
 8002f70:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <InitDMAusart1+0xbc>)
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <InitDMAusart1+0xbc>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6493      	str	r3, [r2, #72]	; 0x48

	DMA1_Channel1		-> CCR		&= ~DMA_CCR_EN;
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <InitDMAusart1+0xc0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2a      	ldr	r2, [pc, #168]	; (800302c <InitDMAusart1+0xc0>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6013      	str	r3, [r2, #0]

	DMA1_Channel1		-> CCR		&= ~DMA_CCR_CIRC;						// Disable cycle mode
 8002f88:	4b28      	ldr	r3, [pc, #160]	; (800302c <InitDMAusart1+0xc0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a27      	ldr	r2, [pc, #156]	; (800302c <InitDMAusart1+0xc0>)
 8002f8e:	f023 0320 	bic.w	r3, r3, #32
 8002f92:	6013      	str	r3, [r2, #0]
	DMA1_Channel1		-> CCR		&= ~DMA_CCR_PINC;						// Disable increment pointer peripheral
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <InitDMAusart1+0xc0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <InitDMAusart1+0xc0>)
 8002f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f9e:	6013      	str	r3, [r2, #0]

	DMA1_Channel1		-> CCR		&= ~DMA_CCR_PSIZE;						// Size of data peripheral = 8 bit
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <InitDMAusart1+0xc0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a21      	ldr	r2, [pc, #132]	; (800302c <InitDMAusart1+0xc0>)
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002faa:	6013      	str	r3, [r2, #0]
	DMA1_Channel1		-> CCR		&= ~DMA_CCR_MSIZE;						// Size of data memory = 8 bit
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <InitDMAusart1+0xc0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1e      	ldr	r2, [pc, #120]	; (800302c <InitDMAusart1+0xc0>)
 8002fb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fb6:	6013      	str	r3, [r2, #0]

	DMA1_Channel1		-> CCR		|= DMA_CCR_DIR;							// Read: memory -> peripheral
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	; (800302c <InitDMAusart1+0xc0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <InitDMAusart1+0xc0>)
 8002fbe:	f043 0310 	orr.w	r3, r3, #16
 8002fc2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1		-> CCR		|= DMA_CCR_MINC;						// Disable increment pointer memory (???)
 8002fc4:	4b19      	ldr	r3, [pc, #100]	; (800302c <InitDMAusart1+0xc0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a18      	ldr	r2, [pc, #96]	; (800302c <InitDMAusart1+0xc0>)
 8002fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fce:	6013      	str	r3, [r2, #0]
	DMA1_Channel1		-> CCR		&= ~DMA_CCR_PINC;
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <InitDMAusart1+0xc0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a15      	ldr	r2, [pc, #84]	; (800302c <InitDMAusart1+0xc0>)
 8002fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fda:	6013      	str	r3, [r2, #0]

	DMAMUX1_Channel0	-> CCR		&= ~DMAMUX_CxCR_DMAREQ_ID;
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <InitDMAusart1+0xc4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a13      	ldr	r2, [pc, #76]	; (8003030 <InitDMAusart1+0xc4>)
 8002fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fe6:	6013      	str	r3, [r2, #0]
	DMAMUX1_Channel0	-> CCR		|= 0x20UL << DMAMUX_CxCR_DMAREQ_ID_Pos; // USART1_TX
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <InitDMAusart1+0xc4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a10      	ldr	r2, [pc, #64]	; (8003030 <InitDMAusart1+0xc4>)
 8002fee:	f043 0320 	orr.w	r3, r3, #32
 8002ff2:	6013      	str	r3, [r2, #0]

	DMA1_Channel1		-> CPAR		= (uint32_t)&USART1->TDR;
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <InitDMAusart1+0xc0>)
 8002ff6:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <InitDMAusart1+0xc8>)
 8002ff8:	609a      	str	r2, [r3, #8]
	DMA1_Channel1		-> CMAR		= (uint32_t)&buffer;
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	; (800302c <InitDMAusart1+0xc0>)
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <InitDMAusart1+0xcc>)
 8002ffe:	60da      	str	r2, [r3, #12]
	DMA1_Channel1		-> CNDTR	= 32;									// Size of buffer
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <InitDMAusart1+0xc0>)
 8003002:	2220      	movs	r2, #32
 8003004:	605a      	str	r2, [r3, #4]

	USART1				-> CR3		|= USART_CR3_DMAT;						// Enable DMA for USART1
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <InitDMAusart1+0xd0>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <InitDMAusart1+0xd0>)
 800300c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003010:	6093      	str	r3, [r2, #8]

	DMA1_Channel1		-> CCR		|= DMA_CCR_EN;
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <InitDMAusart1+0xc0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <InitDMAusart1+0xc0>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6013      	str	r3, [r2, #0]
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	40021000 	.word	0x40021000
 800302c:	40020008 	.word	0x40020008
 8003030:	40020800 	.word	0x40020800
 8003034:	40013828 	.word	0x40013828
 8003038:	20000004 	.word	0x20000004
 800303c:	40013800 	.word	0x40013800

08003040 <WriteDMAuart1>:

void WriteDMAuart1 (void){
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
	DMA1_Channel1		-> CCR		&= ~DMA_CCR_EN;
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <WriteDMAuart1+0x38>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <WriteDMAuart1+0x38>)
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1		-> CNDTR	= (sizeof(buffer)-1);
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <WriteDMAuart1+0x38>)
 8003052:	2206      	movs	r2, #6
 8003054:	605a      	str	r2, [r3, #4]
	DMA1				-> IFCR		|= DMA_IFCR_CGIF1;						// global interrupt flag clear for channel 1
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <WriteDMAuart1+0x3c>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <WriteDMAuart1+0x3c>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6053      	str	r3, [r2, #4]
	DMA1_Channel1		-> CCR		|= DMA_CCR_EN;
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <WriteDMAuart1+0x38>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <WriteDMAuart1+0x38>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6013      	str	r3, [r2, #0]
}
 800306e:	bf00      	nop
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40020008 	.word	0x40020008
 800307c:	40020000 	.word	0x40020000

08003080 <InitRCC>:

#include "sysinit.h"

/********************************************* Used functions ********************************************/

void InitRCC (void){
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
	uint8_t ticks = 0;													//(1us = 168 ticks @ 168MHz)
 8003086:	2300      	movs	r3, #0
 8003088:	71fb      	strb	r3, [r7, #7]

	PWR		-> CR1			|= PWR_CR1_VOS_0;							// Ensure range 1
 800308a:	4b6b      	ldr	r3, [pc, #428]	; (8003238 <InitRCC+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6a      	ldr	r2, [pc, #424]	; (8003238 <InitRCC+0x1b8>)
 8003090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003094:	6013      	str	r3, [r2, #0]
	PWR		-> CR5			&= ~PWR_CR5_R1MODE;							// Range 1 from normal to boost mode
 8003096:	4b68      	ldr	r3, [pc, #416]	; (8003238 <InitRCC+0x1b8>)
 8003098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800309c:	4a66      	ldr	r2, [pc, #408]	; (8003238 <InitRCC+0x1b8>)
 800309e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	RCC		->CR			|= ((uint32_t)RCC_CR_HSEON); 				// Enable HSE
 80030a6:	4b65      	ldr	r3, [pc, #404]	; (800323c <InitRCC+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a64      	ldr	r2, [pc, #400]	; (800323c <InitRCC+0x1bc>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));									// Ready to start HSE
 80030b2:	bf00      	nop
 80030b4:	4b61      	ldr	r3, [pc, #388]	; (800323c <InitRCC+0x1bc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f9      	beq.n	80030b4 <InitRCC+0x34>

	RCC		-> CR			|= RCC_CR_CSSON;
 80030c0:	4b5e      	ldr	r3, [pc, #376]	; (800323c <InitRCC+0x1bc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5d      	ldr	r2, [pc, #372]	; (800323c <InitRCC+0x1bc>)
 80030c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030ca:	6013      	str	r3, [r2, #0]

	FLASH	-> ACR			|= FLASH_ACR_PRFTEN;
 80030cc:	4b5c      	ldr	r3, [pc, #368]	; (8003240 <InitRCC+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5b      	ldr	r2, [pc, #364]	; (8003240 <InitRCC+0x1c0>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d6:	6013      	str	r3, [r2, #0]
	FLASH	-> ACR			|= FLASH_ACR_LATENCY_4WS;					// See table 9
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <InitRCC+0x1c0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a58      	ldr	r2, [pc, #352]	; (8003240 <InitRCC+0x1c0>)
 80030de:	f043 0304 	orr.w	r3, r3, #4
 80030e2:	6013      	str	r3, [r2, #0]

	RCC		-> CFGR			|= RCC_CFGR_HPRE_DIV1;						// AHB = SYSCLK/1
 80030e4:	4b55      	ldr	r3, [pc, #340]	; (800323c <InitRCC+0x1bc>)
 80030e6:	4a55      	ldr	r2, [pc, #340]	; (800323c <InitRCC+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_PPRE1_DIV1;						// APB1 = HCLK/1
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <InitRCC+0x1bc>)
 80030ee:	4a53      	ldr	r2, [pc, #332]	; (800323c <InitRCC+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_PPRE2_DIV1;						// APB2 = HCLK/1
 80030f4:	4b51      	ldr	r3, [pc, #324]	; (800323c <InitRCC+0x1bc>)
 80030f6:	4a51      	ldr	r2, [pc, #324]	; (800323c <InitRCC+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	6093      	str	r3, [r2, #8]

	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLPEN;						// clear PLLPEN bits
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <InitRCC+0x1bc>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a4e      	ldr	r2, [pc, #312]	; (800323c <InitRCC+0x1bc>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLP;						// clear PLLP bits
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <InitRCC+0x1bc>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a4b      	ldr	r2, [pc, #300]	; (800323c <InitRCC+0x1bc>)
 800310e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003112:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLQEN;						// clear PLLQEN bits
 8003114:	4b49      	ldr	r3, [pc, #292]	; (800323c <InitRCC+0x1bc>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4a48      	ldr	r2, [pc, #288]	; (800323c <InitRCC+0x1bc>)
 800311a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800311e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLQ;						// clear PLLQ bits
 8003120:	4b46      	ldr	r3, [pc, #280]	; (800323c <InitRCC+0x1bc>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a45      	ldr	r2, [pc, #276]	; (800323c <InitRCC+0x1bc>)
 8003126:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800312a:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLREN;						// clear PLLREN bits
 800312c:	4b43      	ldr	r3, [pc, #268]	; (800323c <InitRCC+0x1bc>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a42      	ldr	r2, [pc, #264]	; (800323c <InitRCC+0x1bc>)
 8003132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003136:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLR;						// clear PLLR bits
 8003138:	4b40      	ldr	r3, [pc, #256]	; (800323c <InitRCC+0x1bc>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a3f      	ldr	r2, [pc, #252]	; (800323c <InitRCC+0x1bc>)
 800313e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003142:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLN;						// clear PLLN bits
 8003144:	4b3d      	ldr	r3, [pc, #244]	; (800323c <InitRCC+0x1bc>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a3c      	ldr	r2, [pc, #240]	; (800323c <InitRCC+0x1bc>)
 800314a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800314e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLM_0;						// clear PLLM bits
 8003150:	4b3a      	ldr	r3, [pc, #232]	; (800323c <InitRCC+0x1bc>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a39      	ldr	r2, [pc, #228]	; (800323c <InitRCC+0x1bc>)
 8003156:	f023 0310 	bic.w	r3, r3, #16
 800315a:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLSRC;               		// clear PLLSRC bits
 800315c:	4b37      	ldr	r3, [pc, #220]	; (800323c <InitRCC+0x1bc>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a36      	ldr	r2, [pc, #216]	; (800323c <InitRCC+0x1bc>)
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLSRC_HSE; 					// source HSE = 8MHz
 8003168:	4b34      	ldr	r3, [pc, #208]	; (800323c <InitRCC+0x1bc>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a33      	ldr	r2, [pc, #204]	; (800323c <InitRCC+0x1bc>)
 800316e:	f043 0303 	orr.w	r3, r3, #3
 8003172:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLM_0; 					// PLLM = HSE/1 = 8 MHz
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <InitRCC+0x1bc>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a30      	ldr	r2, [pc, #192]	; (800323c <InitRCC+0x1bc>)
 800317a:	f023 0310 	bic.w	r3, r3, #16
 800317e:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= 0x29UL << RCC_PLLCFGR_PLLN_Pos; 			// PLLN = PLLM*42 = 336 MHz
 8003180:	4b2e      	ldr	r3, [pc, #184]	; (800323c <InitRCC+0x1bc>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a2d      	ldr	r2, [pc, #180]	; (800323c <InitRCC+0x1bc>)
 8003186:	f443 5324 	orr.w	r3, r3, #10496	; 0x2900
 800318a:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		&= ~RCC_PLLCFGR_PLLR; 						// PLLR = PLLN/2 = 168 MHz
 800318c:	4b2b      	ldr	r3, [pc, #172]	; (800323c <InitRCC+0x1bc>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a2a      	ldr	r2, [pc, #168]	; (800323c <InitRCC+0x1bc>)
 8003192:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003196:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLREN;
 8003198:	4b28      	ldr	r3, [pc, #160]	; (800323c <InitRCC+0x1bc>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <InitRCC+0x1bc>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLSRC; 						//HSE clock selected as PLL clock entry
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <InitRCC+0x1bc>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a24      	ldr	r2, [pc, #144]	; (800323c <InitRCC+0x1bc>)
 80031aa:	f043 0303 	orr.w	r3, r3, #3
 80031ae:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= 0x8UL << RCC_PLLCFGR_PLLQ_Pos;			// PLLQ = PLLN/8 = 42 MHz (for FD CAN)
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <InitRCC+0x1bc>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	4a21      	ldr	r2, [pc, #132]	; (800323c <InitRCC+0x1bc>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ba:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLQEN;
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <InitRCC+0x1bc>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a1e      	ldr	r2, [pc, #120]	; (800323c <InitRCC+0x1bc>)
 80031c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c6:	60d3      	str	r3, [r2, #12]

	RCC		-> PLLCFGR		|= 0x8UL << RCC_PLLCFGR_PLLPDIV_Pos;		// PLLP = PLLN/6 = 56 MHz (for ADC)
 80031c8:	4b1c      	ldr	r3, [pc, #112]	; (800323c <InitRCC+0x1bc>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a1b      	ldr	r2, [pc, #108]	; (800323c <InitRCC+0x1bc>)
 80031ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031d2:	60d3      	str	r3, [r2, #12]
	RCC		-> PLLCFGR		|= RCC_PLLCFGR_PLLPEN;
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <InitRCC+0x1bc>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <InitRCC+0x1bc>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	60d3      	str	r3, [r2, #12]

	RCC		-> CR			|= RCC_CR_PLLON;                      		// enable PLL
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <InitRCC+0x1bc>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <InitRCC+0x1bc>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {}     						// wait till PLL is ready
 80031ec:	bf00      	nop
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <InitRCC+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f9      	beq.n	80031ee <InitRCC+0x16e>

	RCC		-> CFGR			&= ~RCC_CFGR_SW;                   			// clear SW bits
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <InitRCC+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a0f      	ldr	r2, [pc, #60]	; (800323c <InitRCC+0x1bc>)
 8003200:	f023 0303 	bic.w	r3, r3, #3
 8003204:	6093      	str	r3, [r2, #8]
	RCC		-> CFGR			|= RCC_CFGR_SW_PLL;               			// select source SYSCLK = PLL
 8003206:	4b0d      	ldr	r3, [pc, #52]	; (800323c <InitRCC+0x1bc>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4a0c      	ldr	r2, [pc, #48]	; (800323c <InitRCC+0x1bc>)
 800320c:	f043 0303 	orr.w	r3, r3, #3
 8003210:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS) {} 				// wait till PLL is used
 8003212:	bf00      	nop
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <InitRCC+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d1f9      	bne.n	8003214 <InitRCC+0x194>

	//waiting for at least 1us
	while (!(ticks = 200))
 8003220:	bf00      	nop
 8003222:	23c8      	movs	r3, #200	; 0xc8
 8003224:	71fb      	strb	r3, [r7, #7]
	{
		ticks++;
	}

	ticks = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	71fb      	strb	r3, [r7, #7]

}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40007000 	.word	0x40007000
 800323c:	40021000 	.word	0x40021000
 8003240:	40022000 	.word	0x40022000

08003244 <NMI_Handler>:
	FLASH -> CR &= ~FLASH_CR_PG;
}


void NMI_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
	 if (RCC -> CIFR & RCC_CIFR_CSSF)
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <NMI_Handler+0x28>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <NMI_Handler+0x1c>
	 {
		 RCC	->	CICR		|=RCC_CICR_CSSC;						//Clock security system interrupt clear
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <NMI_Handler+0x28>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <NMI_Handler+0x28>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325e:	6213      	str	r3, [r2, #32]
	 }
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000

08003270 <InitLedGPIO>:
#include "LED.h"

/********************************************* Used functions ********************************************/


void InitLedGPIO (void){
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0

	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;		// Enable clock port B
 8003274:	4b26      	ldr	r3, [pc, #152]	; (8003310 <InitLedGPIO+0xa0>)
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	4a25      	ldr	r2, [pc, #148]	; (8003310 <InitLedGPIO+0xa0>)
 800327a:	f043 0302 	orr.w	r3, r3, #2
 800327e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOCEN;		// Enable clock port C
 8003280:	4b23      	ldr	r3, [pc, #140]	; (8003310 <InitLedGPIO+0xa0>)
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	4a22      	ldr	r2, [pc, #136]	; (8003310 <InitLedGPIO+0xa0>)
 8003286:	f043 0304 	orr.w	r3, r3, #4
 800328a:	64d3      	str	r3, [r2, #76]	; 0x4c

	//LED1 -- green
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE5;
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <InitLedGPIO+0xa4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a20      	ldr	r2, [pc, #128]	; (8003314 <InitLedGPIO+0xa4>)
 8003292:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003296:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE5_0;		// Setting GPIO for PP output
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <InitLedGPIO+0xa4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <InitLedGPIO+0xa4>)
 800329e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032a2:	6013      	str	r3, [r2, #0]

	//LED2 -- yellow
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE9;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <InitLedGPIO+0xa4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <InitLedGPIO+0xa4>)
 80032aa:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80032ae:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE9_0;		// Setting GPIO for PP output
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <InitLedGPIO+0xa4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <InitLedGPIO+0xa4>)
 80032b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

	//LED3 -- white
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE13;
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <InitLedGPIO+0xa8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	; (8003318 <InitLedGPIO+0xa8>)
 80032c2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80032c6:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE13_0;	// Setting GPIO for PP output
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <InitLedGPIO+0xa8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a12      	ldr	r2, [pc, #72]	; (8003318 <InitLedGPIO+0xa8>)
 80032ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032d2:	6013      	str	r3, [r2, #0]

	//LED4 -- blue
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE14;
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <InitLedGPIO+0xa8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <InitLedGPIO+0xa8>)
 80032da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80032de:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE14_0;	// Setting GPIO for PP output
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <InitLedGPIO+0xa8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <InitLedGPIO+0xa8>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6013      	str	r3, [r2, #0]

	//LED2 -- yellow
	GPIOC	-> MODER	&= ~GPIO_MODER_MODE15;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <InitLedGPIO+0xa8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a09      	ldr	r2, [pc, #36]	; (8003318 <InitLedGPIO+0xa8>)
 80032f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80032f6:	6013      	str	r3, [r2, #0]
	GPIOC	-> MODER	|= GPIO_MODER_MODE15_0;	// Setting GPIO for PP output
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <InitLedGPIO+0xa8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a06      	ldr	r2, [pc, #24]	; (8003318 <InitLedGPIO+0xa8>)
 80032fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	48000400 	.word	0x48000400
 8003318:	48000800 	.word	0x48000800

0800331c <SetLED>:

//Sets Led state using binary number
void SetLED (LED COLOR, LED STATE)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	71fb      	strb	r3, [r7, #7]
 8003328:	4613      	mov	r3, r2
 800332a:	71bb      	strb	r3, [r7, #6]
	if ((COLOR == GREEN) && STATE == ON)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d108      	bne.n	8003344 <SetLED+0x28>
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d105      	bne.n	8003344 <SetLED+0x28>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BS5; 		// Enable LED1
 8003338:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <SetLED+0x10c>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	4a3a      	ldr	r2, [pc, #232]	; (8003428 <SetLED+0x10c>)
 800333e:	f043 0320 	orr.w	r3, r3, #32
 8003342:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == GREEN) && STATE == OFF)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	2b05      	cmp	r3, #5
 8003348:	d108      	bne.n	800335c <SetLED+0x40>
 800334a:	79bb      	ldrb	r3, [r7, #6]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <SetLED+0x40>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BR5; 		// Disable LED1
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <SetLED+0x10c>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4a34      	ldr	r2, [pc, #208]	; (8003428 <SetLED+0x10c>)
 8003356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800335a:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == YELLOW) && STATE == ON)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	2b09      	cmp	r3, #9
 8003360:	d108      	bne.n	8003374 <SetLED+0x58>
 8003362:	79bb      	ldrb	r3, [r7, #6]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <SetLED+0x58>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BS9; 		// Enable LED2
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <SetLED+0x10c>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <SetLED+0x10c>)
 800336e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003372:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == YELLOW) && STATE == OFF)
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	2b09      	cmp	r3, #9
 8003378:	d108      	bne.n	800338c <SetLED+0x70>
 800337a:	79bb      	ldrb	r3, [r7, #6]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <SetLED+0x70>
	{
		GPIOB	-> BSRR		|= GPIO_BSRR_BR9; 		// Disable LED2
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <SetLED+0x10c>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4a28      	ldr	r2, [pc, #160]	; (8003428 <SetLED+0x10c>)
 8003386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800338a:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == WHITE) && STATE == ON)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	2b0d      	cmp	r3, #13
 8003390:	d108      	bne.n	80033a4 <SetLED+0x88>
 8003392:	79bb      	ldrb	r3, [r7, #6]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <SetLED+0x88>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS13; 	// Enable LED3
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <SetLED+0x110>)
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	4a23      	ldr	r2, [pc, #140]	; (800342c <SetLED+0x110>)
 800339e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a2:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == WHITE) && STATE == OFF)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	2b0d      	cmp	r3, #13
 80033a8:	d108      	bne.n	80033bc <SetLED+0xa0>
 80033aa:	79bb      	ldrb	r3, [r7, #6]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <SetLED+0xa0>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR13; 	// Disable LED3
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <SetLED+0x110>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <SetLED+0x110>)
 80033b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033ba:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == BLUE) && STATE == ON)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	2b0e      	cmp	r3, #14
 80033c0:	d108      	bne.n	80033d4 <SetLED+0xb8>
 80033c2:	79bb      	ldrb	r3, [r7, #6]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <SetLED+0xb8>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS14; 	// Enable LED4
 80033c8:	4b18      	ldr	r3, [pc, #96]	; (800342c <SetLED+0x110>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	4a17      	ldr	r2, [pc, #92]	; (800342c <SetLED+0x110>)
 80033ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d2:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == BLUE) && STATE == OFF)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	2b0e      	cmp	r3, #14
 80033d8:	d108      	bne.n	80033ec <SetLED+0xd0>
 80033da:	79bb      	ldrb	r3, [r7, #6]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <SetLED+0xd0>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR14; 	// Disable LED4
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <SetLED+0x110>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	4a11      	ldr	r2, [pc, #68]	; (800342c <SetLED+0x110>)
 80033e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033ea:	6193      	str	r3, [r2, #24]
	}

	if ((COLOR == RED) && STATE == ON)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d108      	bne.n	8003404 <SetLED+0xe8>
 80033f2:	79bb      	ldrb	r3, [r7, #6]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <SetLED+0xe8>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BS15; 	// Enable LED5
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <SetLED+0x110>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	4a0b      	ldr	r2, [pc, #44]	; (800342c <SetLED+0x110>)
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	6193      	str	r3, [r2, #24]
	}
	if ((COLOR == RED) && STATE == OFF)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	d108      	bne.n	800341c <SetLED+0x100>
 800340a:	79bb      	ldrb	r3, [r7, #6]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <SetLED+0x100>
	{
		GPIOC	-> BSRR		|= GPIO_BSRR_BR15; 	// Disable LED5
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <SetLED+0x110>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	4a05      	ldr	r2, [pc, #20]	; (800342c <SetLED+0x110>)
 8003416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800341a:	6193      	str	r3, [r2, #24]
	}
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	48000400 	.word	0x48000400
 800342c:	48000800 	.word	0x48000800

08003430 <ToggleLED>:

void ToggleLED (LED COLOR)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
	if (COLOR == GREEN)
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	2b05      	cmp	r3, #5
 800343e:	d105      	bne.n	800344c <ToggleLED+0x1c>
	{
		GPIOB	-> ODR ^= GPIO_ODR_OD5; 					// Toggle LED1
 8003440:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <ToggleLED+0x70>)
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <ToggleLED+0x70>)
 8003446:	f083 0320 	eor.w	r3, r3, #32
 800344a:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == YELLOW)
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	2b09      	cmp	r3, #9
 8003450:	d105      	bne.n	800345e <ToggleLED+0x2e>
	{
		GPIOB	-> ODR ^= GPIO_ODR_OD9; 					// Toggle LED2
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <ToggleLED+0x70>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <ToggleLED+0x70>)
 8003458:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 800345c:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == WHITE)
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	2b0d      	cmp	r3, #13
 8003462:	d105      	bne.n	8003470 <ToggleLED+0x40>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD13; 					// Toggle LED3
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <ToggleLED+0x74>)
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <ToggleLED+0x74>)
 800346a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800346e:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == BLUE)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	2b0e      	cmp	r3, #14
 8003474:	d105      	bne.n	8003482 <ToggleLED+0x52>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD14; 					// Toggle LED4
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <ToggleLED+0x74>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <ToggleLED+0x74>)
 800347c:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8003480:	6153      	str	r3, [r2, #20]
	}
	if (COLOR == RED)
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	2b0f      	cmp	r3, #15
 8003486:	d105      	bne.n	8003494 <ToggleLED+0x64>
	{
		GPIOC	-> ODR ^= GPIO_ODR_OD15; 					// Toggle LED5
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <ToggleLED+0x74>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <ToggleLED+0x74>)
 800348e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8003492:	6153      	str	r3, [r2, #20]
	}
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	48000400 	.word	0x48000400
 80034a4:	48000800 	.word	0x48000800

080034a8 <BlinkLED>:

void BlinkLED (LED COLOR, uint16_t period_ms)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	460a      	mov	r2, r1
 80034b2:	71fb      	strb	r3, [r7, #7]
 80034b4:	4613      	mov	r3, r2
 80034b6:	80bb      	strh	r3, [r7, #4]
	ToggleLED(COLOR);
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff ffb8 	bl	8003430 <ToggleLED>
	vTaskDelay(period_ms);
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fbe4 	bl	8001c90 <vTaskDelay>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	db0b      	blt.n	80034fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	f003 021f 	and.w	r2, r3, #31
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <__NVIC_EnableIRQ+0x38>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	2001      	movs	r0, #1
 80034f2:	fa00 f202 	lsl.w	r2, r0, r2
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	e000e100 	.word	0xe000e100

0800350c <InitUSART1>:

#include "UART.h"

/********************************************* Used functions ********************************************/

void InitUSART1 (void){
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0

	RCC		-> APB2ENR	|= RCC_APB2ENR_USART1EN;
 8003510:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <InitUSART1+0xe4>)
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	4a36      	ldr	r2, [pc, #216]	; (80035f0 <InitUSART1+0xe4>)
 8003516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351a:	6613      	str	r3, [r2, #96]	; 0x60

	RCC		-> AHB2ENR	|= RCC_AHB2ENR_GPIOBEN;
 800351c:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <InitUSART1+0xe4>)
 800351e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003520:	4a33      	ldr	r2, [pc, #204]	; (80035f0 <InitUSART1+0xe4>)
 8003522:	f043 0302 	orr.w	r3, r3, #2
 8003526:	64d3      	str	r3, [r2, #76]	; 0x4c

	//TX
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE6;
 8003528:	4b32      	ldr	r3, [pc, #200]	; (80035f4 <InitUSART1+0xe8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <InitUSART1+0xe8>)
 800352e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003532:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE6_1;
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <InitUSART1+0xe8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <InitUSART1+0xe8>)
 800353a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800353e:	6013      	str	r3, [r2, #0]

	GPIOB	-> OTYPER	&= ~GPIO_OTYPER_OT_6;
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <InitUSART1+0xe8>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <InitUSART1+0xe8>)
 8003546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354a:	6053      	str	r3, [r2, #4]

	GPIOB	-> PUPDR	&= ~GPIO_PUPDR_PUPD6;
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <InitUSART1+0xe8>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <InitUSART1+0xe8>)
 8003552:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003556:	60d3      	str	r3, [r2, #12]
	GPIOB	-> PUPDR	|= GPIO_PUPDR_PUPD9_0;
 8003558:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <InitUSART1+0xe8>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <InitUSART1+0xe8>)
 800355e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003562:	60d3      	str	r3, [r2, #12]

	GPIOB	-> OSPEEDR	|= GPIO_OSPEEDR_OSPEED8;
 8003564:	4b23      	ldr	r3, [pc, #140]	; (80035f4 <InitUSART1+0xe8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <InitUSART1+0xe8>)
 800356a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800356e:	6093      	str	r3, [r2, #8]

	GPIOB	-> AFR[0]	|= 0x07 << (4*6);
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <InitUSART1+0xe8>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <InitUSART1+0xe8>)
 8003576:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800357a:	6213      	str	r3, [r2, #32]

	//RX
	GPIOB	-> MODER	&= ~GPIO_MODER_MODE7;
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <InitUSART1+0xe8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <InitUSART1+0xe8>)
 8003582:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003586:	6013      	str	r3, [r2, #0]
	GPIOB	-> MODER	|= GPIO_MODER_MODE7_1;
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <InitUSART1+0xe8>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <InitUSART1+0xe8>)
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	6013      	str	r3, [r2, #0]

	GPIOB	-> PUPDR	&= ~GPIO_PUPDR_PUPD7;
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <InitUSART1+0xe8>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <InitUSART1+0xe8>)
 800359a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800359e:	60d3      	str	r3, [r2, #12]

	GPIOB	-> AFR[0]	|= 0x07 << (4*7);
 80035a0:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <InitUSART1+0xe8>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <InitUSART1+0xe8>)
 80035a6:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 80035aa:	6213      	str	r3, [r2, #32]

	//baudrate = 9600
	USART1	-> BRR		= 0x445C; //BRR = (fck + baudrate /2 ) / baudrate
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <InitUSART1+0xec>)
 80035ae:	f244 425c 	movw	r2, #17500	; 0x445c
 80035b2:	60da      	str	r2, [r3, #12]

	USART1	-> CR1		|= USART_CR1_TE;
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <InitUSART1+0xec>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <InitUSART1+0xec>)
 80035ba:	f043 0308 	orr.w	r3, r3, #8
 80035be:	6013      	str	r3, [r2, #0]
	USART1	-> CR1		|= USART_CR1_RE;
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <InitUSART1+0xec>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <InitUSART1+0xec>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6013      	str	r3, [r2, #0]
	USART1	-> CR1 		|= USART_CR1_UE;
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <InitUSART1+0xec>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a09      	ldr	r2, [pc, #36]	; (80035f8 <InitUSART1+0xec>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6013      	str	r3, [r2, #0]

	USART1	-> CR1		|= USART_CR1_RXNEIE;
 80035d8:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <InitUSART1+0xec>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a06      	ldr	r2, [pc, #24]	; (80035f8 <InitUSART1+0xec>)
 80035de:	f043 0320 	orr.w	r3, r3, #32
 80035e2:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(USART1_IRQn);
 80035e4:	2025      	movs	r0, #37	; 0x25
 80035e6:	f7ff ff73 	bl	80034d0 <__NVIC_EnableIRQ>
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	48000400 	.word	0x48000400
 80035f8:	40013800 	.word	0x40013800

080035fc <SendUSART1>:


void SendUSART1 (char chr){
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->ISR & USART_ISR_TC));
 8003606:	bf00      	nop
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <SendUSART1+0x38>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f9      	beq.n	8003608 <SendUSART1+0xc>
	USART1	->ISR		&= ~USART_ISR_TC;
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <SendUSART1+0x38>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <SendUSART1+0x38>)
 800361a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800361e:	61d3      	str	r3, [r2, #28]

	USART1	->TDR 		= chr;
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <SendUSART1+0x38>)
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40013800 	.word	0x40013800

08003638 <SendStringUSART1>:

void SendStringUSART1 (char* str){
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]

	while(str[i])
 8003644:	e009      	b.n	800365a <SendStringUSART1+0x22>
	{
		SendUSART1 (str[i++]);
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	73fa      	strb	r2, [r7, #15]
 800364c:	461a      	mov	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ffd1 	bl	80035fc <SendUSART1>
	while(str[i])
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1ef      	bne.n	8003646 <SendStringUSART1+0xe>
	}
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <USART1_IRQHandler>:
	USART1	->ISR		&= ~USART_ISR_TC;

	USART1	->TDR 		= data;
}

void USART1_IRQHandler (void){
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	if (USART1->ISR & USART_CR1_RXNEIE)
 8003674:	4b08      	ldr	r3, [pc, #32]	; (8003698 <USART1_IRQHandler+0x28>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <USART1_IRQHandler+0x1c>
	{
		USART1	-> ISR &= ~USART_CR1_RXNEIE;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <USART1_IRQHandler+0x28>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4a04      	ldr	r2, [pc, #16]	; (8003698 <USART1_IRQHandler+0x28>)
 8003686:	f023 0320 	bic.w	r3, r3, #32
 800368a:	61d3      	str	r3, [r2, #28]
	}
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40013800 	.word	0x40013800

0800369c <UtoaBuiltinDiv>:
#include "conversions.h"

char * UtoaBuiltinDiv(uint16_t value, char *buffer)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	80fb      	strh	r3, [r7, #6]
   buffer += 11;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	330b      	adds	r3, #11
 80036ac:	603b      	str	r3, [r7, #0]
   *--buffer = 0;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
   do
   {
      *--buffer = value % 10 + '0';
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <UtoaBuiltinDiv+0x64>)
 80036be:	fba3 1302 	umull	r1, r3, r3, r2
 80036c2:	08d9      	lsrs	r1, r3, #3
 80036c4:	460b      	mov	r3, r1
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	3a01      	subs	r2, #1
 80036d6:	603a      	str	r2, [r7, #0]
 80036d8:	3330      	adds	r3, #48	; 0x30
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	701a      	strb	r2, [r3, #0]
      value /= 10;
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <UtoaBuiltinDiv+0x64>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	08db      	lsrs	r3, r3, #3
 80036ea:	80fb      	strh	r3, [r7, #6]
   }
   while (value != 0);
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e3      	bne.n	80036ba <UtoaBuiltinDiv+0x1e>
   return buffer;
 80036f2:	683b      	ldr	r3, [r7, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	cccccccd 	.word	0xcccccccd

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4e0d      	ldr	r6, [pc, #52]	; (800373c <__libc_init_array+0x38>)
 8003708:	4c0d      	ldr	r4, [pc, #52]	; (8003740 <__libc_init_array+0x3c>)
 800370a:	1ba4      	subs	r4, r4, r6
 800370c:	10a4      	asrs	r4, r4, #2
 800370e:	2500      	movs	r5, #0
 8003710:	42a5      	cmp	r5, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	4e0b      	ldr	r6, [pc, #44]	; (8003744 <__libc_init_array+0x40>)
 8003716:	4c0c      	ldr	r4, [pc, #48]	; (8003748 <__libc_init_array+0x44>)
 8003718:	f000 f82c 	bl	8003774 <_init>
 800371c:	1ba4      	subs	r4, r4, r6
 800371e:	10a4      	asrs	r4, r4, #2
 8003720:	2500      	movs	r5, #0
 8003722:	42a5      	cmp	r5, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800372c:	4798      	blx	r3
 800372e:	3501      	adds	r5, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003736:	4798      	blx	r3
 8003738:	3501      	adds	r5, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	08003848 	.word	0x08003848
 8003740:	08003848 	.word	0x08003848
 8003744:	08003848 	.word	0x08003848
 8003748:	0800384c 	.word	0x0800384c

0800374c <memcpy>:
 800374c:	b510      	push	{r4, lr}
 800374e:	1e43      	subs	r3, r0, #1
 8003750:	440a      	add	r2, r1
 8003752:	4291      	cmp	r1, r2
 8003754:	d100      	bne.n	8003758 <memcpy+0xc>
 8003756:	bd10      	pop	{r4, pc}
 8003758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800375c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003760:	e7f7      	b.n	8003752 <memcpy+0x6>

08003762 <memset>:
 8003762:	4402      	add	r2, r0
 8003764:	4603      	mov	r3, r0
 8003766:	4293      	cmp	r3, r2
 8003768:	d100      	bne.n	800376c <memset+0xa>
 800376a:	4770      	bx	lr
 800376c:	f803 1b01 	strb.w	r1, [r3], #1
 8003770:	e7f9      	b.n	8003766 <memset+0x4>
	...

08003774 <_init>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr

08003780 <_fini>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr
